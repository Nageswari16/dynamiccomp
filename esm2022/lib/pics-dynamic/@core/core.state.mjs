import { routerReducer } from '@ngrx/router-store';
import { createFeatureSelector } from '@ngrx/store';
import { authReducer } from './auth/auth.reducer';
import { debug } from './meta-reducers/debug.reducer';
import { initStateFromLocalStorage } from './meta-reducers/init-state-from-local-storage.reducer';
import { gridsterReducer } from '../@shared/master-view-state/master-view.reducer';
import { PlatformDataStoreService } from '../@core/service/platform-data-store.service';
import { inject, Injector, runInInjectionContext } from '@angular/core';
const injector = Injector.create({
    providers: [
        { provide: PlatformDataStoreService, useClass: PlatformDataStoreService },
    ]
});
let environment;
runInInjectionContext(injector, () => {
    const storeService = inject(PlatformDataStoreService);
    storeService.currentStore.subscribe((res) => {
        if (res) {
            environment = res['RBACORG'];
        }
    });
});
export const reducers = {
    auth: authReducer,
    router: routerReducer,
    masterWidget: gridsterReducer
};
export const metaReducers = [initStateFromLocalStorage];
if (!environment?.production) {
    metaReducers.unshift(debug);
}
export const selectAuthState = createFeatureSelector('auth');
export const selectRouterState = createFeatureSelector('router');
export const selectGridsterState = createFeatureSelector('masterWidget');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BpY3MtY29yZS9keW5hbWljL3NyYy9saWIvcGljcy1keW5hbWljL0Bjb3JlL2NvcmUuc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBc0IsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RSxPQUFPLEVBQW9CLHFCQUFxQixFQUFlLE1BQU0sYUFBYSxDQUFDO0FBRW5GLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFHbEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ25GLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDL0IsU0FBUyxFQUFFO1FBQ1QsRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFO0tBQzFFO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsSUFBSSxXQUFlLENBQUM7QUFDcEIscUJBQXFCLENBQUMsUUFBUSxFQUFDLEdBQUcsRUFBRTtJQUNsQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUV0RCxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1FBQy9DLElBQUksR0FBRyxFQUFFO1lBQ04sV0FBVyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQStCO0lBQ2xELElBQUksRUFBRSxXQUFXO0lBQ2pCLE1BQU0sRUFBRSxhQUFhO0lBQ3JCLFlBQVksRUFBRSxlQUFlO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQTRCLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUdqRixJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRTtJQUM1QixZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzdCO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFZLE1BQU0sQ0FBQyxDQUFDO0FBRXhFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLHFCQUFxQixDQUFxQyxRQUFRLENBQUMsQ0FBQztBQUVyRyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxxQkFBcUIsQ0FBa0IsY0FBYyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByb3V0ZXJSZWR1Y2VyLCBSb3V0ZXJSZWR1Y2VyU3RhdGUgfSBmcm9tICdAbmdyeC9yb3V0ZXItc3RvcmUnO1xyXG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyTWFwLCBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsIE1ldGFSZWR1Y2VyIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBBdXRoU3RhdGUgfSBmcm9tICcuL2F1dGgvYXV0aC5tb2RlbHMnO1xyXG5pbXBvcnQgeyBhdXRoUmVkdWNlciB9IGZyb20gJy4vYXV0aC9hdXRoLnJlZHVjZXInO1xyXG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4vbWV0YS1yZWR1Y2Vycy9kZWJ1Zy5yZWR1Y2VyJztcclxuaW1wb3J0IHsgaW5pdFN0YXRlRnJvbUxvY2FsU3RvcmFnZSB9IGZyb20gJy4vbWV0YS1yZWR1Y2Vycy9pbml0LXN0YXRlLWZyb20tbG9jYWwtc3RvcmFnZS5yZWR1Y2VyJztcclxuaW1wb3J0IHsgUm91dGVyU3RhdGVVcmwgfSBmcm9tICcuL3JvdXRlci9yb3V0ZXIuc3RhdGUnO1xyXG5pbXBvcnQgeyBNYXN0ZXJWaWV3U3RhdGUgfSBmcm9tICcuLi9Ac2hhcmVkL21hc3Rlci12aWV3LXN0YXRlL21hc3Rlci12aWV3LnN0YXRlJztcclxuaW1wb3J0IHsgZ3JpZHN0ZXJSZWR1Y2VyIH0gZnJvbSAnLi4vQHNoYXJlZC9tYXN0ZXItdmlldy1zdGF0ZS9tYXN0ZXItdmlldy5yZWR1Y2VyJztcclxuaW1wb3J0IHsgUGxhdGZvcm1EYXRhU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9wbGF0Zm9ybS1kYXRhLXN0b3JlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBpbmplY3QsIEluamVjdG9yLCBydW5JbkluamVjdGlvbkNvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmNvbnN0IGluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHsgcHJvdmlkZTogUGxhdGZvcm1EYXRhU3RvcmVTZXJ2aWNlLCB1c2VDbGFzczogUGxhdGZvcm1EYXRhU3RvcmVTZXJ2aWNlIH0sXHJcbiAgXVxyXG59KTtcclxuXHJcbmxldCBlbnZpcm9ubWVudDphbnk7XHJcbnJ1bkluSW5qZWN0aW9uQ29udGV4dChpbmplY3RvciwoKSA9PiB7XHJcbiAgY29uc3Qgc3RvcmVTZXJ2aWNlID0gaW5qZWN0KFBsYXRmb3JtRGF0YVN0b3JlU2VydmljZSk7XHJcbiAgXHJcbiAgc3RvcmVTZXJ2aWNlLmN1cnJlbnRTdG9yZS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgICBlbnZpcm9ubWVudCA9IHJlc1snUkJBQ09SRyddO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxBcHBTdGF0ZT4gPSB7XHJcbiAgYXV0aDogYXV0aFJlZHVjZXIsXHJcbiAgcm91dGVyOiByb3V0ZXJSZWR1Y2VyLFxyXG4gIG1hc3RlcldpZGdldDogZ3JpZHN0ZXJSZWR1Y2VyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxBcHBTdGF0ZT5bXSA9IFtpbml0U3RhdGVGcm9tTG9jYWxTdG9yYWdlXTtcclxuXHJcblxyXG5pZiAoIWVudmlyb25tZW50Py5wcm9kdWN0aW9uKSB7XHJcbiAgbWV0YVJlZHVjZXJzLnVuc2hpZnQoZGVidWcpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0QXV0aFN0YXRlID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPEF1dGhTdGF0ZT4oJ2F1dGgnKTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RSb3V0ZXJTdGF0ZSA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxSb3V0ZXJSZWR1Y2VyU3RhdGU8Um91dGVyU3RhdGVVcmw+Pigncm91dGVyJyk7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0R3JpZHN0ZXJTdGF0ZSA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxNYXN0ZXJWaWV3U3RhdGU+KCdtYXN0ZXJXaWRnZXQnKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwU3RhdGUge1xyXG4gIGF1dGg6IEF1dGhTdGF0ZTtcclxuICByb3V0ZXI6IFJvdXRlclJlZHVjZXJTdGF0ZTxSb3V0ZXJTdGF0ZVVybD47XHJcbiAgbWFzdGVyV2lkZ2V0OiBNYXN0ZXJWaWV3U3RhdGVcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSBleHRlbmRzIEFwcFN0YXRlIHtcclxuICBhcHA6IEFwcFN0YXRlO1xyXG59XHJcbiJdfQ==