import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DynamicSearchURL } from '../urls/dynamic-search-url.config';
import * as i0 from "@angular/core";
import * as i1 from "./platform-data-store.service";
export class DynamicsearchService {
    _storeservice;
    port;
    port_communication;
    port_document;
    port_searchinput;
    port_report;
    onChangePageEventData;
    onChangePageEventId;
    onChangePageUserData;
    onChangePersonId;
    onChangeConfigData;
    inputFieldId;
    personTabName;
    personHealthTabName;
    personFinanceTabName;
    clickedId;
    rowData;
    caseNumberAfterApproval;
    _httpService;
    isPageDesign = new BehaviorSubject(false);
    observePage = this.isPageDesign.asObservable();
    data = new BehaviorSubject(false);
    sourceId = new BehaviorSubject('');
    sourceIdService = new BehaviorSubject('');
    id = new BehaviorSubject('');
    pageId = new BehaviorSubject('');
    moduleid = new BehaviorSubject('');
    purposeid = new BehaviorSubject('');
    workFlowDesign = new BehaviorSubject(null);
    workFlowStatus = new BehaviorSubject('');
    result = new BehaviorSubject('');
    constructor(_storeservice) {
        this._storeservice = _storeservice;
        this._storeservice.currentStore.subscribe((res) => {
            if (res) {
                this._httpService = res['HTTPSERVICE'];
            }
        });
        // constructor(private _httpService:HttpService){
        this.port = 'workflow';
        this.port_communication = 'communication';
        this.port_document = 'document';
        this.port_searchinput = 'searchinput';
        this.port_report = 'report';
    }
    //This Method for to set httpfile from independent service calls from web component
    SetHttpService(httpService) {
        this._httpService = httpService;
    }
    set clickableData(data) {
        this.inputFieldId = data;
    }
    get clickableData() {
        return this.inputFieldId;
    }
    set personTabNameData(data) {
        this.personTabName = data;
    }
    get personTabNameData() {
        return this.personTabName;
    }
    set personHealthTabNameData(data) {
        this.personHealthTabName = data;
    }
    get personHealthTabNameData() {
        return this.personHealthTabName;
    }
    set personFinanceTabNameData(data) {
        this.personFinanceTabName = data;
    }
    get personFinanceTabNameData() {
        return this.personFinanceTabName;
    }
    set clickedIdData(data) {
        this.clickedId = data;
    }
    get clickedIdData() {
        return this.clickedId;
    }
    set caseNumberAfterApprovalData(data) {
        this.caseNumberAfterApproval = data;
    }
    get caseNumberAfterApprovalData() {
        return this.caseNumberAfterApproval;
    }
    set clickedRowData(data) {
        this.rowData = data;
    }
    get clickedRowData() {
        return this.rowData;
    }
    getGridUserPreference(id) {
        return this._httpService.get(DynamicSearchURL.EndPoints.userConfig.getUserConfig + id);
    }
    getStaticGridConfig(id) {
        return this._httpService.get(DynamicSearchURL.EndPoints.userConfig.getStaticGridConfig.replace('{id}', id));
    }
    saveGridUserPreference(data) {
        return this._httpService.post(DynamicSearchURL.EndPoints.userConfig.saveUserConfig, data);
    }
    sendMail(data) {
        return this._httpService.post(DynamicSearchURL.EndPoints.notification.sendMail, data);
    }
    generateDocument(data, typeCheck) {
        const url = typeCheck
            ? DynamicSearchURL.EndPoints.documents.generateExcel
            : DynamicSearchURL.EndPoints.documents.generatePDF;
        return this._httpService.post(url, data);
    }
    exportData(data, link) {
        return this._httpService.post(link, data);
    }
    saveSearchCriteria(data) {
        return this._httpService.post(DynamicSearchURL.EndPoints.pageConfig.postApiurl, data);
    }
    startScheduling(data, url) {
        return this._httpService.post(url, data);
    }
    startSchedulingNoUrl(data, id) {
        return this._httpService.post(DynamicSearchURL.EndPoints.report.schedulertrigger + id, data);
    }
    getTemplate(formId) {
        return this._httpService.get(DynamicSearchURL.EndPoints.pageConfig.pageVersion + '/' + formId + '?applyPermissions=true');
    }
    // Remove Permission For Page-Designer View
    getTemplateView(formId) {
        return this._httpService.get(DynamicSearchURL.EndPoints.pageConfig.pageVersion + '/' + formId + '?applyPermissions=false');
    }
    getPageTabs(pageId) {
        return this._httpService.get(DynamicSearchURL.EndPoints.pageConfig.page + '/' + pageId);
    }
    changePage(page) {
        this.isPageDesign.next(page);
    }
    getFormResponse(pageId) {
        return this._httpService.get(DynamicSearchURL.EndPoints.formResponse.get.replace('{pageid}', pageId)).toPromise();
    }
    getProviderData(providerid) {
        return this._httpService.get(DynamicSearchURL.EndPoints.provider.providerData + '?userid=' + providerid);
    }
    saveCriteriaByPageId(data) {
        return this._httpService.post(DynamicSearchURL.EndPoints.criteria.save, data);
    }
    getCriteriaByPageId(pageId) {
        return this._httpService.get(DynamicSearchURL.EndPoints.criteria.getByPageId.replace('{pageId}', pageId));
    }
    rowVersion(data) {
        return this._httpService.post(DynamicSearchURL.EndPoints.rowversion.copy, data);
    }
    checkDeleteStatus(pageid, id, primarytable) {
        return this._httpService.get(DynamicSearchURL.EndPoints.formResponse.checkDeleteStatus.replace('{id}', id).replace('{pageid}', pageid).replace('{primaryobject}', primarytable));
    }
    checkEditStatus(pageid, id) {
        return this._httpService.get(DynamicSearchURL.EndPoints.formResponse.checkEditStatus.replace('{id}', id).replace('{pageid}', pageid));
    }
    checkRulesInWorkflow(pageData) {
        return this._httpService.post(DynamicSearchURL.EndPoints.checkRules.rules, pageData);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicsearchService, deps: [{ token: i1.PlatformDataStoreService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicsearchService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicsearchService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.PlatformDataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,