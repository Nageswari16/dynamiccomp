import { Component, EventEmitter, Input, Output, ViewChild, ViewChildren } from '@angular/core';
import { DxDataGridComponent } from 'devextreme-angular';
import CustomStore from 'devextreme/data/custom_store';
import { exportDataGrid as exportDataGridToPdf } from 'devextreme/pdf_exporter';
import * as jsPDF from 'jspdf';
import moment from 'moment/moment';
import { GridListService } from '../grid-list/grid-list.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../@core/service/auth.service";
import * as i3 from "../../@core/service/local.service";
import * as i4 from "../../@core/local-storage/local-storage.service";
import * as i5 from "../../@core/service/app.service";
import * as i6 from "../../@core/service/data-store.service";
import * as i7 from "../../@core/service/alert.service";
import * as i8 from "@angular/common";
import * as i9 from "@angular/material/button";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/select";
import * as i12 from "@angular/material/core";
import * as i13 from "@angular/material/tooltip";
import * as i14 from "@angular/material/dialog";
import * as i15 from "devextreme-angular";
import * as i16 from "devextreme-angular/ui/nested";
import * as i17 from "devextreme-angular/core";
import * as i18 from "@angular/forms";
import * as i19 from "../../@core/directives/permission.directive";
import * as i20 from "../../@core/directives/show-field.directives";
import * as i21 from "../alert/alert.component";
import * as i22 from "../../@core/pipe/safe-html.pipe";
const SELECT_ALL = 'Select-ALL';
export class GridListComponent {
    router;
    auth;
    localstorage;
    storageService;
    appService;
    _storeservice;
    renderer;
    alertService;
    dataGrid;
    contentWrappers;
    dataList;
    dataSource;
    columns;
    updateGrid;
    totalCount;
    page;
    isShow;
    exportPageName;
    remoteOperations;
    currentPage = new EventEmitter();
    editTableRow = new EventEmitter();
    viewTableRow = new EventEmitter();
    deleteTableRow = new EventEmitter();
    openExternalLink = new EventEmitter();
    openpopupLink = new EventEmitter();
    routeTo = new EventEmitter();
    openPopup = new EventEmitter();
    sortOrder = new EventEmitter();
    filterSearchValue = new EventEmitter();
    filterBuilderPopup = new EventEmitter();
    filterPanel = new EventEmitter();
    multipleFilterValues = new EventEmitter();
    downloadTableRow = new EventEmitter();
    rowSelection = new EventEmitter();
    toggleRow = new EventEmitter();
    duplicateRow = new EventEmitter();
    viewVersions = new EventEmitter();
    activateVersion = new EventEmitter();
    activatePage = new EventEmitter();
    deactivatePage = new EventEmitter();
    duplicatePageVersion = new EventEmitter();
    selectedRowsData = new EventEmitter();
    orgList;
    dataField;
    columnHeader;
    popupPosition;
    filterValue;
    customOperations;
    fields;
    customStore;
    tempColumns;
    Organization;
    dUrl;
    rdUrl;
    rUrl;
    user;
    userId;
    tempList;
    showVersions;
    displayMode;
    registrationInfo;
    activepagename;
    url;
    oldUrl;
    httpService;
    mainNotificationService;
    sharedService;
    constructor(
    // private dialog: MatDialog,
    router, auth, localstorage, storageService, appService, _storeservice, renderer, alertService) {
        this.router = router;
        this.auth = auth;
        this.localstorage = localstorage;
        this.storageService = storageService;
        this.appService = appService;
        this._storeservice = _storeservice;
        this.renderer = renderer;
        this.alertService = alertService;
        this._storeservice.currentStore.subscribe((res) => {
            if (res) {
                this.httpService = res['HTTPSERVICE'];
                this.mainNotificationService = res['NOTIFICATIONSERVICE'];
                this.sharedService = res['SHAREDSERVICE'];
            }
        });
        this.showVersions = false;
        this.loadGWithParam();
        this.user = this.localstorage.getObj('user');
        this.userId = this.localstorage.getItem('id');
        this.rUrl = this.router.url.split('/');
        if (this.rUrl.includes('versions')) {
            this.showVersions = true;
        }
        this.displayMode = 'compact';
    }
    ngOnInit() {
        if (this.isShow === false) {
            this.isShow = false;
        }
        else {
            this.isShow = true;
        }
        this.tempColumns = this.columns;
        if (this.columns && this.columns.gridConfigFormArray) {
            this.columnHeader = this.columns.gridConfigFormArray.map(column => column.header);
            this.columns = this.columns.gridConfigFormArray;
        }
        else {
            this.columnHeader = this.columns.map(column => column.header);
        }
        this.popupPosition = { of: window, at: 'top', my: 'top', offset: { y: 10 } };
        this.filterValue = [];
        this.customOperations = [];
    }
    ngOnChanges() {
        this.loadGWithParam();
    }
    loadGWithParam() {
        this.tempList = this.dataList;
        if (this.tempList) {
            const name = this.tempList.filter((item) => item.isactive == true);
            if (name.length > 0) {
                this.activepagename = name[0].pagename;
            }
        }
        if (!this.auth.isAdmin()) {
            this.loadGrid({ value: !this.Organization ? this.auth.getOrgID() : this.Organization }, false);
        }
        else {
            this.loadGrid({ value: this.Organization ? this.Organization : SELECT_ALL }, false);
        }
    }
    ngAfterViewInit() {
        this.dataGrid.onOptionChanged.subscribe(e => {
            if (e.name === 'columns' && e.fullName.endsWith('filterValues')) {
                const colIndex = Number(e.fullName
                    .match(/\[\d+\]/)[0]
                    .replace('[', '')
                    .replace(']', ''));
                const values = e.component.columnOption(colIndex, 'filterValues');
                console.log(values);
                this.multipleFilterValues.emit(e);
            }
            // Search
            if (e.name === 'columns' && e.fullName.endsWith('filterValue')) {
                console.log(e);
                this.filterSearchValue.emit(e);
            }
            // filter Builder Popup
            if (e.name === 'filterBuilderPopup') {
                console.log('filterBuilderPopup');
                console.log(e);
                this.filterBuilderPopup.emit(e);
            }
            // filter Panel - enable or disable
            if (e.name === 'filterPanel') {
                console.log(e.value);
                this.filterPanel.emit(e);
            }
            // Sorting
            if (e.name === 'columns' && e.fullName.endsWith('sortOrder')) {
                this.sortOrder.emit(e);
            }
            // Paging
            if (e.name === 'paging') {
                this.currentPage.emit(e.value);
            }
        });
        const REGISTRATION = this.storageService.getItem('REGISTRATION');
        if (REGISTRATION) {
            this.registrationInfo = JSON.parse(REGISTRATION);
        }
        this.contentWrappers.changes.subscribe((comps) => {
            comps.forEach(wrapper => {
                this.applyLinkStyles(wrapper);
            });
        });
    }
    applyLinkStyles(wrapper) {
        const anchors = wrapper.nativeElement.querySelectorAll('a');
        anchors.forEach(anchor => {
            this.renderer.setStyle(anchor, 'color', '#0049E5');
            this.renderer.listen(anchor, 'mouseenter', () => {
                this.renderer.setStyle(anchor, 'opacity', '0.5');
            });
            this.renderer.listen(anchor, 'mouseleave', () => {
                this.renderer.setStyle(anchor, 'opacity', '1');
            });
        });
    }
    loadGrid(orgID, load = true) {
        this.Organization = orgID.value;
        if (load) {
            this.currentPage.emit(orgID.value === SELECT_ALL ? 'all' : orgID.value);
        }
        if (this.tempList && this.tempList.length) {
            this.tempGridList(orgID);
        }
        else {
            this.customStore = this.dataSource;
        }
    }
    tempGridList(orgID) {
        if (orgID && orgID.value) {
            this.splitGridList(orgID);
        }
        if (this.dataList.length === 1 && this.rUrl && this.rUrl[2] === 'view-dashboard') {
            this.dUrl = 'view-dashboard/dashboard';
            this.router.navigateByUrl(`pages/${this.dUrl}/${this.dataList[0]['id']}`);
        }
        // Quick change
        this.customStore = new CustomStore({
            load: _opts => Promise.resolve(this.dataList),
            totalCount: _opts => Promise.resolve(this.totalCount)
        });
    }
    splitGridList(orgID) {
        this.dataList = this.tempList.filter(data => data.organizationid);
        this.dataList = this.tempList.filter(data => data.organizationid === orgID.value);
        if (this.tempList && this.tempList.length && this.tempList[0].displayname && this.tempList[0].userworkinfo) {
            this.dataList = this.tempList.filter(data => data.userworkinfo && data.userworkinfo[0] && data.userworkinfo[0].organizationid);
            this.dataList = this.tempList.filter(data => data.userworkinfo && data.userworkinfo[0] && data.userworkinfo[0].organizationid === orgID.value);
        }
        if (SELECT_ALL === orgID.value) {
            this.dataList = this.tempList;
        }
    }
    getRouter(data) {
        this.routeTo.emit(data);
    }
    navigateLink(event, rowData) {
        // const modal = {
        //   selectedRowsData: [rowData.data]
        // };
        // this.onSelectionChanged(modal);
        const target = event.target;
        if (target.tagName === 'A' && target.href) {
            this.updateNotificationView(rowData);
            this.url = this.extractUrl(target.outerHTML);
            this.oldUrl = this.extractUrl(target.outerHTML);
            const activeId = this.extractID(this.url.split('?')[0]);
            const isNumberCheck = Number(activeId);
            const urlParams = new URLSearchParams(this.url.split('?')[1]);
            const pageID = urlParams.get('pageID');
            event.preventDefault();
            if (pageID) {
                this.mainNotificationService.checkPageAccessForUser(pageID).subscribe((res) => {
                    if (res['data']) {
                        this.checkPageId(isNumberCheck, activeId, event);
                    }
                    else {
                        event.preventDefault();
                        this.alertService.error("Page Not Available: You don't have the necessary permissions to view this page.");
                    }
                }, (error) => {
                    event.preventDefault();
                    this.alertService.error("An error occurred while checking page access.");
                });
            }
            else {
                event.preventDefault();
                this.alertService.error("Page Not Available");
            }
        }
    }
    async checkPageId(isNumberCheck, activeId, event) {
        if (isNumberCheck) {
            const menus = this.localstorage.getObj('MENU');
            const findMenu = menus.find(item => item.name === 'Pages');
            let isExists;
            if (findMenu && findMenu.length > 0) {
                isExists = findMenu.submenu.find(item => item.id == isNumberCheck);
            }
            if (isExists) {
                this.url = this.url.replace(activeId, isExists?.activeVersion?.pageid);
                this.url = this.url.split('?')[0];
                this.routeFunction(isNumberCheck, activeId, event, 'mainMenuWithId');
            }
            else {
                this.routeFunction(isNumberCheck, activeId, event, 'Pages');
            }
        }
        else {
            this.routeFunction(isNumberCheck, activeId, event, 'mainMenuWithURL');
        }
    }
    routeFunction(isNumberCheck, activeId, event, menuType) {
        const menus = this.localstorage.getObj('MENU');
        const mainMenu = menus.find(item => item.route === this.url);
        const mainMenuWithUrl = menus.forEach(element => {
            if (this.url.endsWith(element.route)) {
                return element;
            }
        });
        // const mainMenuWithUrl = menus.find(item => this.url.endsWith(item.route) ? item : [])
        // const mainMenus = menus.filter(item => item.submenu.length == 0);
        const submenus = menus.filter(item => item.submenu.length > 0);
        if (mainMenuWithUrl) {
            this.appService.addValue('CurrentPages', mainMenuWithUrl);
            this.auth.getCurrentMenu(menus);
        }
        else if (mainMenu) {
            menus.forEach(element => {
                if (element.name === mainMenu.name) {
                    element.active = true;
                }
                else {
                    element.active = false;
                }
            });
            if (isNumberCheck) {
                this.appService.addValue('dynamicPages', mainMenu);
                this.auth.getCurrentMenu(menus);
            }
            else {
                this.appService.addValue('currentPages', mainMenu);
                this.auth.getCurrentMenu(menus);
            }
        }
        else {
            menus.forEach((element, index) => {
                if (element.submenu.length > 0) {
                    element.submenu.forEach((element1, index1) => {
                        if (element1?.route == this.url) {
                            this.setActive(menus, index, index1, isNumberCheck);
                        }
                        else if (element1?.activeVersion?.pageid == activeId) {
                            this.setActive(menus, index, index1, isNumberCheck);
                        }
                        else if (element1?.activeVersion?.id == activeId) {
                            this.setActive(menus, index, index1, isNumberCheck);
                        }
                    });
                }
                //  else if(element.submenu.length > 0 && element.name == 'Pages'){
                //   element.submenu.forEach((element1, index1) => {
                //     if(element1?.activeVersion?.pageid == activeId){
                //       this.setActive(menus, index, index1, isNumberCheck);
                //     }
                //   });
                // }
            });
        }
        this.router.navigateByUrl(this.oldUrl);
        event.preventDefault();
    }
    setActive(menus, menuIndex, submenuIndex, isNumberCheck) {
        menus.map(item => item.active = false);
        menus.forEach(element => {
            element.submenu.map(item => item.active = false);
        });
        if (menuIndex) {
            menus[menuIndex].active = true;
            if (submenuIndex >= 0) {
                menus[menuIndex].submenu[submenuIndex].active = true;
            }
            else {
                menus[menuIndex].active = true;
            }
        }
        else {
            menus[0].active = true;
        }
        if (isNumberCheck) {
            this.appService.addValue('dynamicPages', menus[menuIndex]);
            this.auth.getCurrentMenu(menus);
        }
        else {
            this.appService.addValue('currentPages', menus[menuIndex]);
            this.auth.getCurrentMenu(menus);
        }
    }
    extractID(url) {
        const parts = url.split("/");
        const lastIndex = parts.length - 1;
        return parts[lastIndex];
    }
    extractUrl(html) {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        const link = doc.querySelector('a');
        return link ? link.getAttribute('href') : '';
    }
    popup(data) {
        this.openPopup.emit(data);
    }
    downloadData(evt) {
        this.downloadTableRow.emit(evt);
    }
    onSelectionChanged(evt) {
        this.rowSelection.emit(evt);
    }
    editData(evt) {
        this.editTableRow.emit(evt);
    }
    viewData(evt) {
        this.viewTableRow.emit(evt);
    }
    viewVersion(evt) {
        this.viewVersions.emit(evt);
    }
    activatePageVersion(evt) {
        this.activateVersion.emit(evt);
    }
    activatePages(evt) {
        this.activatePage.emit(evt);
    }
    deactivatePages(evt) {
        this.deactivatePage.emit(evt);
    }
    deleteData(evt) {
        this.deleteTableRow.emit(evt);
    }
    openLink(evt) {
        this.openExternalLink.emit(evt);
    }
    openPopupLink(evt) {
        this.openpopupLink.emit(evt);
    }
    activeUser(evt) {
        this.toggleRow.emit(evt);
    }
    duplicateDate(evt) {
        this.duplicateRow.emit(evt);
    }
    duplicateVersion(evt) {
        this.duplicatePageVersion.emit(evt);
    }
    getOrgList() {
        this.httpService.get('/platform/page-designer/page/organization/all').subscribe((data) => {
            if (data.data && data.data.length) {
                this.orgList = data.data.sort((a, b) => a.organizationname?.localeCompare(b.organizationname));
            }
            else {
                this.orgList = [];
            }
        });
    }
    onRowPrepared(e) {
        if (e.rowType === 'data') {
            e.columns.forEach((column, index) => {
                if (column.caption === 'Date') {
                    e.rowElement.cells[index].classList.add('message-new');
                }
            });
            if (e.data.isnew) {
                const element = e.rowElement;
                element.classList.add('isnew');
                e.columns.forEach((column, index) => {
                    if (column.caption === 'Date') {
                        e.rowElement.cells[index].classList.add('new-icon');
                    }
                });
            }
        }
    }
    onCellPrepared(e) {
        if (e.rowType == 'data' && e.data.isactive) {
            if (e.column.dataField === 'version') {
                const element = e.cellElement;
                const livetext = document.createElement('div');
                element.classList.add('live-td');
                livetext.classList.add('live-group');
                livetext.innerHTML = '<div class="live-text">Live</div>';
                element.appendChild(livetext);
            }
            else if (e.column.dataField === 'templatename') {
                this.exportPageName = e.value.includes('_') ? e.value.split('_')[0] : e.value;
            }
        }
        const maxLength = 60;
        if (e.rowType === 'data') {
            if (e.column.dataField === 'message') {
                const element = e.cellElement;
                element.classList.add('truncateWrapper');
                const cell = document.querySelector('.truncateWrapper');
                let cellWidth;
                if (cell) {
                    cellWidth = cell.offsetWidth;
                }
                // Create a div element for truncation
                const textContent = document.createElement('div');
                textContent.classList.add('text-content');
                textContent.style.maxWidth = `${cellWidth + 15}px`;
                textContent.style.overflow = 'hidden';
                textContent.style.whiteSpace = 'normal';
                // Function to truncate HTML content
                const truncateHtml = (html, length) => {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    let truncatedHtml = '';
                    let currentLength = 0;
                    const traverse = (node) => {
                        if (node.nodeType === Node.TEXT_NODE) {
                            const text = node.textContent || '';
                            if (currentLength + text.length > length) {
                                truncatedHtml += text.substring(0, length - currentLength) + '...';
                                currentLength = length;
                                return;
                            }
                            else {
                                truncatedHtml += text;
                                currentLength += text.length;
                            }
                        }
                        else if (node.nodeType === Node.ELEMENT_NODE) {
                            const element = node;
                            truncatedHtml += `<${element.tagName.toLowerCase()}`;
                            Array.from(element.attributes).forEach(attr => {
                                truncatedHtml += ` ${attr.name}="${attr.value}"`;
                            });
                            truncatedHtml += '>';
                            Array.from(element.childNodes).forEach(child => traverse(child));
                            truncatedHtml += `</${element.tagName.toLowerCase()}>`;
                        }
                    };
                    Array.from(tempDiv.childNodes).forEach(node => traverse(node));
                    return truncatedHtml;
                };
                // Set initial truncated HTML
                textContent.innerHTML = truncateHtml(e.text, maxLength);
                // Create the 'Show More' link
                const showMoreLink = document.createElement('a');
                showMoreLink.href = 'javascript:;';
                showMoreLink.classList.add('showtext');
                showMoreLink.innerText = 'Show More';
                // Create a container div for text and link
                const truncateContainer = document.createElement('div');
                truncateContainer.classList.add('text-truncate');
                truncateContainer.appendChild(textContent);
                truncateContainer.appendChild(showMoreLink);
                // Function to extract plain text from HTML
                const extractPlainTextFromHtml = (html) => {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    return tempDiv.textContent || '';
                };
                // Append the container to the cell element
                element.appendChild(truncateContainer);
                // Check if plain text length exceeds the maximum length
                const plainText = extractPlainTextFromHtml(e.text);
                if (plainText.length > maxLength) {
                    // Display the 'Show More' link
                    showMoreLink.style.display = 'inline';
                }
                else {
                    // Hide the 'Show More' link if not needed
                    showMoreLink.style.display = 'none';
                }
                // Handle the 'Show More' link click event
                showMoreLink.addEventListener('click', function () {
                    if (textContent.style.maxHeight === 'none') {
                        // Collapse text
                        textContent.style.maxHeight = '50px';
                        textContent.innerHTML = truncateHtml(e.text, maxLength);
                        showMoreLink.innerText = 'Show More';
                    }
                    else {
                        // Expand text
                        textContent.style.maxHeight = 'none';
                        textContent.innerHTML = e.text;
                        showMoreLink.innerText = 'Show Less';
                    }
                });
                // Check if the text contains an <a> tag
                textContent.addEventListener('click', (event) => {
                    const target = event.target;
                    if (target.tagName.toLowerCase() === 'a') {
                        event.preventDefault();
                        this.navigateLink(event, e);
                    }
                });
            }
        }
    }
    onExporting(e) {
        const pageName = this.localstorage.getObj('FILE EXPORT NAME');
        const currentDate = moment().format('YYYY-MM-DD');
        let fileName;
        if (pageName) {
            fileName = `${pageName} Versions ${currentDate}`;
        }
        else if (this.exportPageName) {
            fileName = `${this.exportPageName}-${currentDate}`;
            if (this.exportPageName === 'version')
                fileName = `${this.exportPageName}-${currentDate}`;
        }
        else {
            fileName = `Dynamic-Pages ${currentDate}`;
        }
        e.component.columnOption('Action', 'visible', false);
        if (e.format === 'pdf') {
            const doc = new jsPDF.jsPDF();
            exportDataGridToPdf({
                jsPDFDocument: doc,
                component: e.component,
                customizeCell: grid => {
                    grid.pdfCell.wordWrapEnabled = true;
                }
            }).then(() => {
                doc.save(`${fileName}.pdf`);
                e.component.columnOption('Action', 'visible', true);
            });
        }
        else if (e.format === 'xlsx') {
            e.fileName = fileName;
            setTimeout(() => {
                e.component.columnOption('Action', 'visible', true);
            }, 500);
        }
    }
    islocked(grid, user) {
        if (grid.lock && user.locked) {
            if (Number(user.lockedby) === Number(this.userId)) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    }
    getDateFormat(value) {
        if (this.registrationInfo) {
            if (value === 'date') {
                return this.registrationInfo['datetimeformat'].split(' ')[0];
            }
            return this.registrationInfo['datetimeformat'];
        }
        return 'MM/dd/yyyy';
    }
    isEnable(grid, record) {
        if (grid.version && record.isEnable) {
            return true;
        }
        else {
            return false;
        }
    }
    updateNotificationView(rowData) {
        const inputRequest = {
            isnew: false
        };
        const model = rowData?.data;
        this.mainNotificationService.updateNotification(model?.id, inputRequest).subscribe((_res) => {
            this.sharedService.sendMessage();
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GridListComponent, deps: [{ token: i1.Router }, { token: i2.AuthService }, { token: i3.LocalService }, { token: i4.LocalStorageService }, { token: i5.AppService }, { token: i6.DataStoreService }, { token: i0.Renderer2 }, { token: i7.AlertService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: GridListComponent, selector: "app-grid-list", inputs: { dataList: "dataList", dataSource: "dataSource", columns: "columns", updateGrid: "updateGrid", totalCount: "totalCount", page: "page", isShow: "isShow", exportPageName: "exportPageName", remoteOperations: "remoteOperations" }, outputs: { currentPage: "currentPage", editTableRow: "editTableRow", viewTableRow: "viewTableRow", deleteTableRow: "deleteTableRow", openExternalLink: "openExternalLink", openpopupLink: "openpopupLink", routeTo: "routeTo", openPopup: "openPopup", sortOrder: "sortOrder", filterSearchValue: "filterSearchValue", filterBuilderPopup: "filterBuilderPopup", filterPanel: "filterPanel", multipleFilterValues: "multipleFilterValues", downloadTableRow: "downloadTableRow", rowSelection: "rowSelection", toggleRow: "toggleRow", duplicateRow: "duplicateRow", viewVersions: "viewVersions", activateVersion: "activateVersion", activatePage: "activatePage", deactivatePage: "deactivatePage", duplicatePageVersion: "duplicatePageVersion", selectedRowsData: "selectedRowsData" }, providers: [GridListService], viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DxDataGridComponent, descendants: true }, { propertyName: "contentWrappers", predicate: ["contentWrapper"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"row\">\r\n  <div class=\"col-12\">\r\n    <p class=\"org-title\" *ngIf=\"user && user.role && auth.isAdmin() && this.isShow\">Organization Name</p>\r\n    <mat-form-field class=\"w-100\" *ngIf=\"auth.isAdmin() && this.isShow\" appearance=\"outline\">\r\n      <mat-select placeholder=\"Organization\" [(ngModel)]=\"Organization\" (selectionChange)=\"loadGrid($event)\">\r\n        <mat-option value=\"Select-ALL\"> Select-ALL</mat-option>\r\n        <mat-option *ngFor=\"let org of orgList\" value=\"{{ org.id }}\"> {{ org.organizationname }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-lg-12 px-0\">\r\n    <h4 class=\"landing-title\">{{activepagename}}</h4>\r\n    <div class=\"main-card card\">\r\n      <div class=\"card-body\">\r\n        <dx-data-grid\r\n          id=\"gridContainer\"\r\n          [dataSource]=\"customStore\"\r\n          [allowColumnReordering]=\"true\"\r\n          [allowColumnResizing]=\"true\"\r\n          [columnAutoWidth]=\"true\"\r\n          [columnMinWidth]=\"100\"\r\n          [width]=\"'100%'\"\r\n          [columnResizingMode]=\"'widget'\"\r\n          [showBorders]=\"true\"\r\n          [rowAlternationEnabled]=\"true\"\r\n          [showColumnLines]=\"true\"\r\n          [showRowLines]=\"false\"\r\n          [filterValue]=\"filterValue\"\r\n          (onSelectionChanged)=\"onSelectionChanged($event)\"\r\n          (onRowPrepared)=\"onRowPrepared($event)\"\r\n          (onCellPrepared)=\"onCellPrepared($event)\"\r\n          (onExporting)=\"onExporting($event)\"\r\n          [remoteOperations]=\"remoteOperations == false ? remoteOperations : {filtering: true, sorting: true, paging: true}\"\r\n          #dataGrid>\r\n          <dxo-load-panel [enabled]=\"false\"></dxo-load-panel>\r\n          <dxo-export [enabled]=\"true\" [formats]=\"['pdf', 'xlsx']\"></dxo-export>\r\n          <dxo-filter-panel [visible]=\"false\"></dxo-filter-panel>\r\n          <dxo-column-chooser *ngIf=\"updateGrid?.chooser\" [enabled]=\"true\" mode=\"select\">\r\n            <dxo-position my=\"right top\" at=\"right top\" of=\".dx-datagrid-column-chooser-button\">\r\n            </dxo-position>\r\n          </dxo-column-chooser>\r\n          <dxo-paging [pageSize]=\"10\"></dxo-paging>\r\n          <dxo-pager\r\n            [visible]=\"true\"\r\n            [allowedPageSizes]=\"[5, 10, 15, 20]\"\r\n            [displayMode]=\"displayMode\"\r\n            [showPageSizeSelector]=\"true\"\r\n            [showInfo]=\"true\"\r\n            [showNavigationButtons]=\"true\"></dxo-pager>\r\n          <!--end pagination-->\r\n          <dxo-filter-builder [customOperations]=\"customOperations\"> </dxo-filter-builder>\r\n          <dxo-filter-builder-popup [position]=\"popupPosition\"> </dxo-filter-builder-popup>\r\n          <dxo-filter-row [visible]=\"true\"></dxo-filter-row>\r\n          <dxo-header-filter [visible]=\"true\"></dxo-header-filter>\r\n          <dxo-selection mode=\"single\" *ngIf=\"updateGrid?.rowSelection\"></dxo-selection>\r\n          <ng-container *ngFor=\"let column of columns; let i = index\">\r\n            <ng-container *ngIf=\"column.hide !== true\">\r\n              <ng-container *ngIf=\"column.link; else noLink\">\r\n                <dxi-column  [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\"\r\n                  cellTemplate=\"cellTemplate\"></dxi-column>\r\n              </ng-container>\r\n              <ng-template #noLink>\r\n                <ng-container *ngIf=\"column.icon; else noIcon\">\r\n                  <dxi-column   [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\"\r\n                    cellTemplate=\"iconTemplate\"></dxi-column>\r\n                </ng-container>\r\n              </ng-template>\r\n              <ng-template #noIcon>\r\n                <ng-container *ngIf=\"column.dateFormat; else noDate\">\r\n                  <dxi-column *ngIf=\"column.dateFormat === 'date' || column.dateFormat === 'datetime'\"\r\n                    [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\"\r\n                    [dataType]=\"column.dateFormat\" [format]=\"getDateFormat(column.dateFormat)\"  >\r\n                  </dxi-column>\r\n                </ng-container>\r\n              </ng-template>\r\n              <ng-template #noDate>\r\n                <dxi-column   [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\">\r\n                </dxi-column>\r\n              </ng-template>\r\n            </ng-container>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"\r\n              updateGrid &&\r\n              (updateGrid?.externalLink ||\r\n                updateGrid?.openPopup ||\r\n                updateGrid?.edit ||\r\n                updateGrid?.delete ||\r\n                updateGrid?.delete ||\r\n                updateGrid?.download ||\r\n                updateGrid?.activatePage ||\r\n                updateGrid?.deactivatePage)\">\r\n            <dxi-column   [width]=\"120\" [allowFiltering]=\"false\" [allowSorting]=\"false\" caption=\"Action\"\r\n              cellTemplate=\"editCellTemplate\"></dxi-column>\r\n            <div class=\"action-icons\" *dxTemplate=\"let d of 'editCellTemplate'\">\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.externalLink\" class=\"no-bg\" matTooltip=\"Open\"\r\n                (click)=\"openLink(d)\">\r\n                <em class=\"fa fa-external-link\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.openPopup\" class=\"no-bg\" matTooltip=\"Open\"\r\n                (click)=\"openPopupLink(d)\">\r\n                <em class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.download\" class=\"no-bg\" matTooltip=\"Download\"\r\n                (click)=\"downloadData(d)\">\r\n                <em class=\"fa fa-download\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.edit && showVersions && !d.data.published\"\r\n                class=\"no-bg mr-2\" matTooltip=\"Edit\" (click)=\"editData(d)\">\r\n                <em class=\"fa fa-pencil\" aria-hidden=\"true\"><span class=\"sr-only\">Edit</span></em>\r\n                <span class=\"sr-only\">View</span>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.editRecord\" class=\"no-bg mr-2\" matTooltip=\"Edit\"\r\n                (click)=\"editData(d)\">\r\n                <em class=\"fa fa-pencil\" aria-hidden=\"true\"><span class=\"sr-only\">Edit</span></em>\r\n                <span class=\"sr-only\">View</span>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.duplicate && !showVersions\" class=\"no-bg mr-2\"\r\n                matTooltip=\"Copy\" (click)=\"duplicateDate(d)\">\r\n                <em class=\"fa fa-copy\" aria-hidden=\"true\" fieldKey=\"PAG_DES_GRID_LIST_COPY\">\r\n                  <span class=\"sr-only\">Copy</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.duplicate && showVersions\" class=\"no-bg mr-2\"\r\n                matTooltip=\"Copy Version\" (click)=\"duplicateVersion(d)\">\r\n                <em class=\"fa fa-copy\" *showField=\"'PAG_DES_GRID_LIST_VERSION'\" aria-hidden=\"true\"><span\r\n                    class=\"sr-only\">Copy Version</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"!d.data.ribbonconfig && updateGrid?.view && showVersions\" class=\"no-bg mr-2\" matTooltip=\"View\"\r\n                fieldKey=\"PAG_DES_GRID_LIST_VERSION\" (click)=\"viewData(d)\">\r\n                <em class=\"fa fa-eye\" aria-hidden=\"true\"><span class=\"sr-only\">View</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.viewRecord\" class=\"no-bg mr-2\" matTooltip=\"View\"\r\n                (click)=\"viewData(d)\">\r\n                <em class=\"fa fa-eye\" aria-hidden=\"true\"><span class=\"sr-only\">View</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.emailview && showVersions\" class=\"no-bg mr-2\"\r\n                matTooltip=\"Preview\" (click)=\"viewData(d)\">\r\n                <em class=\"fa fa-eye\" aria-hidden=\"true\"><span class=\"sr-only\">View</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" title=\"view\"\r\n                *ngIf=\"updateGrid?.version && !showVersions && islocked(updateGrid, d.data) && isEnable(updateGrid, d.data)\" class=\"no-bg\"\r\n                matTooltip=\"Versions\" (click)=\"viewVersion(d)\">\r\n                <em class=\"fa fa-code-fork\" title=\"View\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"!d.data.isEnable && updateGrid?.activatePage\" class=\"no-bg ml-2\"\r\n                matTooltip=\"Activate\" (click)=\"activatePages(d)\">\r\n                <span class=\"material-symbols-outlined activate\">check</span>\r\n              </a>\r\n\r\n              <a href=\"javascript:void(0)\" *ngIf=\"d.data.isEnable && updateGrid?.deactivatePage\" class=\"no-bg ml-2\"\r\n                matTooltip=\"Deactivate\" (click)=\"deactivatePages(d)\">\r\n                <span class=\"material-symbols-outlined deactivate\">close</span>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"showVersions && !d.data.isactive && d.data.published\"\r\n                class=\"no-bg mr-2\" matTooltip=\"Activate\" (click)=\"activatePageVersion(d)\">\r\n                <em class=\"fa fa-check-circle-o\" *showField=\"'PAG_DES_GRID_LIST_ACTIVATE'\" aria-hidden=\"true\"><span\r\n                    class=\"sr-only\">Activate</span></em>\r\n                <span class=\"sr-only\">View</span>\r\n              </a>\r\n              <span *ngIf=\"showVersions && !d.data.isactive && !d.data.published\" class=\"no-bg mr-2\"\r\n                matTooltip=\"This version is not published\">\r\n                <em class=\"fa fa-exclamation-triangle text-warning\" aria-hidden=\"true\">\r\n                  <span class=\"sr-only\">This version is not published</span>\r\n                </em>\r\n                <span class=\"sr-only\">View</span>\r\n              </span>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.lock && d.data.locked\" (click)=\"check(updateGrid, d)\"\r\n                class=\"no-bg ml-2\" matTooltip=\"Locked By - {{ d?.data?.lockedbyUser?.firstname }}\">\r\n                <em *ngIf=\"updateGrid?.lock && d.data.locked\" class=\"fa fa-lock\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.delete\" class=\"no-bg\" matTooltip=\"Delete\"\r\n                (click)=\"deleteData(d)\">\r\n                <em class=\"fa fa-trash\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.toggle\" class=\"no-bg\"\r\n                [matTooltip]=\"d.data.isactive === true ? 'Deactivate' : 'Activate'\" (click)=\"activeUser(d)\">\r\n                <em *ngIf=\"updateGrid?.toggle && d.data.isactive === true\" class=\"fa fa-toggle-on\"></em>\r\n                <em *ngIf=\"updateGrid?.toggle && d.data.isactive === false\" class=\"fa fa-toggle-off\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.activeordeactive\" class=\"no-bg\" (click)=\"deleteData(d)\">\r\n                <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 1\" class=\"fa fa-toggle-on\"></em>\r\n                <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 0\" class=\"fa fa-toggle-off\"></em>\r\n              </a>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <div *dxTemplate=\"let d of 'cellTemplate'\">\r\n            <span href=\"javascript:void(0)\" *ngIf=\"d.value && d.value !== 'null'\" class=\"link-data\" (click)=\"getRouter(d)\">{{\r\n              d.value !== 'null' ? d.value : ''\r\n              }}</span>\r\n          </div>\r\n          <ng-container *ngIf=\"updateGrid.linkVisible\">\r\n            <div *dxTemplate=\"let d of 'cellTemplate'\"(click)=\"navigateLink($event, d)\">\r\n              <span *ngIf=\"d.value && d.value !== 'null'\" #contentWrapper [innerHTML]=\"d.value | safeHtml\">{{\r\n                d.value !== 'null' ? d.value : ''\r\n              }}</span>\r\n            </div>\r\n          </ng-container>\r\n          <div *dxTemplate=\"let d of 'iconTemplate'\">\r\n            <em class=\"fa fa-book\" (click)=\"popup(d.value)\"></em>\r\n          </div>\r\n        </dx-data-grid>\r\n\r\n        <ng-template #callNarrativePopup>\r\n          <h2 matDialogTitle>Narrative</h2>\r\n          <div [innerHTML]=\"narrativeData\"></div>\r\n          <div class=\"text-right\">\r\n            <button mat-button (click)=\"closeNarrativePopup()\" role=\"button\" class=\"btn btn-cancel mr-2\">Close</button>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".split-page{outline:3px;margin:5px}.searchlist{min-width:620px!important;height:280px!important}.searchlist table,.searchlist table tr th,.searchlist table tr td{padding:0}.dx-datagrid .dx-data-row>td.bullet{padding-top:0;padding-bottom:0}.dx-datagrid .dx-row>tr>td{padding:0!important}.dx-datagrid .dx-row>td{padding:1px 5px!important;vertical-align:middle!important;text-align:center!important}.org-title{margin:0;font-size:12px!important;color:var(--primary)}:host ::ng-deep .card .card-body{padding:0 15px}:host ::ng-deep .dx-datagrid .dx-toolbar-after{margin-right:5px;margin-top:5px}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content{padding:5px 6px;border-radius:3px;color:var(--hover-text);background-color:var(--btn)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-export{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-spindown{color:var(--hover-text)}.action-icons .activate,.action-icons .deactivate{font-size:20px;line-height:normal;position:relative;top:5px;border-radius:30px;width:12px;display:inline-flex;align-items:center;justify-content:center;height:12px;font-weight:400}.landing-title{color:var(--header-color);font-weight:700;font-size:var(--font-14);position:absolute;left:15px;z-index:99;top:12px;margin:0}:host ::ng-deep .dx-data-row.isnew td{font-size:15px!important;font-weight:600!important;position:relative}:host ::ng-deep .dx-data-row td.message-new{position:relative;padding-left:20px}:host ::ng-deep .dx-data-row td.new-icon{position:relative}:host ::ng-deep .dx-data-row td.new-icon:before{content:\"\\f111\";font-family:FontAwesome,sans-serif;font-size:16px;color:#c92c1f;position:absolute;top:50%;left:5px;transform:translateY(-50%);line-height:normal}.link-data{color:var(--interactive-color);cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i9.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i10.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "component", type: i11.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "panelWidth", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i12.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "directive", type: i13.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i14.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "component", type: i15.DxDataGridComponent, selector: "dx-data-grid", inputs: ["accessKey", "activeStateEnabled", "allowColumnReordering", "allowColumnResizing", "autoNavigateToFocusedRow", "cacheEnabled", "cellHintEnabled", "columnAutoWidth", "columnChooser", "columnFixing", "columnHidingEnabled", "columnMinWidth", "columnResizingMode", "columns", "columnWidth", "customizeColumns", "dataRowTemplate", "dataSource", "dateSerializationFormat", "disabled", "editing", "elementAttr", "errorRowEnabled", "export", "filterBuilder", "filterBuilderPopup", "filterPanel", "filterRow", "filterSyncEnabled", "filterValue", "focusedColumnIndex", "focusedRowEnabled", "focusedRowIndex", "focusedRowKey", "grouping", "groupPanel", "headerFilter", "height", "highlightChanges", "hint", "hoverStateEnabled", "keyboardNavigation", "keyExpr", "loadPanel", "masterDetail", "noDataText", "pager", "paging", "remoteOperations", "renderAsync", "repaintChangesOnly", "rowAlternationEnabled", "rowDragging", "rowTemplate", "rtlEnabled", "scrolling", "searchPanel", "selectedRowKeys", "selection", "selectionFilter", "showBorders", "showColumnHeaders", "showColumnLines", "showRowLines", "sortByGroupSummaryInfo", "sorting", "stateStoring", "summary", "syncLookupFilterValues", "tabIndex", "toolbar", "twoWayBindingEnabled", "visible", "width", "wordWrapEnabled"], outputs: ["onAdaptiveDetailRowPreparing", "onCellClick", "onCellDblClick", "onCellHoverChanged", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDataErrorOccurred", "onDisposing", "onEditCanceled", "onEditCanceling", "onEditingStart", "onEditorPrepared", "onEditorPreparing", "onExporting", "onFocusedCellChanged", "onFocusedCellChanging", "onFocusedRowChanged", "onFocusedRowChanging", "onInitialized", "onInitNewRow", "onKeyDown", "onOptionChanged", "onRowClick", "onRowCollapsed", "onRowCollapsing", "onRowDblClick", "onRowExpanded", "onRowExpanding", "onRowInserted", "onRowInserting", "onRowPrepared", "onRowRemoved", "onRowRemoving", "onRowUpdated", "onRowUpdating", "onRowValidating", "onSaved", "onSaving", "onSelectionChanged", "onToolbarPreparing", "accessKeyChange", "activeStateEnabledChange", "allowColumnReorderingChange", "allowColumnResizingChange", "autoNavigateToFocusedRowChange", "cacheEnabledChange", "cellHintEnabledChange", "columnAutoWidthChange", "columnChooserChange", "columnFixingChange", "columnHidingEnabledChange", "columnMinWidthChange", "columnResizingModeChange", "columnsChange", "columnWidthChange", "customizeColumnsChange", "dataRowTemplateChange", "dataSourceChange", "dateSerializationFormatChange", "disabledChange", "editingChange", "elementAttrChange", "errorRowEnabledChange", "exportChange", "filterBuilderChange", "filterBuilderPopupChange", "filterPanelChange", "filterRowChange", "filterSyncEnabledChange", "filterValueChange", "focusedColumnIndexChange", "focusedRowEnabledChange", "focusedRowIndexChange", "focusedRowKeyChange", "groupingChange", "groupPanelChange", "headerFilterChange", "heightChange", "highlightChangesChange", "hintChange", "hoverStateEnabledChange", "keyboardNavigationChange", "keyExprChange", "loadPanelChange", "masterDetailChange", "noDataTextChange", "pagerChange", "pagingChange", "remoteOperationsChange", "renderAsyncChange", "repaintChangesOnlyChange", "rowAlternationEnabledChange", "rowDraggingChange", "rowTemplateChange", "rtlEnabledChange", "scrollingChange", "searchPanelChange", "selectedRowKeysChange", "selectionChange", "selectionFilterChange", "showBordersChange", "showColumnHeadersChange", "showColumnLinesChange", "showRowLinesChange", "sortByGroupSummaryInfoChange", "sortingChange", "stateStoringChange", "summaryChange", "syncLookupFilterValuesChange", "tabIndexChange", "toolbarChange", "twoWayBindingEnabledChange", "visibleChange", "widthChange", "wordWrapEnabledChange"] }, { kind: "component", type: i16.DxoColumnChooserComponent, selector: "dxo-column-chooser", inputs: ["allowSearch", "container", "emptyPanelText", "enabled", "height", "mode", "position", "search", "searchTimeout", "selection", "sortOrder", "title", "width"] }, { kind: "component", type: i16.DxoPositionComponent, selector: "dxo-position", inputs: ["at", "boundary", "boundaryOffset", "collision", "my", "of", "offset"] }, { kind: "component", type: i16.DxoSelectionComponent, selector: "dxo-selection", inputs: ["allowSelectAll", "recursive", "selectByClick", "deferred", "mode", "selectAllMode", "showCheckBoxesMode"] }, { kind: "component", type: i16.DxiColumnComponent, selector: "dxi-column", inputs: ["alignment", "allowEditing", "allowExporting", "allowFiltering", "allowFixing", "allowGrouping", "allowHeaderFiltering", "allowHiding", "allowReordering", "allowResizing", "allowSearch", "allowSorting", "autoExpandGroup", "buttons", "calculateCellValue", "calculateDisplayValue", "calculateFilterExpression", "calculateGroupValue", "calculateSortValue", "caption", "cellTemplate", "columns", "cssClass", "customizeText", "dataField", "dataType", "editCellTemplate", "editorOptions", "encodeHtml", "falseText", "filterOperations", "filterType", "filterValue", "filterValues", "fixed", "fixedPosition", "format", "formItem", "groupCellTemplate", "groupIndex", "headerCellTemplate", "headerFilter", "hidingPriority", "isBand", "lookup", "minWidth", "name", "ownerBand", "renderAsync", "selectedFilterOperation", "setCellValue", "showEditorAlways", "showInColumnChooser", "showWhenGrouped", "sortIndex", "sortingMethod", "sortOrder", "trueText", "type", "validationRules", "visible", "visibleIndex", "width"], outputs: ["filterValueChange", "filterValuesChange", "groupIndexChange", "selectedFilterOperationChange", "sortIndexChange", "sortOrderChange", "visibleChange", "visibleIndexChange"] }, { kind: "component", type: i16.DxoHeaderFilterComponent, selector: "dxo-header-filter", inputs: ["allowSearch", "allowSelectAll", "dataSource", "groupInterval", "height", "search", "searchMode", "width", "searchTimeout", "texts", "visible", "showRelevantValues"] }, { kind: "component", type: i16.DxoExportComponent, selector: "dxo-export", inputs: ["backgroundColor", "enabled", "fileName", "formats", "margin", "printingEnabled", "svgToCanvas", "allowExportSelectedData", "texts"] }, { kind: "component", type: i16.DxoFilterBuilderComponent, selector: "dxo-filter-builder", inputs: ["accessKey", "activeStateEnabled", "allowHierarchicalFields", "customOperations", "disabled", "elementAttr", "fields", "filterOperationDescriptions", "focusStateEnabled", "groupOperationDescriptions", "groupOperations", "height", "hint", "hoverStateEnabled", "maxGroupLevel", "onContentReady", "onDisposing", "onEditorPrepared", "onEditorPreparing", "onInitialized", "onOptionChanged", "onValueChanged", "rtlEnabled", "tabIndex", "value", "visible", "width"], outputs: ["valueChange"] }, { kind: "component", type: i16.DxoFilterBuilderPopupComponent, selector: "dxo-filter-builder-popup", inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "copyRootClassesToWrapper", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "elementAttr", "enableBodyScroll", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr"], outputs: ["heightChange", "positionChange", "visibleChange", "widthChange"] }, { kind: "component", type: i16.DxoFilterPanelComponent, selector: "dxo-filter-panel", inputs: ["customizeText", "filterEnabled", "texts", "visible"], outputs: ["filterEnabledChange"] }, { kind: "component", type: i16.DxoFilterRowComponent, selector: "dxo-filter-row", inputs: ["applyFilter", "applyFilterText", "betweenEndText", "betweenStartText", "operationDescriptions", "resetOperationText", "showAllText", "showOperationChooser", "visible"] }, { kind: "component", type: i16.DxoLoadPanelComponent, selector: "dxo-load-panel", inputs: ["enabled", "height", "indicatorSrc", "shading", "shadingColor", "showIndicator", "showPane", "text", "width"] }, { kind: "component", type: i16.DxoPagerComponent, selector: "dxo-pager", inputs: ["allowedPageSizes", "displayMode", "infoText", "label", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"] }, { kind: "component", type: i16.DxoPagingComponent, selector: "dxo-paging", inputs: ["enabled", "pageIndex", "pageSize"], outputs: ["pageIndexChange", "pageSizeChange"] }, { kind: "directive", type: i17.DxTemplateDirective, selector: "[dxTemplate]", inputs: ["dxTemplateOf"] }, { kind: "directive", type: i18.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i18.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i19.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { kind: "directive", type: i20.ShowFieldDirective, selector: "[showField]", inputs: ["showField"] }, { kind: "component", type: i21.AlertComponent, selector: "app-alert" }, { kind: "pipe", type: i22.SafeHtmlPipe, name: "safeHtml" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GridListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-grid-list', providers: [GridListService], template: "<app-alert></app-alert>\r\n<div class=\"row\">\r\n  <div class=\"col-12\">\r\n    <p class=\"org-title\" *ngIf=\"user && user.role && auth.isAdmin() && this.isShow\">Organization Name</p>\r\n    <mat-form-field class=\"w-100\" *ngIf=\"auth.isAdmin() && this.isShow\" appearance=\"outline\">\r\n      <mat-select placeholder=\"Organization\" [(ngModel)]=\"Organization\" (selectionChange)=\"loadGrid($event)\">\r\n        <mat-option value=\"Select-ALL\"> Select-ALL</mat-option>\r\n        <mat-option *ngFor=\"let org of orgList\" value=\"{{ org.id }}\"> {{ org.organizationname }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-lg-12 px-0\">\r\n    <h4 class=\"landing-title\">{{activepagename}}</h4>\r\n    <div class=\"main-card card\">\r\n      <div class=\"card-body\">\r\n        <dx-data-grid\r\n          id=\"gridContainer\"\r\n          [dataSource]=\"customStore\"\r\n          [allowColumnReordering]=\"true\"\r\n          [allowColumnResizing]=\"true\"\r\n          [columnAutoWidth]=\"true\"\r\n          [columnMinWidth]=\"100\"\r\n          [width]=\"'100%'\"\r\n          [columnResizingMode]=\"'widget'\"\r\n          [showBorders]=\"true\"\r\n          [rowAlternationEnabled]=\"true\"\r\n          [showColumnLines]=\"true\"\r\n          [showRowLines]=\"false\"\r\n          [filterValue]=\"filterValue\"\r\n          (onSelectionChanged)=\"onSelectionChanged($event)\"\r\n          (onRowPrepared)=\"onRowPrepared($event)\"\r\n          (onCellPrepared)=\"onCellPrepared($event)\"\r\n          (onExporting)=\"onExporting($event)\"\r\n          [remoteOperations]=\"remoteOperations == false ? remoteOperations : {filtering: true, sorting: true, paging: true}\"\r\n          #dataGrid>\r\n          <dxo-load-panel [enabled]=\"false\"></dxo-load-panel>\r\n          <dxo-export [enabled]=\"true\" [formats]=\"['pdf', 'xlsx']\"></dxo-export>\r\n          <dxo-filter-panel [visible]=\"false\"></dxo-filter-panel>\r\n          <dxo-column-chooser *ngIf=\"updateGrid?.chooser\" [enabled]=\"true\" mode=\"select\">\r\n            <dxo-position my=\"right top\" at=\"right top\" of=\".dx-datagrid-column-chooser-button\">\r\n            </dxo-position>\r\n          </dxo-column-chooser>\r\n          <dxo-paging [pageSize]=\"10\"></dxo-paging>\r\n          <dxo-pager\r\n            [visible]=\"true\"\r\n            [allowedPageSizes]=\"[5, 10, 15, 20]\"\r\n            [displayMode]=\"displayMode\"\r\n            [showPageSizeSelector]=\"true\"\r\n            [showInfo]=\"true\"\r\n            [showNavigationButtons]=\"true\"></dxo-pager>\r\n          <!--end pagination-->\r\n          <dxo-filter-builder [customOperations]=\"customOperations\"> </dxo-filter-builder>\r\n          <dxo-filter-builder-popup [position]=\"popupPosition\"> </dxo-filter-builder-popup>\r\n          <dxo-filter-row [visible]=\"true\"></dxo-filter-row>\r\n          <dxo-header-filter [visible]=\"true\"></dxo-header-filter>\r\n          <dxo-selection mode=\"single\" *ngIf=\"updateGrid?.rowSelection\"></dxo-selection>\r\n          <ng-container *ngFor=\"let column of columns; let i = index\">\r\n            <ng-container *ngIf=\"column.hide !== true\">\r\n              <ng-container *ngIf=\"column.link; else noLink\">\r\n                <dxi-column  [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\"\r\n                  cellTemplate=\"cellTemplate\"></dxi-column>\r\n              </ng-container>\r\n              <ng-template #noLink>\r\n                <ng-container *ngIf=\"column.icon; else noIcon\">\r\n                  <dxi-column   [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\"\r\n                    cellTemplate=\"iconTemplate\"></dxi-column>\r\n                </ng-container>\r\n              </ng-template>\r\n              <ng-template #noIcon>\r\n                <ng-container *ngIf=\"column.dateFormat; else noDate\">\r\n                  <dxi-column *ngIf=\"column.dateFormat === 'date' || column.dateFormat === 'datetime'\"\r\n                    [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\"\r\n                    [dataType]=\"column.dateFormat\" [format]=\"getDateFormat(column.dateFormat)\"  >\r\n                  </dxi-column>\r\n                </ng-container>\r\n              </ng-template>\r\n              <ng-template #noDate>\r\n                <dxi-column   [dataField]=\"column.columnDef\" [caption]=\"column.header\" [allowFiltering]=\"column.filter\">\r\n                </dxi-column>\r\n              </ng-template>\r\n            </ng-container>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"\r\n              updateGrid &&\r\n              (updateGrid?.externalLink ||\r\n                updateGrid?.openPopup ||\r\n                updateGrid?.edit ||\r\n                updateGrid?.delete ||\r\n                updateGrid?.delete ||\r\n                updateGrid?.download ||\r\n                updateGrid?.activatePage ||\r\n                updateGrid?.deactivatePage)\">\r\n            <dxi-column   [width]=\"120\" [allowFiltering]=\"false\" [allowSorting]=\"false\" caption=\"Action\"\r\n              cellTemplate=\"editCellTemplate\"></dxi-column>\r\n            <div class=\"action-icons\" *dxTemplate=\"let d of 'editCellTemplate'\">\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.externalLink\" class=\"no-bg\" matTooltip=\"Open\"\r\n                (click)=\"openLink(d)\">\r\n                <em class=\"fa fa-external-link\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.openPopup\" class=\"no-bg\" matTooltip=\"Open\"\r\n                (click)=\"openPopupLink(d)\">\r\n                <em class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.download\" class=\"no-bg\" matTooltip=\"Download\"\r\n                (click)=\"downloadData(d)\">\r\n                <em class=\"fa fa-download\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.edit && showVersions && !d.data.published\"\r\n                class=\"no-bg mr-2\" matTooltip=\"Edit\" (click)=\"editData(d)\">\r\n                <em class=\"fa fa-pencil\" aria-hidden=\"true\"><span class=\"sr-only\">Edit</span></em>\r\n                <span class=\"sr-only\">View</span>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.editRecord\" class=\"no-bg mr-2\" matTooltip=\"Edit\"\r\n                (click)=\"editData(d)\">\r\n                <em class=\"fa fa-pencil\" aria-hidden=\"true\"><span class=\"sr-only\">Edit</span></em>\r\n                <span class=\"sr-only\">View</span>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.duplicate && !showVersions\" class=\"no-bg mr-2\"\r\n                matTooltip=\"Copy\" (click)=\"duplicateDate(d)\">\r\n                <em class=\"fa fa-copy\" aria-hidden=\"true\" fieldKey=\"PAG_DES_GRID_LIST_COPY\">\r\n                  <span class=\"sr-only\">Copy</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.duplicate && showVersions\" class=\"no-bg mr-2\"\r\n                matTooltip=\"Copy Version\" (click)=\"duplicateVersion(d)\">\r\n                <em class=\"fa fa-copy\" *showField=\"'PAG_DES_GRID_LIST_VERSION'\" aria-hidden=\"true\"><span\r\n                    class=\"sr-only\">Copy Version</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"!d.data.ribbonconfig && updateGrid?.view && showVersions\" class=\"no-bg mr-2\" matTooltip=\"View\"\r\n                fieldKey=\"PAG_DES_GRID_LIST_VERSION\" (click)=\"viewData(d)\">\r\n                <em class=\"fa fa-eye\" aria-hidden=\"true\"><span class=\"sr-only\">View</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.viewRecord\" class=\"no-bg mr-2\" matTooltip=\"View\"\r\n                (click)=\"viewData(d)\">\r\n                <em class=\"fa fa-eye\" aria-hidden=\"true\"><span class=\"sr-only\">View</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.emailview && showVersions\" class=\"no-bg mr-2\"\r\n                matTooltip=\"Preview\" (click)=\"viewData(d)\">\r\n                <em class=\"fa fa-eye\" aria-hidden=\"true\"><span class=\"sr-only\">View</span></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" title=\"view\"\r\n                *ngIf=\"updateGrid?.version && !showVersions && islocked(updateGrid, d.data) && isEnable(updateGrid, d.data)\" class=\"no-bg\"\r\n                matTooltip=\"Versions\" (click)=\"viewVersion(d)\">\r\n                <em class=\"fa fa-code-fork\" title=\"View\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"!d.data.isEnable && updateGrid?.activatePage\" class=\"no-bg ml-2\"\r\n                matTooltip=\"Activate\" (click)=\"activatePages(d)\">\r\n                <span class=\"material-symbols-outlined activate\">check</span>\r\n              </a>\r\n\r\n              <a href=\"javascript:void(0)\" *ngIf=\"d.data.isEnable && updateGrid?.deactivatePage\" class=\"no-bg ml-2\"\r\n                matTooltip=\"Deactivate\" (click)=\"deactivatePages(d)\">\r\n                <span class=\"material-symbols-outlined deactivate\">close</span>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"showVersions && !d.data.isactive && d.data.published\"\r\n                class=\"no-bg mr-2\" matTooltip=\"Activate\" (click)=\"activatePageVersion(d)\">\r\n                <em class=\"fa fa-check-circle-o\" *showField=\"'PAG_DES_GRID_LIST_ACTIVATE'\" aria-hidden=\"true\"><span\r\n                    class=\"sr-only\">Activate</span></em>\r\n                <span class=\"sr-only\">View</span>\r\n              </a>\r\n              <span *ngIf=\"showVersions && !d.data.isactive && !d.data.published\" class=\"no-bg mr-2\"\r\n                matTooltip=\"This version is not published\">\r\n                <em class=\"fa fa-exclamation-triangle text-warning\" aria-hidden=\"true\">\r\n                  <span class=\"sr-only\">This version is not published</span>\r\n                </em>\r\n                <span class=\"sr-only\">View</span>\r\n              </span>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.lock && d.data.locked\" (click)=\"check(updateGrid, d)\"\r\n                class=\"no-bg ml-2\" matTooltip=\"Locked By - {{ d?.data?.lockedbyUser?.firstname }}\">\r\n                <em *ngIf=\"updateGrid?.lock && d.data.locked\" class=\"fa fa-lock\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.delete\" class=\"no-bg\" matTooltip=\"Delete\"\r\n                (click)=\"deleteData(d)\">\r\n                <em class=\"fa fa-trash\" aria-hidden=\"true\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.toggle\" class=\"no-bg\"\r\n                [matTooltip]=\"d.data.isactive === true ? 'Deactivate' : 'Activate'\" (click)=\"activeUser(d)\">\r\n                <em *ngIf=\"updateGrid?.toggle && d.data.isactive === true\" class=\"fa fa-toggle-on\"></em>\r\n                <em *ngIf=\"updateGrid?.toggle && d.data.isactive === false\" class=\"fa fa-toggle-off\"></em>\r\n              </a>\r\n              <a href=\"javascript:void(0)\" *ngIf=\"updateGrid?.activeordeactive\" class=\"no-bg\" (click)=\"deleteData(d)\">\r\n                <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 1\" class=\"fa fa-toggle-on\"></em>\r\n                <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 0\" class=\"fa fa-toggle-off\"></em>\r\n              </a>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <div *dxTemplate=\"let d of 'cellTemplate'\">\r\n            <span href=\"javascript:void(0)\" *ngIf=\"d.value && d.value !== 'null'\" class=\"link-data\" (click)=\"getRouter(d)\">{{\r\n              d.value !== 'null' ? d.value : ''\r\n              }}</span>\r\n          </div>\r\n          <ng-container *ngIf=\"updateGrid.linkVisible\">\r\n            <div *dxTemplate=\"let d of 'cellTemplate'\"(click)=\"navigateLink($event, d)\">\r\n              <span *ngIf=\"d.value && d.value !== 'null'\" #contentWrapper [innerHTML]=\"d.value | safeHtml\">{{\r\n                d.value !== 'null' ? d.value : ''\r\n              }}</span>\r\n            </div>\r\n          </ng-container>\r\n          <div *dxTemplate=\"let d of 'iconTemplate'\">\r\n            <em class=\"fa fa-book\" (click)=\"popup(d.value)\"></em>\r\n          </div>\r\n        </dx-data-grid>\r\n\r\n        <ng-template #callNarrativePopup>\r\n          <h2 matDialogTitle>Narrative</h2>\r\n          <div [innerHTML]=\"narrativeData\"></div>\r\n          <div class=\"text-right\">\r\n            <button mat-button (click)=\"closeNarrativePopup()\" role=\"button\" class=\"btn btn-cancel mr-2\">Close</button>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".split-page{outline:3px;margin:5px}.searchlist{min-width:620px!important;height:280px!important}.searchlist table,.searchlist table tr th,.searchlist table tr td{padding:0}.dx-datagrid .dx-data-row>td.bullet{padding-top:0;padding-bottom:0}.dx-datagrid .dx-row>tr>td{padding:0!important}.dx-datagrid .dx-row>td{padding:1px 5px!important;vertical-align:middle!important;text-align:center!important}.org-title{margin:0;font-size:12px!important;color:var(--primary)}:host ::ng-deep .card .card-body{padding:0 15px}:host ::ng-deep .dx-datagrid .dx-toolbar-after{margin-right:5px;margin-top:5px}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content{padding:5px 6px;border-radius:3px;color:var(--hover-text);background-color:var(--btn)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-export{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-spindown{color:var(--hover-text)}.action-icons .activate,.action-icons .deactivate{font-size:20px;line-height:normal;position:relative;top:5px;border-radius:30px;width:12px;display:inline-flex;align-items:center;justify-content:center;height:12px;font-weight:400}.landing-title{color:var(--header-color);font-weight:700;font-size:var(--font-14);position:absolute;left:15px;z-index:99;top:12px;margin:0}:host ::ng-deep .dx-data-row.isnew td{font-size:15px!important;font-weight:600!important;position:relative}:host ::ng-deep .dx-data-row td.message-new{position:relative;padding-left:20px}:host ::ng-deep .dx-data-row td.new-icon{position:relative}:host ::ng-deep .dx-data-row td.new-icon:before{content:\"\\f111\";font-family:FontAwesome,sans-serif;font-size:16px;color:#c92c1f;position:absolute;top:50%;left:5px;transform:translateY(-50%);line-height:normal}.link-data{color:var(--interactive-color);cursor:pointer}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.AuthService }, { type: i3.LocalService }, { type: i4.LocalStorageService }, { type: i5.AppService }, { type: i6.DataStoreService }, { type: i0.Renderer2 }, { type: i7.AlertService }]; }, propDecorators: { dataGrid: [{
                type: ViewChild,
                args: [DxDataGridComponent, { static: false }]
            }], contentWrappers: [{
                type: ViewChildren,
                args: ['contentWrapper']
            }], dataList: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], columns: [{
                type: Input
            }], updateGrid: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], page: [{
                type: Input
            }], isShow: [{
                type: Input
            }], exportPageName: [{
                type: Input
            }], remoteOperations: [{
                type: Input
            }], currentPage: [{
                type: Output
            }], editTableRow: [{
                type: Output
            }], viewTableRow: [{
                type: Output
            }], deleteTableRow: [{
                type: Output
            }], openExternalLink: [{
                type: Output
            }], openpopupLink: [{
                type: Output
            }], routeTo: [{
                type: Output
            }], openPopup: [{
                type: Output
            }], sortOrder: [{
                type: Output
            }], filterSearchValue: [{
                type: Output
            }], filterBuilderPopup: [{
                type: Output
            }], filterPanel: [{
                type: Output
            }], multipleFilterValues: [{
                type: Output
            }], downloadTableRow: [{
                type: Output
            }], rowSelection: [{
                type: Output
            }], toggleRow: [{
                type: Output
            }], duplicateRow: [{
                type: Output
            }], viewVersions: [{
                type: Output
            }], activateVersion: [{
                type: Output
            }], activatePage: [{
                type: Output
            }], deactivatePage: [{
                type: Output
            }], duplicatePageVersion: [{
                type: Output
            }], selectedRowsData: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,