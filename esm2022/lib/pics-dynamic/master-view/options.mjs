import { CompactType, DisplayGrid, GridType } from "angular-gridster2";
export const options = {
    gridType: GridType.VerticalFixed,
    compactType: CompactType.CompactUpAndLeft,
    margin: 10,
    outerMargin: true,
    outerMarginTop: null,
    outerMarginRight: null,
    outerMarginBottom: null,
    outerMarginLeft: null,
    mobileBreakpoint: 640,
    minCols: 1,
    maxCols: 2,
    minRows: 1,
    maxRows: 100,
    maxItemCols: 100,
    minItemCols: 1,
    maxItemRows: 100,
    minItemRows: 1,
    maxItemArea: 1000,
    minItemArea: 1,
    defaultItemCols: 1,
    defaultItemRows: 1,
    fixedColWidth: 400,
    fixedRowHeight: 480,
    keepFixedHeightInMobile: false,
    keepFixedWidthInMobile: false,
    scrollSensitivity: 10,
    scrollSpeed: 20,
    enableEmptyCellClick: false,
    enableEmptyCellContextMenu: false,
    enableEmptyCellDrop: false,
    enableEmptyCellDrag: false,
    emptyCellDragMaxCols: 50,
    emptyCellDragMaxRows: 50,
    ignoreMarginInRow: false,
    draggable: {
        delayStart: 0,
        enabled: false,
        ignoreContentClass: 'gridster-item-content',
        ignoreContent: false,
        dragHandleClass: 'drag-handler'
    },
    resizable: {
        delayStart: 0,
        enabled: false,
        handles: {
            s: false,
            e: false,
            n: false,
            w: false,
            se: false,
            ne: false,
            sw: false,
            nw: false
        }
    },
    swap: false,
    pushItems: false,
    disablePushOnDrag: false,
    disablePushOnResize: false,
    pushDirections: {
        north: false,
        east: false,
        south: false,
        west: false
    },
    pushResizeItems: false,
    displayGrid: DisplayGrid.None,
    disableWindowResize: false,
    disableWarnings: false,
    scrollToNewItems: false
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BpY3MtY29yZS9keW5hbWljL3NyYy9saWIvcGljcy1keW5hbWljL21hc3Rlci12aWV3L29wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFdkUsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ25CLFFBQVEsRUFBRSxRQUFRLENBQUMsYUFBYTtJQUNoQyxXQUFXLEVBQUUsV0FBVyxDQUFDLGdCQUFnQjtJQUN6QyxNQUFNLEVBQUUsRUFBRTtJQUNWLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsaUJBQWlCLEVBQUUsSUFBSTtJQUN2QixlQUFlLEVBQUUsSUFBSTtJQUNyQixnQkFBZ0IsRUFBRSxHQUFHO0lBQ3JCLE9BQU8sRUFBRSxDQUFDO0lBQ1YsT0FBTyxFQUFFLENBQUM7SUFDVixPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxHQUFHO0lBQ1osV0FBVyxFQUFFLEdBQUc7SUFDaEIsV0FBVyxFQUFFLENBQUM7SUFDZCxXQUFXLEVBQUUsR0FBRztJQUNoQixXQUFXLEVBQUUsQ0FBQztJQUNkLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFdBQVcsRUFBRSxDQUFDO0lBQ2QsZUFBZSxFQUFFLENBQUM7SUFDbEIsZUFBZSxFQUFFLENBQUM7SUFDbEIsYUFBYSxFQUFFLEdBQUc7SUFDbEIsY0FBYyxFQUFFLEdBQUc7SUFDbkIsdUJBQXVCLEVBQUUsS0FBSztJQUM5QixzQkFBc0IsRUFBRSxLQUFLO0lBQzdCLGlCQUFpQixFQUFFLEVBQUU7SUFDckIsV0FBVyxFQUFFLEVBQUU7SUFDZixvQkFBb0IsRUFBRSxLQUFLO0lBQzNCLDBCQUEwQixFQUFFLEtBQUs7SUFDakMsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixtQkFBbUIsRUFBRSxLQUFLO0lBQzFCLG9CQUFvQixFQUFFLEVBQUU7SUFDeEIsb0JBQW9CLEVBQUUsRUFBRTtJQUN4QixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCLFNBQVMsRUFBRTtRQUNULFVBQVUsRUFBRSxDQUFDO1FBQ2IsT0FBTyxFQUFFLEtBQUs7UUFDZCxrQkFBa0IsRUFBRSx1QkFBdUI7UUFDM0MsYUFBYSxFQUFFLEtBQUs7UUFDcEIsZUFBZSxFQUFFLGNBQWM7S0FDaEM7SUFDRCxTQUFTLEVBQUU7UUFDVCxVQUFVLEVBQUUsQ0FBQztRQUNiLE9BQU8sRUFBRSxLQUFLO1FBQ2QsT0FBTyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLEtBQUs7WUFDUixDQUFDLEVBQUUsS0FBSztZQUNSLENBQUMsRUFBRSxLQUFLO1lBQ1IsQ0FBQyxFQUFFLEtBQUs7WUFDUixFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztTQUNWO0tBQ0Y7SUFDRCxJQUFJLEVBQUUsS0FBSztJQUNYLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixjQUFjLEVBQUU7UUFDZCxLQUFLLEVBQUUsS0FBSztRQUNaLElBQUksRUFBRSxLQUFLO1FBQ1gsS0FBSyxFQUFFLEtBQUs7UUFDWixJQUFJLEVBQUUsS0FBSztLQUNaO0lBQ0QsZUFBZSxFQUFFLEtBQUs7SUFDdEIsV0FBVyxFQUFFLFdBQVcsQ0FBQyxJQUFJO0lBQzdCLG1CQUFtQixFQUFFLEtBQUs7SUFDMUIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsZ0JBQWdCLEVBQUUsS0FBSztDQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcGFjdFR5cGUsIERpc3BsYXlHcmlkLCBHcmlkVHlwZSB9IGZyb20gXCJhbmd1bGFyLWdyaWRzdGVyMlwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICBncmlkVHlwZTogR3JpZFR5cGUuVmVydGljYWxGaXhlZCxcclxuICAgIGNvbXBhY3RUeXBlOiBDb21wYWN0VHlwZS5Db21wYWN0VXBBbmRMZWZ0LFxyXG4gICAgbWFyZ2luOiAxMCxcclxuICAgIG91dGVyTWFyZ2luOiB0cnVlLFxyXG4gICAgb3V0ZXJNYXJnaW5Ub3A6IG51bGwsXHJcbiAgICBvdXRlck1hcmdpblJpZ2h0OiBudWxsLFxyXG4gICAgb3V0ZXJNYXJnaW5Cb3R0b206IG51bGwsXHJcbiAgICBvdXRlck1hcmdpbkxlZnQ6IG51bGwsXHJcbiAgICBtb2JpbGVCcmVha3BvaW50OiA2NDAsXHJcbiAgICBtaW5Db2xzOiAxLFxyXG4gICAgbWF4Q29sczogMixcclxuICAgIG1pblJvd3M6IDEsXHJcbiAgICBtYXhSb3dzOiAxMDAsXHJcbiAgICBtYXhJdGVtQ29sczogMTAwLFxyXG4gICAgbWluSXRlbUNvbHM6IDEsXHJcbiAgICBtYXhJdGVtUm93czogMTAwLFxyXG4gICAgbWluSXRlbVJvd3M6IDEsXHJcbiAgICBtYXhJdGVtQXJlYTogMTAwMCxcclxuICAgIG1pbkl0ZW1BcmVhOiAxLFxyXG4gICAgZGVmYXVsdEl0ZW1Db2xzOiAxLFxyXG4gICAgZGVmYXVsdEl0ZW1Sb3dzOiAxLFxyXG4gICAgZml4ZWRDb2xXaWR0aDogNDAwLFxyXG4gICAgZml4ZWRSb3dIZWlnaHQ6IDQ4MCxcclxuICAgIGtlZXBGaXhlZEhlaWdodEluTW9iaWxlOiBmYWxzZSxcclxuICAgIGtlZXBGaXhlZFdpZHRoSW5Nb2JpbGU6IGZhbHNlLFxyXG4gICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDEwLFxyXG4gICAgc2Nyb2xsU3BlZWQ6IDIwLFxyXG4gICAgZW5hYmxlRW1wdHlDZWxsQ2xpY2s6IGZhbHNlLFxyXG4gICAgZW5hYmxlRW1wdHlDZWxsQ29udGV4dE1lbnU6IGZhbHNlLFxyXG4gICAgZW5hYmxlRW1wdHlDZWxsRHJvcDogZmFsc2UsXHJcbiAgICBlbmFibGVFbXB0eUNlbGxEcmFnOiBmYWxzZSxcclxuICAgIGVtcHR5Q2VsbERyYWdNYXhDb2xzOiA1MCxcclxuICAgIGVtcHR5Q2VsbERyYWdNYXhSb3dzOiA1MCxcclxuICAgIGlnbm9yZU1hcmdpbkluUm93OiBmYWxzZSxcclxuICAgIGRyYWdnYWJsZToge1xyXG4gICAgICBkZWxheVN0YXJ0OiAwLFxyXG4gICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgaWdub3JlQ29udGVudENsYXNzOiAnZ3JpZHN0ZXItaXRlbS1jb250ZW50JyxcclxuICAgICAgaWdub3JlQ29udGVudDogZmFsc2UsXHJcbiAgICAgIGRyYWdIYW5kbGVDbGFzczogJ2RyYWctaGFuZGxlcidcclxuICAgIH0sXHJcbiAgICByZXNpemFibGU6IHtcclxuICAgICAgZGVsYXlTdGFydDogMCxcclxuICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgIGhhbmRsZXM6IHtcclxuICAgICAgICBzOiBmYWxzZSxcclxuICAgICAgICBlOiBmYWxzZSxcclxuICAgICAgICBuOiBmYWxzZSxcclxuICAgICAgICB3OiBmYWxzZSxcclxuICAgICAgICBzZTogZmFsc2UsXHJcbiAgICAgICAgbmU6IGZhbHNlLFxyXG4gICAgICAgIHN3OiBmYWxzZSxcclxuICAgICAgICBudzogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHN3YXA6IGZhbHNlLFxyXG4gICAgcHVzaEl0ZW1zOiBmYWxzZSxcclxuICAgIGRpc2FibGVQdXNoT25EcmFnOiBmYWxzZSxcclxuICAgIGRpc2FibGVQdXNoT25SZXNpemU6IGZhbHNlLFxyXG4gICAgcHVzaERpcmVjdGlvbnM6IHtcclxuICAgICAgbm9ydGg6IGZhbHNlLFxyXG4gICAgICBlYXN0OiBmYWxzZSxcclxuICAgICAgc291dGg6IGZhbHNlLFxyXG4gICAgICB3ZXN0OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHB1c2hSZXNpemVJdGVtczogZmFsc2UsXHJcbiAgICBkaXNwbGF5R3JpZDogRGlzcGxheUdyaWQuTm9uZSxcclxuICAgIGRpc2FibGVXaW5kb3dSZXNpemU6IGZhbHNlLFxyXG4gICAgZGlzYWJsZVdhcm5pbmdzOiBmYWxzZSxcclxuICAgIHNjcm9sbFRvTmV3SXRlbXM6IGZhbHNlXHJcbiAgfTsiXX0=