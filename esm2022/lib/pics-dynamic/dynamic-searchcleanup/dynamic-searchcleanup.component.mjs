import { Location } from '@angular/common';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Component, EventEmitter, HostListener, Inject, Input, Optional, Output, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { select } from '@ngrx/store';
import { DxDataGridComponent } from 'devextreme-angular';
import CustomStore from 'devextreme/data/custom_store';
import { exportDataGrid as exportDataGridToPdf } from 'devextreme/pdf_exporter';
import * as jsPDF from 'jspdf';
import moment from 'moment/moment';
import { MultiSelect } from 'primeng/multiselect';
import es6printJS from 'print-js';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { AppConstants } from '../@core/constants/app-constants';
import { AlertService } from '../@core/service/alert.service';
import { AttachmentsService } from '../@core/service/attachments.service';
import { AuthService } from '../@core/service/auth.service';
import { DataStoreService } from '../@core/service/data-store.service';
import { DynamicTabPageService } from '../@core/service/dynamic-tab-page-service';
import { DynamicsearchService } from '../@core/service/dynamicsearch.service';
import { LocalService } from '../@core/service/local.service';
import { PageBuilderService } from '../@core/service/page-builder.service';
import { DynamicSearchURL } from '../@core/urls/dynamic-search-url.config';
import { DeleteComponent } from '../@shared/delete/delete.component';
import { publishEvent } from '../@shared/master-view-state/master-view.actions';
import { selectComponentConfigById, selectEvent } from '../@shared/master-view-state/master-view.selectors';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/forms";
import * as i3 from "../@core/service/formio.service";
import * as i4 from "../@core/local-storage/local-storage.service";
import * as i5 from "@ngrx/store";
import * as i6 from "../@core/service/platform-data-store.service";
import * as i7 from "../@core/service/shared.service";
import * as i8 from "../@core/service/ConfigService";
import * as i9 from "@angular/common";
import * as i10 from "@formio/angular";
import * as i11 from "../@shared/alert/alert.component";
import * as i12 from "@angular/material/button";
import * as i13 from "@angular/material/icon";
import * as i14 from "@angular/material/input";
import * as i15 from "@angular/material/form-field";
import * as i16 from "@angular/material/menu";
import * as i17 from "@angular/material/tooltip";
import * as i18 from "@angular/material/dialog";
import * as i19 from "devextreme-angular";
import * as i20 from "devextreme-angular/ui/nested";
import * as i21 from "devextreme-angular/core";
import * as i22 from "ng-dynamic-component";
import * as i23 from "primeng/accordion";
import * as i24 from "primeng/api";
import * as i25 from "primeng/dropdown";
import * as i26 from "primeng/inputtextarea";
const LOCAL_STORAGE_KEY = 'target-tab-filter';
const PAGE_MODIFY_ROUTE = '/pages/dynamicpage/page/modify/';
const FILE_EXPORT_NAME_KEY = 'FILE EXPORT NAME';
const GRID_URL = '/solution/dynamicsearch/searchinput/';
const ROLE_CP_PUBLIC = 'role=CP_PUBLIC';
const STORAGE_KEY_DYNAMIC_TAB_PAGES = 'dynamic-tab-pages';
const POPUP_TYPE_OPEN = 'Open PopUp';
const FILTER_ID_KEY = 'horizantal-tab-filter';
export class DynamicSearchCleanupComponent {
    router;
    route;
    cdref;
    fb;
    _formIO;
    storageService;
    formBuilder;
    store;
    _PlatformStoreservice;
    sharedService;
    configService;
    searchcriteriamenutrigger;
    dataGrid;
    editPopUpDialogRef;
    formId;
    jsonForm;
    sourceid;
    fromTitle;
    submittedData;
    tableColumns;
    totalcount;
    pageId;
    inputFieldId;
    inputId;
    url;
    dataSource;
    popupPosition;
    pageType;
    searchCriteria;
    searchCriteriaArr;
    layouttype = 'vertical';
    id;
    searchparams;
    targetId;
    columns;
    updateGrid;
    totalCount;
    dublicateGridConfig;
    columnHeader;
    spliterSize = 0;
    gridspliterSize = 100;
    isOpen = true;
    icon = '';
    openclose = '';
    user;
    isAddButton = false;
    pageSaveID = '';
    showFilterRowPanel;
    popupData;
    callDialogPopup;
    popupDialogRef;
    showActionColumn;
    editId;
    isDialogPopup;
    item;
    showGridPage = true;
    manualPostApiUrl;
    // #check moduleid
    moduleid;
    purpose;
    isShowFormPage = false;
    outerRouting = new EventEmitter();
    userAction;
    rowData;
    checkBoxesMode;
    gridType;
    showExport = false;
    dropdownValues;
    gridOptions;
    filterOptions;
    selectedFilter;
    filterForm;
    gridConfig;
    tempaConfig;
    reorderColumns;
    storage;
    dataStoreService;
    alertService;
    dialog;
    http;
    screenWidth;
    currentPageId;
    displayMode;
    isResize;
    isUserPreferenceChange;
    formIO;
    dynamicSearchService;
    dynamicTabPageService;
    sequenceId;
    columnWidth;
    uploadedFile;
    imageData;
    attachmentService;
    paramvalue;
    paramfield;
    tablefield;
    toTabId;
    uniquedata;
    pageList;
    isViewEnable;
    iconClass;
    titletab;
    header;
    openTab = false;
    selectedRowIndex;
    selectedColumnIndex;
    selectedCaption;
    selectedRowData;
    httpService;
    authService;
    localstore;
    pageBuilderService;
    location;
    filterOptionsDropdown;
    registrationInfo;
    checkGridConfig;
    gridDynamicSearchForm;
    dynamicSearchArray;
    dynamicSearch;
    tableDropDown;
    columnDropDown;
    dynamicSearchResult;
    criteriaId = 0;
    saveButtonDisable = true;
    associatedId;
    isBGP;
    youthSearchJson;
    youthSearchBoolean = false;
    isInitialLoad = true;
    isDeleteRequire = false;
    isDeleteTime = 15;
    enteredReason = '';
    isDisabled = true;
    DeleteConfigURL;
    updateByIdAndPageIdWithReasonURL;
    deleteConfigData;
    DeleteRevertConfigURL;
    deletedReason = '';
    primary_column = '';
    adminAccessForDelete;
    isConditionalEditDelete;
    pagename;
    sourceKey;
    sourceValue;
    sourceType;
    currentPageSize = 5;
    componentId;
    selectedComponent;
    componentConfig$;
    eventSubscription;
    deletePopupText = '';
    isEditThresholdRequire = false;
    DeleteGridList;
    DeleteGridListWithoutReason;
    ApproveDeleteGridList;
    DefaultDeletePopupTextAftThresholdTime = `You are requesting to remove a Youth's physical description. A notification will be sent to your Security Coordinator to review this request and remove the description if appropriate.
  Enter the reason for the removal request. The reason cannot contain more than 4000 characters.`;
    environment;
    businessRuleMessage;
    gridActionParams;
    allUrlParams;
    showMoreText = {};
    truncateTextValue;
    constructor(injector, router, route, cdref, fb, _formIO, storageService, formBuilder, store, _PlatformStoreservice, sharedService, configService, data) {
        this.router = router;
        this.route = route;
        this.cdref = cdref;
        this.fb = fb;
        this._formIO = _formIO;
        this.storageService = storageService;
        this.formBuilder = formBuilder;
        this.store = store;
        this._PlatformStoreservice = _PlatformStoreservice;
        this.sharedService = sharedService;
        this.configService = configService;
        this._PlatformStoreservice.currentStore.subscribe((res) => {
            if (res) {
                this.environment = res['RBACORG'];
                this.httpService = res['HTTPSERVICE'];
            }
        });
        this.pageBuilderService = injector.get(PageBuilderService);
        this.location = injector.get(Location);
        this.localstore = injector.get(LocalService);
        this.storage = injector.get(LocalService);
        this.dataStoreService = injector.get(DataStoreService);
        this.attachmentService = injector.get(AttachmentsService);
        this.alertService = injector.get(AlertService);
        this.dialog = injector.get(MatDialog);
        this.http = injector.get(HttpClient);
        this.dynamicSearchService = injector.get(DynamicsearchService);
        this.authService = injector.get(AuthService);
        this.user = this.storage.getObj('user');
        this.userAction = this.dataStoreService.getData('userAction');
        this.manualPostApiUrl = '';
        this.dynamicTabPageService = injector.get(DynamicTabPageService);
        this.isViewEnable = this.localstore.getObj('isViewEnable');
        if (data) {
            this.pageId = data.pageId ? data.pageId : this.pageId;
            this.inputFieldId = data.inputFieldId ? data.inputFieldId : this.inputFieldId;
            this.inputId = data.inputId ? data.inputId : this.inputId;
        }
        this.checkBoxesMode = 'always';
        this.gridOptions = [
            { label: 'Sorting', value: 'sort', code: '' },
            { label: 'Filtering', value: 'filter', code: '' },
            { label: 'Hide', value: 'hide', code: '' },
            { label: 'Fixed', value: 'fixed', code: '' },
            // { label: 'Default Columns', value: 'Choosable', code: '' },
            // { label: 'Visible', value: 'visible', code: '' },
            { label: 'Date', value: 'dateFormat', code: '' },
            { label: 'Mobile', value: 'mobileView', code: '' },
            { label: 'Tablet', value: 'tabView', code: '' }
        ];
        this.displayMode = 'compact';
        this.dataStoreService.setData('uploadFromGrid', false);
        this.titletab = JSON.parse(this.localstore.getItem('titletab'));
        this.header = JSON.parse(this.localstore.getItem(LOCAL_STORAGE_KEY));
        this.gridDynamicSearchForm = this.formBuilder.group({
            dynamicSearchArray: this.formBuilder.array([])
        });
    }
    ngAfterViewInit() {
        const observerConfig = { attributes: false, childList: true, subtree: true };
        function processNode(node, className, callback) {
            const elements = node.querySelectorAll(className);
            if (elements.length > 0) {
                elements.forEach(callback);
                return true;
            }
            return false;
        }
        const callback = (mutationsList, observer) => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'childList' && mutation.addedNodes.length) {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1 && processNode(node, '.dx-checkbox-container', checkbox => {
                            checkbox.setAttribute('tabindex', '0');
                        })) {
                            observer.disconnect();
                        }
                    });
                }
            }
        };
        const observer = new MutationObserver(callback);
        observer.observe(document.body, observerConfig);
        const callback2 = (mutationsList, observer) => {
            mutationsList.forEach(mutation => {
                if (mutation.type === 'childList' && mutation.addedNodes.length) {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1) {
                            processNode(node, '.dx-checkbox-container', checkbox => {
                                checkbox.setAttribute('tabindex', '0');
                            });
                        }
                    });
                }
            });
        };
        const observer2 = new MutationObserver(callback2);
        observer2.observe(document.body, observerConfig);
        combineLatest([this.route.queryParams]).subscribe(([queryParams]) => {
            const responseId = queryParams['responseId'];
            if (this.route.snapshot.routeConfig.path.indexOf('view') > -1 && (this.route.snapshot.routeConfig.path.indexOf('master-view') === -1 || this.route.snapshot.routeConfig.path.indexOf('composite-page') === -1)) {
                this.gridType = 'view';
            }
            else {
                this.gridType = 'search';
            }
            this.tableColumns =
                this.tableColumns && typeof this.tableColumns === 'string' ? JSON.parse(this.tableColumns) : '';
            this.updateGrid = this.updateGrid && typeof this.updateGrid === 'string' ? JSON.parse(this.updateGrid) : '';
            this.formId = this.route.snapshot.paramMap.get('pageId')
                ? this.route.snapshot.paramMap.get('pageId')
                : this.pageId;
            this.inputFieldId = this.inputFieldId ? this.inputFieldId : null;
            this.dynamicSearchService.clickableData = this.inputFieldId;
            this.rowData = this.dynamicSearchService.rowData;
            if (this.route.snapshot.paramMap.get('pageSaveID')) {
                this.isAddButton = true;
            }
            else {
                this.isAddButton = false;
            }
            this.pageSaveID = this.route.pathFromRoot?.find(x => x.snapshot.paramMap.has('pageSaveID'))?.snapshot.paramMap.get('pageSaveID');
            this.sourceKey = this.route.pathFromRoot?.find(x => x.snapshot.paramMap.has('sourceKey'))?.snapshot.paramMap.get('sourceKey');
            this.sourceValue = this.route.pathFromRoot?.find(x => x.snapshot.paramMap.has('sourceValue'))?.snapshot.paramMap.get('sourceValue');
            this.sourceType = this.route.pathFromRoot?.find(x => x.snapshot.paramMap.has('sourceType'))?.snapshot.paramMap.get('sourceType');
            this.moduleid = this.route.parent.parent.snapshot.paramMap.get('module');
            this.purpose = this.route.parent.parent.snapshot.paramMap.get('purpose');
            this.getTemplate(responseId);
            this.componentConfig$ = this.store.pipe(select(selectComponentConfigById(this.componentId)));
            this.componentConfig$.subscribe(data => this.selectedComponent = data);
            this.eventSubscription = this.store.pipe(select(selectEvent)).subscribe(event => {
                if (event && event.eventName === 'submit' && event.payload.settings.onSubmitRefresh
                    && event.payload.settings.onSubmitRefreshWidgets) {
                    event.payload.settings.onSubmitRefreshWidgets.forEach(x => {
                        if (x.pageType == 'BGP')
                            this.pageId = x.id;
                        this.getGrid();
                    });
                }
            });
        });
        /* Clear data while page navigation */
        this.dynamicSearchService.clickedRowData = null;
        this.screenWidth = window.innerWidth;
        const REGISTRATION = this.storageService.getItem('REGISTRATION');
        if (REGISTRATION) {
            this.registrationInfo = JSON.parse(REGISTRATION);
        }
        if (!Object.keys(this.allUrlParams)?.length) {
            this.route.pathFromRoot?.forEach(x => {
                x.params.subscribe(y => y && Object.keys(y).length ? Object.assign(this.allUrlParams, y) : null);
            });
        }
    }
    ngOnInit() {
        this.gridConfig = '';
        this.localstore.setItem('EditGridPageID', '');
        this.popupPosition = { of: window, at: 'top', my: 'top', offset: { y: 10 } };
        this.columns?.forEach(column => {
            if (column.visible === undefined || column.visible === "") {
                column.visible = true;
            }
        });
        if (this.dynamicSearchService?.clickedIdData === true) {
            this.dynamicSearchService.clickedIdData = false;
        }
        this.loadFilterForm();
        this.removeAllDynamicSearchCondtion();
        // this.localstore.removeItem(LOCAL_STORAGE_KEY)
        this.localstore.setItem('gridAction', '');
        this.truncateTextValue = this.configService.getValue(); // Get the value
    }
    loadFilterForm() {
        this.filterForm = this.fb.group({
            selectedFilter: ['']
        });
    }
    ngAfterContentChecked() {
        this.cdref.detectChanges();
    }
    redirect() {
        this.router.navigate([PAGE_MODIFY_ROUTE + this.pageSaveID]);
    }
    getTemplate(responseId) {
        this.removeAllDynamicSearchCondtion();
        this.dynamicSearchService.getTemplate(this.formId).subscribe(result => {
            if (result) {
                const gridPageInfo = {
                    id: this.formId,
                    name: result['data']['pagename']
                };
                this.isBGP = result['data']?.pageDetails?.pagetype;
                if (this.isBGP && this.isBGP == 'BGP') {
                    this.associatedId = result['data']?.pageid;
                }
                this.setTemplate(result['data']);
                this.isConditionalEditDelete = result['data']['isConditionalEditDelete'];
                this.currentPageId = result['data']['pageid'];
                this.sequenceId = result['data']['id'];
                this.storage.setItem('parentGridPage', JSON.stringify(gridPageInfo));
                this.getUserGridConfig();
                this.getGrid(responseId);
            }
        });
    }
    getPageTabs(_pageId, sourceType, sourceKey, sourceValue, _youthId, navigationState) {
        this.dynamicSearchService.getPageTabs(_pageId).subscribe((result) => {
            if (result) {
                const tabId = result.data[0].activeVersion.id;
                if (result.data[0].activeVersion.tabconfig) {
                    const parentGridPage = {
                        id: this.formId,
                        name: this.fromTitle
                    };
                    this.storage.setItem('backToGridPage', JSON.stringify(parentGridPage));
                    navigationState.isHideBack = true;
                    let url = '';
                    if (result.data[0].pagetype === 'RBTP') {
                        url = '/pages/dynamic-routing/tab/';
                    }
                    else {
                        url = '/pages/dynamicpage/tab/';
                    }
                    const dynamicTab = url + tabId + '/' + _youthId + '/' + sourceKey + '/' + sourceValue + '/' + sourceType;
                    this.router.navigate([dynamicTab], { relativeTo: this.route, state: navigationState });
                }
                else {
                    this.routeToDynamicForms(result.data[0].pagetype, _pageId, _youthId, navigationState);
                }
            }
        });
    }
    routeToDynamicForms(type, _pageId, _youthId, navigationState) {
        if (type === 'ATPBDM') {
            if (window.location.href.indexOf('master-view') > 0 || window.location.href.indexOf('composite-page') > 0) {
                const dynamicTab = 'form/' + _pageId + '/' + _youthId;
                this.router.navigate([dynamicTab], { relativeTo: this.route, state: navigationState });
            }
            else if (window.location.href.indexOf('tab') > 0) {
                const dynamicTab = '../../page/' + _pageId + '/' + _youthId;
                this.router.navigate([dynamicTab], { relativeTo: this.route, state: navigationState });
            }
            else {
                const dynamicTab = PAGE_MODIFY_ROUTE + _pageId + '/' + _youthId;
                this.router.navigate([dynamicTab], { relativeTo: this.route, state: navigationState });
            }
        }
    }
    setTemplate(result) {
        //Must Needed for Merge version of PICS
        this.searchparams = result;
        this.searchparams.gridconfig = typeof result?.gridconfig === 'string' ? JSON.parse(result?.gridconfig) : result?.gridconfig;
        this.searchparams.templatejson = typeof result?.templatejson === 'string' ? JSON.parse(result?.templatejson) : result?.templatejson;
        this.searchparams.tableschemaconfig = typeof result?.tableschemaconfig === 'string' ? JSON.parse(result?.tableschemaconfig) : result?.tableschemaconfig;
        this.setLayout(result);
        this.fromTitle = result.pagename;
        this.dataStoreService.setData('Tittle', this.fromTitle);
        this.pageType = result.pageDetails.pagetype ? result.pageDetails.pagetype.trim() : '';
        this.pageId = result && result.pageDetails ? result.pageDetails.id : null;
        if (this.pageType == 'DSP' || this.pageType == 'BUSP') {
            this.spliterSize = 30;
            this.gridspliterSize = 70;
        }
        this.setGrid(this.searchparams);
        this.targetId = this.searchparams?.gridconfig?.gridActionFormArray[0]?.link;
        this.tempaConfig = this.searchparams?.gridconfig;
        this.buildCriteria(result);
    }
    setGrid(result) {
        this.updateGrid = result.gridconfig;
        const filter = this.updateGrid?.gridConfigFormArray.filter(x => x.sort || x.filter);
        if (filter?.length > 0) {
            this.showFilterRowPanel = true;
        }
        if (this.updateGrid?.gridActionFormArray?.some(a => a.action != 'add')) {
            this.showActionColumn = true;
        }
        if (this.updateGrid?.isShowOnTop) {
            this.getOutsideGridAction(this.updateGrid?.gridActionFormArray?.find(a => a?.action?.toLowerCase() === 'add'));
        }
    }
    async getGrid(responseId) {
        this.storage.setObj(FILE_EXPORT_NAME_KEY, this.searchparams?.pagename);
        if (this.searchparams?.templatejson && !this.searchparams?.tableschemaconfig) {
            this.freeFormPageGrid(this.http, this.storage);
        }
        else {
            if (this.dynamicSearch && this.dynamicSearch.length > 0) {
                await this.getCriteriaByPageId();
                this.showGridPage = false;
            }
            else {
                this.showGridPage = true;
                this.removeAllDynamicSearchCondtion();
            }
            this.searchGrid(this.http, this.storage, responseId);
        }
    }
    setLayout(result) {
        if (result.templatejson) {
            this.jsonForm = typeof result.templatejson === 'string' ? JSON.parse(result.templatejson) : result.templatejson;
            this.fromTitle = this.jsonForm && this.jsonForm['page'] ? this.jsonForm['page'] : result.pagename;
            this.layouttype = 'left';
            this.layouttype = this.layouttype === 'left' ? 'horizontal' : 'vertical';
            if (this.layouttype === 'vertical') {
                this.icon = 'expand_more';
                this.openclose = 'Close';
            }
            else {
                this.icon = 'arrow_left';
                this.openclose = 'Close';
            }
        }
    }
    onSubmit(submission) {
        this.searchparams['filterId'] = sessionStorage.getItem(LOCAL_STORAGE_KEY);
        this.submittedData = submission;
        const data = {
            data: this.submittedData,
            pagedata: [this.searchparams]
        };
        const storagedata = this.storage;
        const http = this.http;
        const baseUrl = this.environment.apiHost;
        if (this.dynamicSearchResult && this.dynamicSearchResult.length > 0) {
            data['dynamicSearchArray'] = this.dynamicSearchResult;
        }
        let gridUrl;
        if (this.manualPostApiUrl != '') {
            gridUrl = this.manualPostApiUrl;
        }
        else {
            gridUrl = GRID_URL;
        }
        this.dataSource = new CustomStore({
            load: function (loadOptions) {
                const authToken = storagedata.getItem('jwt-token');
                const user = storagedata.getObj('user');
                ['skip', 'take', 'requireTotalCount', 'requireGroupCount', 'sort', 'filter', 'group'].forEach(function (i) {
                    if (i in loadOptions && isNotEmpty(loadOptions[i])) {
                        data[i] = loadOptions[i];
                    }
                    else {
                        delete data[i];
                    }
                });
                return http
                    .post(baseUrl + gridUrl, data, {
                    headers: new HttpHeaders({
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${authToken}`,
                        uniqueid: `${user.id}`,
                        organizationid: `${user.userWorkInfo.organization.id}`,
                        rolekey: `${user.role.rolekey}`,
                        role: ROLE_CP_PUBLIC
                    })
                })
                    .toPromise()
                    .then((res) => ({
                    data: res.data,
                    totalCount: Number(res.totalCount.count)
                }))
                    .catch(_error => this.alertService.error('Data Loading Error'));
            }
        });
        function isNotEmpty(value) {
            return value !== undefined && value !== null && value !== '';
        }
    }
    afterSubmitted(_event) {
        this.showGridPage = true;
        this.getGrid();
        this.item = null;
        if (this.isShowFormPage) {
            this.getOutsideGridAction(this.updateGrid?.gridActionFormArray?.find(a => a?.action?.toLowerCase() === 'add'));
        }
    }
    saveSearchCriteria() {
        if (this.submittedData && this.submittedData.data) {
            this.submittedData.data['searchCriteria'] = this.searchCriteria;
            const body = {
                id: null,
                pageID: this.formId,
                sourceid: '',
                sourcetype: 'I',
                data: this.submittedData.data,
                metadata: this.submittedData.metadata,
                afterEntityName: '',
                afterRuleAppName: '',
                beforeEntityName: '',
                beforeRuleAppName: '',
                parentsourceid: null
            };
            this.dynamicSearchService.saveSearchCriteria(body).subscribe(result => {
                const response = result['data'];
                this.submittedData = response;
                this.id = response.id;
                this.alertService.success('Seach criteria Saved successfully');
            });
        }
        else {
            this.alertService.success('Please perform search in order to save your search criteria');
        }
    }
    setSearch(newd) {
        this.submittedData = { data: newd };
        this.onSubmit(this.submittedData);
    }
    reset(type) {
        this.submittedData = { data: {} };
        this.getExportData(this.submittedData, type);
    }
    getExportData(submission, type) {
        this.submittedData = submission;
        this.searchparams['filterId'] = sessionStorage.getItem(LOCAL_STORAGE_KEY);
        const data = {
            inputFieldId: this.inputFieldId,
            pagedata: [this.searchparams],
            requireTotalCount: true,
            skip: 0,
            take: 5000
        };
        if (!data.inputFieldId) {
            data.inputFieldId = this.user?.userWorkInfo?.organization?.id;
        }
        if (this.dynamicSearchResult && this.dynamicSearchResult.length > 0) {
            data['dynamicSearchArray'] = this.dynamicSearchResult;
        }
        let gridUrl;
        if (this.manualPostApiUrl != '') {
            gridUrl = this.manualPostApiUrl;
        }
        else {
            gridUrl = GRID_URL;
        }
        this.dynamicSearchService.exportData(data, gridUrl).subscribe(value => {
            if (value['data'].length) {
                this.downloadFile(type, value['data']);
            }
            else {
                this.alertService.error('No data available');
            }
        });
    }
    downloadFile(type, data) {
        const fileData = {
            data: data,
            totalcount: data.length,
            pagename: this.fromTitle,
            gridConfigFormArray: this.updateGrid?.gridConfigFormArray
        };
        const fileType = type === 'excel' ? true : false;
        this.dynamicSearchService.generateDocument(fileData, fileType).subscribe(result => {
            if (result) {
                const awsUrl = result['data'].awsUrl;
                this.alertService.success('Document Generated successfully.');
                if (type === 'print') {
                    // If type is print it will open browser print preview
                    es6printJS({ printable: awsUrl, type: 'pdf', showModal: true });
                    return;
                }
                window.open(awsUrl, '_blank');
            }
        }, error => {
            this.alertService.error(error.message);
        });
    }
    searchGrid(http, storage, responseId) {
        const outsideFormID = this.updateGrid?.gridActionFormArray
            ?.find(a => a?.action?.toLowerCase() === 'add')
            ?.link?.split('_sourceform')[0];
        const primary_table = this.searchparams.tableschemaconfig.tablefields.primary;
        const fallbackIdFromRoute = this.searchparams?.gridconfig?.fallbackIdFromRoute;
        console.log(primary_table.replace('_audit', '_id'), 'primary');
        let queryData;
        if (fallbackIdFromRoute) {
            const fallbackIdValue = this.router.url.split('/').pop();
            if (fallbackIdValue) {
                queryData = { data: {} };
                queryData.data[fallbackIdFromRoute] = Number(fallbackIdValue);
            }
        }
        else if (this.sourceKey && this.sourceValue && this.sourceType) {
            queryData = { data: {} };
            queryData.data[this.sourceKey] = (this.sourceType === 'number') ? Number(this.sourceValue) : this.sourceValue;
        }
        this.searchparams['filterId'] = sessionStorage.getItem(LOCAL_STORAGE_KEY);
        const data = {
            data: this.submittedData,
            queryData: queryData,
            pagedata: [this.searchparams],
            inputFieldId: this.inputFieldId,
            inputId: this.inputId,
            requireTotalCount: true,
            restrict: true,
            associatedFormId: outsideFormID ? outsideFormID : this.associatedId.toString(),
            roleId: sessionStorage.getItem('role_id'),
            selectedValue: this.paramvalue,
            selectedField: this.paramfield,
            paginate: true,
            redirectFilterId: responseId
        };
        const baseUrl = this.environment.apiHost;
        if (this.dynamicSearchResult && this.dynamicSearchResult.length > 0) {
            data['dynamicSearchArray'] = this.dynamicSearchResult;
        }
        const ctrl = this;
        let gridUrl;
        if (this.manualPostApiUrl != '') {
            gridUrl = this.manualPostApiUrl;
        }
        else {
            gridUrl = GRID_URL;
        }
        const _this = this;
        this.dataSource = new CustomStore({
            load: function (loadOptions) {
                const authToken = storage.getItem('jwt-token');
                const user = storage.getObj('user');
                if (!user) {
                    // fix for user null immediately after login
                    return setTimeout(() => {
                        _this.searchGrid(http, storage);
                    }, 1000);
                }
                ['skip', 'take', 'requireTotalCount', 'requireGroupCount', 'sort', 'filter', 'pageconfig', 'group'].forEach(function (item) {
                    if (item in loadOptions && isNotEmpty(loadOptions[item])) {
                        data[item] = loadOptions[item];
                    }
                    else {
                        delete data[item];
                    }
                });
                data.requireTotalCount = true;
                return http
                    .post(baseUrl + gridUrl, data, {
                    headers: new HttpHeaders({
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${authToken}`,
                        uniqueid: `${user.id}`,
                        organizationid: `${user?.userWorkInfo?.organization?.id ? user.userWorkInfo.organization.id : ''}`,
                        rolekey: `${user?.role?.rolekey ? user.role.rolekey : ''}`,
                        role: ROLE_CP_PUBLIC
                    })
                })
                    .toPromise()
                    .then((res) => {
                    this.primary_column = res.data?.result[0]?.primaryColumn;
                    for (let i = 0; i < res?.data?.data?.length; i++) {
                        for (const key in res?.data?.data[i]) {
                            if (res?.data?.data[i]?.[key]) {
                                const val = res?.data?.data[i]?.[key];
                                if ((typeof val === 'string' || val instanceof String) && val?.includes('[')) {
                                    res.data.data[i][key] = res.data.data[i][key].replace('[', '').replace(']', '').replaceAll('"', '');
                                }
                            }
                        }
                    }
                    ctrl.showGridPage = !((res?.data?.totalCount?.count === 0 || res?.data?.totalCount?.count === 1) &&
                        ctrl.updateGrid?.isInitialFormLoad);
                    this.isShowFormPage = ctrl.showGridPage;
                    if (!ctrl.showGridPage && ctrl.updateGrid?.gridActionFormArray && ctrl.updateGrid?.gridActionFormArray.length) {
                        const formInfo = ctrl.updateGrid?.gridActionFormArray.find(ele => ele.isOutsideGrid);
                        ctrl.item = {
                            component: DynamicSearchCleanupComponent,
                            pageId: formInfo?.link,
                            editId: res?.data?.data[0]?.id,
                            outputs: {
                                afterSubmit: event => ctrl.afterSubmitted(event)
                            },
                            isInitialFormLoad: ctrl.updateGrid?.isInitialFormLoad,
                            isShowOnTop: ctrl.updateGrid?.isShowOnTop
                        };
                    }
                    if (ctrl.showGridPage && ctrl.updateGrid?.isShowOnTop && ctrl.updateGrid?.gridActionFormArray && ctrl.updateGrid?.gridActionFormArray.length) {
                        const formInfo = ctrl.updateGrid?.gridActionFormArray.find(ele => ele.isOutsideGrid);
                        ctrl.item = {
                            component: DynamicSearchCleanupComponent,
                            pageId: formInfo?.link,
                            outputs: {
                                afterSubmit: event => ctrl.afterSubmitted(event)
                            },
                            isInitialFormLoad: ctrl.updateGrid?.isInitialFormLoad,
                            isShowOnTop: ctrl.updateGrid?.isShowOnTop
                        };
                    }
                    const dynamicSearchData = [];
                    const storedTabData = JSON.parse(JSON.parse(storage.getItem(STORAGE_KEY_DYNAMIC_TAB_PAGES)));
                    const arrresult = [];
                    const resultdata = res.data.result;
                    resultdata.map(n => {
                        n.row.map((c) => {
                            if (storedTabData != null) {
                                storedTabData.map((c1, index) => {
                                    if (index > 0 && c1.pfield == c.name) {
                                        const obj = Object.assign({}, c1);
                                        arrresult.push(obj);
                                    }
                                });
                            }
                        });
                    });
                    this.uniquedata = arrresult.filter((value, index, _array) => index == arrresult.findIndex(item => item.id == value.id));
                    res.data.result.map(n => {
                        const parentObj = {};
                        n.row.forEach((c) => {
                            let columnData = c.value;
                            const [tableName, columnName] = c.name.split('.');
                            columnData = typeof columnData === 'number' ? c.value.toString() : c.value;
                            if (parentObj[tableName]) {
                                parentObj[tableName][columnName] = columnData;
                            }
                            else {
                                parentObj[tableName] = {};
                                parentObj[tableName][columnName] = columnData;
                            }
                            parentObj['rbacConditions'] = n.rbacConditions;
                            parentObj['businessRules'] = n.businessRules ? n.businessRules : [];
                            parentObj['routedata'] = this.uniquedata;
                            parentObj['primaryColumn'] = n.primaryColumn;
                        });
                        dynamicSearchData.push(parentObj);
                    });
                    return {
                        data: dynamicSearchData,
                        totalCount: Number(res?.data.totalCount.count)
                    };
                })
                    .catch(_error => this.alertService.error('Failed to load data'));
            }
        });
        function isNotEmpty(value) {
            return value !== undefined && value !== null && value !== '';
        }
    }
    freeFormPageGrid(http, storage) {
        const data = {
            data: this.submittedData,
            pagedata: [this.searchparams],
            inputFieldId: this.inputFieldId,
            inputId: this.inputId,
            requireTotalCount: true,
            restrict: true,
            roleId: sessionStorage.getItem('role_id')
        };
        const gridActionFormArray = this.updateGrid.gridActionFormArray.map(a => ({
            ...a,
            link: String(this.searchparams.pageid)
        }));
        this.updateGrid = { ...this.updateGrid, gridActionFormArray };
        const baseUrl = this.environment.apiHost;
        const _this = this;
        this.dataSource = new CustomStore({
            load: function (loadOptions) {
                const authToken = storage.getItem('jwt-token');
                const user = storage.getObj('user');
                if (!user) {
                    return setTimeout(() => {
                        _this.freeFormPageGrid(http, storage);
                    }, 1000);
                }
                ['skip', 'take', 'requireTotalCount', 'requireGroupCount', 'sort', 'filter', 'pageconfig', 'group'].forEach(item => {
                    if (item in loadOptions && loadOptions[item].isNotEmpty()) {
                        data[item] = loadOptions[item];
                    }
                    else {
                        delete data[item];
                    }
                });
                const gridUrl = `/solution/formresponse/getByPageId/${_this.searchparams.pageid}`;
                return http
                    .get(baseUrl + gridUrl, {
                    headers: new HttpHeaders({
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${authToken}`,
                        uniqueid: `${user.id}`,
                        organizationid: `${user?.userWorkInfo?.organization?.id ? user.userWorkInfo.organization.id : ''}`,
                        rolekey: `${user?.role?.rolekey ? user.role.rolekey : ''}`,
                        role: ROLE_CP_PUBLIC
                    })
                })
                    .toPromise()
                    .then((res) => {
                    const formResponses = res.data.pageResponses.map(a => ({
                        ...a.response,
                        id: a.id,
                        rbacConditions: a.rbacConditions
                    }));
                    const allowedResponseKeys = _this.searchparams.templatejson
                        .components.filter(a => a.key !== 'submit')
                        .map(b => b.key);
                    allowedResponseKeys.push('id', 'rbacConditions');
                    const filteredResponseKeys = formResponses.map(a => Object.keys(a)
                        .filter(key => allowedResponseKeys.includes(key))
                        .reduce((obj, key) => {
                        obj[key] = a[key];
                        return obj;
                    }, {}));
                    return {
                        data: filteredResponseKeys,
                        totalCount: Number(filteredResponseKeys.length)
                    };
                })
                    .catch(_error => this.alertService.error('Failed to load data'));
            }
        });
    }
    onClose() {
        if (this.isOpen) {
            this.spliterSize = 30;
            this.gridspliterSize = 70;
            this.isOpen = false;
            if (this.layouttype === 'vertical') {
                this.icon = 'expand_more';
            }
            else {
                this.icon = 'arrow_left';
            }
            this.openclose = 'Close';
        }
        else {
            this.spliterSize = 0;
            this.gridspliterSize = 100;
            this.isOpen = true;
            if (this.layouttype === 'vertical') {
                this.icon = 'expand_less';
            }
            else {
                this.icon = 'arrow_right';
            }
            this.openclose = 'Open';
        }
    }
    getRouter(data, _item) {
        this.selectedRowData = data;
        this.openTab = false;
        this.selectedRowIndex = data?.rowIndex;
        this.selectedColumnIndex = data?.columnIndex;
        this.selectedCaption = data?.column?.caption;
        const navigateState = {
            externalLink: true,
            isReadOnly: false,
            title: this.fromTitle
        };
        this.dataStoreService.setData('gridAction', null);
        this.dynamicSearchService.clickedIdData = null;
        this.dynamicSearchService.clickedRowData = null;
        let url;
        let datatype;
        this.updateGrid = typeof this.updateGrid === 'string' ? JSON.parse(this.updateGrid) : this.updateGrid;
        const gridArr = this.updateGrid?.gridConfigFormArray;
        const column = data.column.dataField;
        const tableschemaconfig = this.searchparams.tableschemaconfig;
        for (const key of gridArr) {
            if (key.columnDef === column) {
                url = key.link;
                const result = tableschemaconfig.fieldmapping.filter(x => (x.tablename + '.' + x.field) === key.columnDef);
                datatype = result[0].datatype;
                break;
            }
        }
        this.loadRouter(url, datatype, column, data, navigateState);
    }
    loadRouter(url, datatype, column, data, navigateState) {
        if (url) {
            this.dynamicSearchService.clickedRowData = data?.data;
            const URLSs = this.urlget(data, 'editUrl', '');
            this.dynamicSearchService.changePage(true);
            const dataKeys = Object.keys(data?.data);
            if (dataKeys.includes(URLSs)) {
                if (!data?.data[URLSs]) {
                    this.alertService.warn(data.displayValue + ' not generated properly!');
                }
                else {
                    const s3Url = data?.data[URLSs].includes('.com/') ? data?.data[URLSs].split('.com/')[1] : data?.data[URLSs];
                    this.downloadFileInternally(this.environment.s3BucketUrl + '/' + s3Url, data?.data['filename']);
                }
            }
            else {
                data.data.fromGrid = true;
                data.data.externalLink = true;
                this.dynamicSearchService.id.next(data.data[Object.keys(data.data)[0]].id);
                this.getPageTabs(url, datatype, column, data.data[column.split('.')[0]][column.split('.')[1]], data.data[Object.keys(data.data)[0]].id, navigateState);
            }
        }
    }
    editData(data) {
        const URLSs = this.urlget(data, 'editUrl', '');
        this.dynamicSearchService.id.next(data.data[Object.keys(data.data)[0]].id);
        this.router.navigateByUrl(URLSs);
    }
    viewData(data) {
        const URLSs = this.urlget(data, 'editUrl', '');
        this.router.navigateByUrl(URLSs);
    }
    deleteData(data) {
        const URLSs = this.urlget(data, 'deleteUrl', '');
        this.router.navigateByUrl(URLSs);
    }
    openLink(data) {
        const URLSs = this.urlget(data, 'externalLink', '');
        this.router.navigateByUrl(URLSs);
    }
    urlget(data, obj, pUrl) {
        let url = obj ? this.updateGrid[obj] : pUrl;
        if (url) {
            const urlparamArr = url.split('/');
            for (const key of urlparamArr) {
                if (key.indexOf('{') !== -1 && data.data) {
                    url = this.setURL(key, url, data);
                    url = this.setCurrentUrl(key, url);
                }
            }
            url = url.replace('/undefined', '');
            const urlparamArr1 = url.split('/');
            url = this.setUrlParam(urlparamArr1, url, data);
        }
        /* remove duplicate forward slashes from the URL */
        url = url.replace(/([^:]\/)\/+/g, '$1');
        return url;
    }
    setURL(key, url, data) {
        if (key === '{sourceId}') {
            const val = {
                sourceId: this.inputFieldId
            };
            return url.replace(key, val[key.substring(1, key.indexOf('}'))]);
        }
        else if (key === '{purpose}') {
            const val = {
                purpose: this.purpose
            };
            return url.replace(key, val[key.substring(1, key.indexOf('}'))]);
        }
        else {
            return url.replace(key, data.data[key.substring(1, key.indexOf('}'))]);
        }
    }
    setCurrentUrl(key, url) {
        if (this.router.url && key === '{pagepath}') {
            const currentURL = this.router.url.split('mergepage');
            if (currentURL?.length) {
                return url.replace('/pages/dynamicpage/', currentURL[0]);
            }
        }
    }
    setUrlParam(urlparamArr1, url, data) {
        for (const key of urlparamArr1) {
            if (key.indexOf('{') !== -1 && data.data) {
                return url.replace(key, data.data[key.substring(1, key.indexOf('}'))]);
            }
        }
    }
    // dynamic action link
    getInsideGridAction(data, item) {
        this.checkRulesBeforeActions(data, item).subscribe((allowed) => {
            if (!allowed) {
                return false;
            }
            this.getActionRoutes(data, item);
        });
    }
    getActionRoutes(data, item) {
        this.localstore.setItem('gridAction', item.action);
        /* Complexity-14*/
        if (item.action === 'search' || item.action === 'edit' || item.action === 'view' || item.action === 'select' || item.action === 'switch' || item.action === 'copy') {
            /* Complexity splitted function*/
            this.actionCheck(item, data);
        }
        else if (item.action === 'delete') {
            this.deleteConfirmation(data, item);
        }
        else if (item.action === 'complete') {
            this.completeConfirmation(data, item);
        }
        else if (item.action === 'narrative') {
            this.popup(data.data.narrative, item);
        }
        else if (item.action === 'history') {
            if (item.type === POPUP_TYPE_OPEN) {
                /* Complexity splitted function*/
                this.popupTypeCheck(item, data);
            }
        }
        else if (item.action === 'print') {
            /* Complexity splitted function*/
            this.actionPrintCheck(data);
        }
        else if (item.action === 'email') {
            /* Complexity splitted function*/
            this.actionEmailCheck(data);
        }
        else if (item.action === 'download') {
            /* Complexity splitted function*/
            this.actionDownloadCheck(item, data);
        }
        else if (item.action === 'TriggerScheduling') {
            this.startScheduling(data.data[Object.keys(data.data)[0]].id);
        }
        else if (item.action === 'Trigger') {
            this.startScheduling(data.data[Object.keys(data.data)[0]].id, item?.link);
        }
        else if (item.action === 'Survey') {
            this.actionSurveyCheck(data); /* Complexity splitted function*/
        }
        else if (item.action === 'info') {
            this.actionInfoCheck(data, item); /* Complexity splitted function*/
        }
        // else if (item.action === 'copy') {
        //   this.actionCheck(item, data); /* Complexity splitted function*/
        // }
    }
    actionCheck(item, data) {
        /* From getInsideGridAction() */
        const action = item.action;
        let editDataStatus = '';
        const gridConfig = this.searchparams?.gridconfig;
        const tableschemaconfig = this.searchparams?.tableschemaconfig;
        let viewPrimaryTable = '';
        if (tableschemaconfig.objectType == 'view') {
            const firstKey = Object.keys(data.data)[0];
            viewPrimaryTable = data.data[firstKey]['primary_object'];
        }
        if (this.isEditThresholdRequire || gridConfig?.isEditThresholdRequire) {
            this.isEditThresholdRequire = true;
        }
        if (item.action === 'edit') {
            this.localstore.setItem('EditGridPageID', this.pageId.toString());
        }
        if (item.action === 'edit' && this.isEditThresholdRequire) {
            const primary_id = this.getPrimaryColumnId(data.data.primaryColumn, data);
            this.dynamicSearchService.checkEditStatus(this.pageId, primary_id).subscribe(result => {
                if (result['data'] && result['data'].length > 0 && result['data'][0]['status']) {
                    editDataStatus = result['data'][0]['status'];
                    this.editActionCheck(item, data, editDataStatus);
                }
                else {
                    this.alertService.error('Something went wrong');
                    this.getGrid();
                }
            }, _error => {
                this.alertService.error(AppConstants.errorMessage);
            });
        }
        else {
            this.dataStoreService.setData('gridAction', action);
            const navigateState = {
                externalLink: true,
                isReadOnly: false,
                title: item.action[0].toUpperCase() + item.action.slice(1) + ' ' + this.fromTitle,
                personId: null,
                pageId: null
            };
            if (item.action === 'view') {
                navigateState.isReadOnly = true;
            }
            if (item.type === POPUP_TYPE_OPEN) {
                const dialogConfig = new MatDialogConfig();
                dialogConfig.disableClose = false;
                dialogConfig.height = '90%';
                dialogConfig.width = '100%';
                this.actionViewCheck(item, dialogConfig, data);
                const ref = this.dialog.open(DynamicSearchCleanupComponent, dialogConfig);
                ref.afterClosed().subscribe(() => {
                    this.getGrid();
                });
            }
            else {
                if (item.action === 'copytemp') {
                    const user = this.localstore.getObj('user');
                    console.log(data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]);
                    console.log(Object.keys(data.data)[0]);
                    let pageId = '';
                    if (gridConfig?.gridActionFormArray.length) {
                        gridConfig?.gridActionFormArray.find(item => {
                            if (item?.action == 'add')
                                pageId = item?.link;
                        });
                    }
                    const respid = typeof data.data[Object.keys(data.data)[0]] == 'string'
                        ? data.data?.[data.data.primaryColumn] || data.data?.ID
                        : data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn] || data.data[Object.keys(data.data)[0]]?.id;
                    const requestData = {
                        // "id":data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn],
                        "id": respid,
                        "schema": tableschemaconfig.schema,
                        "tablename": tableschemaconfig.objectType !== 'view' ? Object.keys(data.data)[0] : viewPrimaryTable,
                        "currentUser": user?.id,
                        "pageId": pageId
                    };
                    this.dynamicSearchService.rowVersion(requestData).subscribe((res) => {
                        console.log(res);
                        const url = this.location.path();
                        this.router.navigate([url], {
                            relativeTo: this.route,
                            state: navigateState
                        });
                        this.searchGrid(this.http, this.storage);
                        this.alertService.success('Row added successfully');
                        if (['master-view', 'composite-page'].includes(window.location.href))
                            if (this.selectedComponent) {
                                if ((this.selectedComponent?.loadedFromMasterView || this.selectedComponent?.loadedFromCompositePage) && this.selectedComponent.settings)
                                    this.store.dispatch(publishEvent({ eventName: 'submit', payload: this.selectedComponent }));
                            }
                    }, _error => {
                        this.alertService.error(_error.error.message);
                    });
                }
                //This Routes prioritzing composite-pages as first
                else if (this.router?.url.includes('master-view') || this.router?.url.includes('composite-page')) {
                    const url = this.router.url;
                    if (this.selectedComponent && (this.selectedComponent?.loadedFromMasterView || this.selectedComponent.loadedFromCompositePage) && this.selectedComponent.settings &&
                        this.selectedComponent.settings.mappingFormId)
                        this.store.dispatch(publishEvent({ eventName: item.action,
                            payload: { id: data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn], mappingFormId: this.selectedComponent.settings.mappingFormId } }));
                    else {
                        if (this.selectedComponent) {
                            this.localstore.setItem('compositeTitle', this.selectedComponent.settings.title);
                        }
                        this.localstore.setItem('setTabAction', item.action);
                        this.sharedService.sendMessage();
                        this.router.navigate([url + '/form/' + item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                            relativeTo: this.route,
                            state: navigateState
                        });
                        //this.actionRouterConfig(data, item, navigateState);
                    }
                }
                //Below routing handles ribbon and single grid pages
                else if (this.router?.url.includes('dynamic-routing')) {
                    this.localstore.setItem('setTabAction', item.action);
                    this.sharedService.sendMessage();
                    let url;
                    if (item?.pageType == 'COMP') {
                        url = '../../../composite-page/' + item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                    }
                    else {
                        url = '../../../dynamicpage/page/modify/' + item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                    }
                    this.router.navigate([url], {
                        relativeTo: this.route,
                        state: navigateState
                    });
                    // this.actionRouterConfig(data, item, navigateState);
                }
                else if (item.link.includes('pages/')) {
                    const link = item.link.replace('{id}', data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]);
                    this.router.navigateByUrl('/' + link, { state: item });
                }
                else if (item.link.includes('mergepage')) {
                    let url = item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                    if (item.link.includes('{sourceId}')) {
                        url = this.urlget(data, '', item.link);
                        url = url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                    }
                    this.router.navigate([url], { relativeTo: this.route, state: navigateState });
                }
                else if (item.link.includes('sourceid')) {
                    const formId = item.link.split('_sourceid')[0];
                    const url = '/pages/dynamic-routing/' + data.data.sourceid + '/dynamicpage/page/modify/' + formId;
                    this.router.navigate([url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                        relativeTo: this.route,
                        state: navigateState
                    });
                }
                else if (item.link.includes('_page')) {
                    // Transactions Page - edit routing changes
                    const formId = item.link.split('_page')[0];
                    const url = '/pages/dynamic-routing/' + data.data.clientaccountid + '/dynamicpage/page/modify/' + formId;
                    this.router.navigate([url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                        relativeTo: this.route,
                        state: navigateState
                    });
                }
                else {
                    const pageid = item.link ? item.link : this.pageId;
                    const respid = typeof data.data[Object.keys(data.data)[0]] == 'string'
                        ? data.data?.[data.data.primaryColumn] || data.data?.ID
                        : data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn] || data.data[Object.keys(data.data)[0]]?.id;
                    const url = '/pages/dynamicpage/page/modify/' + pageid + '/' + respid;
                    this.router.navigate([url], { relativeTo: this.route, state: navigateState });
                }
            }
        }
    }
    editActionCheck(item, data, editDataStatus) {
        if (item.action === 'edit' && editDataStatus === 'OWNER_ONLY_EDIT') {
            this.alertService.warn('You do not have permission to edit this record. Only the owner who created the record can make changes.');
            this.getGrid();
        }
        else if (item.action === 'edit' && editDataStatus === 'NO_EDIT') {
            this.alertService.warn('The edit window for this record has expired and changes cannot be made at this time.');
            this.getGrid();
        }
        else {
            const action = item.action;
            this.dataStoreService.setData('gridAction', action);
            const navigateState = {
                externalLink: true,
                isReadOnly: false,
                title: item.action[0].toUpperCase() + item.action.slice(1) + ' ' + this.fromTitle,
                personId: null,
                pageId: null
            };
            if (this.router?.url.includes('dynamic-routing')) {
                if (this.router?.url.includes('master-view') || this.router?.url.includes('composite-page')) {
                    const url = this.router.url;
                    if (this.selectedComponent && (this.selectedComponent.loadedFromMasterView || this.selectedComponent.loadedFromCompositePage) && this.selectedComponent.settings &&
                        this.selectedComponent.settings.mappingFormId)
                        this.store.dispatch(publishEvent({
                            eventName: item.action,
                            payload: { id: data.data[Object.keys(data.data)[0]].id, mappingFormId: this.selectedComponent.settings.mappingFormId }
                        }));
                    else {
                        this.router.navigate([url + '/form/' + item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                            relativeTo: this.route,
                            state: navigateState
                        });
                    }
                }
                else {
                    const url = '../../../dynamicpage/page/modify/' + item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                    this.router.navigate([url], {
                        relativeTo: this.route,
                        state: navigateState
                    });
                }
                // this.actionRouterConfig(data, item, navigateState);
            }
            else if (item.link.includes('pages/')) {
                const link = item.link.replace('{id}', data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]);
                this.router.navigateByUrl('/' + link, { state: item });
            }
            else if (item.link.includes('mergepage')) {
                let url = item.link + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                if (item.link.includes('{sourceId}')) {
                    url = this.urlget(data, '', item.link);
                    url = url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn];
                }
                this.router.navigate([url], { relativeTo: this.route, state: navigateState });
            }
            else if (item.link.includes('sourceid')) {
                const formId = item.link.split('_sourceid')[0];
                const url = '/pages/dynamic-routing/' + data.data.sourceid + '/dynamicpage/page/modify/' + formId;
                this.router.navigate([url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                    relativeTo: this.route,
                    state: navigateState
                });
            }
            else if (item.link.includes('_page')) {
                // Transactions Page - edit routing changes
                const formId = item.link.split('_page')[0];
                const url = '/pages/dynamic-routing/' + data.data.clientaccountid + '/dynamicpage/page/modify/' + formId;
                this.router.navigate([url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                    relativeTo: this.route,
                    state: navigateState
                });
            }
            else if (item.action === 'copy') {
                console.log(data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]);
                console.log(Object.keys(data.data)[0]);
                const requestData = {
                    "id": data.data[Object.keys(data.data)[0]]?.id,
                    "schema": "oya",
                    "tablename": Object.keys(data.data)[0],
                    "currentUser": 572
                };
                this.dynamicSearchService.rowVersion(requestData).subscribe((res) => {
                    console.log(res);
                    const url = this.location.path();
                    this.router.navigate([url], {
                        relativeTo: this.route,
                        state: navigateState
                    });
                    this.searchGrid(this.http, this.storage);
                    this.alertService.success('Row added successfully');
                }, _error => {
                    this.alertService.error(_error.error.message);
                });
            }
            else {
                const pageid = item.link ? item.link : this.pageId;
                const respid = typeof data.data[Object.keys(data.data)[0]] == 'string'
                    ? data.data?.[data.data.primaryColumn] || data.data?.ID
                    : data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn] || data.data[Object.keys(data.data)[0]]?.id;
                const url = '/pages/dynamicpage/page/modify/' + pageid + '/' + respid;
                this.router.navigate([url], { relativeTo: this.route, state: navigateState });
            }
        }
    }
    actionViewCheck(item, dialogConfig, data) {
        /* From actionCheck()--> getInsideGridAction() */
        if (item.action === 'view') {
            dialogConfig.data = {
                editId: data.data[Object.keys(data.data)[0]].id,
                pageId: item.link,
                isPopup: true,
                isReadOnly: true
            };
        }
        else {
            dialogConfig.data = { editId: data.data[Object.keys(data.data)[0]].id, pageId: item.link, isPopup: true };
        }
    }
    actionRouterConfig(data, item, navigateState) {
        let url = this.router.url;
        if (this.outerRouting?.observers?.length) {
            data.item = item;
            this.dataStoreService.setData('outerRoutingData', data);
            this.outerRouting.emit(data);
        }
        else {
            if (item.link.includes('multipleform')) {
                url = url.split('mergepage')[0];
                const formId = item.link.split('_multipleform')[0];
                url = url + 'dynamicpage/page/modify/' + formId;
            }
            else if (item.link.includes('sourceform')) {
                // for child removal - edit/view routing change
                url = url.split('mergepage')[0];
                const formId = item.link.split('_sourceform')[0];
                url = url + 'page/modify/' + formId;
                if (item.link.split('_sourceform')[1] && item.link.split('_sourceform')[1].includes('_subtab_')) {
                    // External Portal - Staff with subtabs
                    const link = item.link.split('_sourceform')[1];
                    /* Get subtab name for url */
                    const subtab = link.split('_subtab_')[1];
                    url = subtab + '/' + url;
                    /* Disable back button */
                    navigateState.externalLink = false;
                    /* set default page title */
                    navigateState.title = '';
                    this.dynamicSearchService.changePage(true);
                }
            }
            else if (url.indexOf('master-view') > 0 || url.indexOf('composite-page') > 0) {
                url = url + '/form/' + item.link;
            }
            this.router.navigate([url + '/' + data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]], {
                relativeTo: this.route,
                state: navigateState
            });
        }
    }
    popupTypeCheck(item, data) {
        const srcid = this.route?.parent?.parent?.parent?.parent?.snapshot?.paramMap.get('sourceid')
            ? this.route?.parent?.parent?.parent?.parent?.snapshot?.paramMap.get('sourceid')
            : this.route?.parent?.parent?.parent?.parent?.parent?.parent?.snapshot?.paramMap.get('sourceid');
        const dialogConfig = new MatDialogConfig();
        dialogConfig.disableClose = false;
        dialogConfig.height = '90%';
        dialogConfig.width = '100%';
        dialogConfig.data = { pageId: item.link, inputFieldId: data.key.id, inputId: srcid };
        const ref = this.dialog.open(DynamicSearchCleanupComponent, dialogConfig);
        ref.afterClosed().subscribe(() => {
            this.getGrid();
        });
    }
    actionPrintCheck(data) {
        /* From getInsideGridAction()*/
        if (!data.data.s3bucketurl) {
            this.alertService.warn('No pdf found');
            return;
        }
        const pdfurl = this.environment.s3BucketUrl + '/' + data.data.s3bucketurl;
        es6printJS({ printable: pdfurl, type: 'pdf', showModal: true });
    }
    actionEmailCheck(data) {
        /* From getInsideGridAction()*/
        if (!data.data.email) {
            this.alertService.warn('Email is not available');
            return;
        }
        if (!data.data.s3bucketurl) {
            this.alertService.warn('No Attachment found');
            return;
        }
        // #check fromaddress is hardcoded
        this.dynamicSearchService
            .sendMail({
            subject: data.data.subject,
            content: `${data.data.content_body}<p>Thanks <br> ${this.user.firstName} ${this.user.lastName} <br>  ${this.user.role.description} </p>`,
            s3bucketkey: data.data.s3bucketurl,
            toadresses: [data.data.email],
            fromaddress: 'vmathew@dminc.com'
        })
            .subscribe(() => {
            this.alertService.success('Email Sent successfully');
        });
    }
    actionDownloadCheck(item, data) {
        /* From getInsideGridAction()*/
        if (item.type === 'Document Report Generation') {
            this.dataStoreService.setData('pageData', this.searchparams);
            this.dataStoreService.setData('gridData', data?.data);
            const dialogConfig = new MatDialogConfig();
            dialogConfig.disableClose = false;
            dialogConfig.height = '90%';
            dialogConfig.width = '100%';
            dialogConfig.data = { editId: data.data[Object.keys(data.data)[0]].id, pageId: item.link, isPopup: true };
            const ref = this.dialog.open(DynamicSearchCleanupComponent, dialogConfig);
            ref.afterClosed().subscribe(() => {
                this.getGrid();
            });
        }
    }
    actionSurveyCheck(data) {
        /* From getInsideGridAction()*/
        if (data.data.pagedataid) {
            data.data.isReadOnly = true;
        }
        this.router.navigateByUrl(PAGE_MODIFY_ROUTE +
            data.data[Object.keys(data.data)[0]].id +
            (data.data.pagedataid ? '/' + data.data.pagedataid : ''), { state: data.data });
    }
    getOutsideGridAction(item) {
        this.checkRulesBeforeActions({ pageData: this.allUrlParams }, item).subscribe((allowed) => {
            if (!allowed) {
                return false;
            }
            this.storage.setItem('AddAction', true);
            this.localstore.setItem('gridAction', item.action);
            const data = item;
            const action = item.action;
            this.dataStoreService.setData('gridAction', action);
            const navigateState = {
                externalLink: true,
                title: item.action[0].toUpperCase() + item.action.slice(1) + ' ' + this.fromTitle,
                personId: null
            };
            // if (navigateState?.title) {
            //   sessionStorage.setItem('add-title', navigateState?.title);
            // }
            if (data.type == 'External Link') {
                this.getVersionList(item?.link, null, item);
            }
            else if (data.type == POPUP_TYPE_OPEN) {
                this.setDialogConfig(item);
            }
            else {
                if (this.router?.url.includes('dynamic-routing')) {
                    this.dynamicRouteCheck(data, item, navigateState);
                }
                else if (data.link.includes('mergepage')) {
                    const url = data.link;
                    this.router.navigate([url], { relativeTo: this.route, state: navigateState });
                }
                else {
                    this.navigateToGridPage(data, navigateState);
                }
            }
        });
    }
    dynamicRouteCheck(data, item, navigateState) {
        /* From getOutsideGridAction()*/
        let url = this.router.url;
        if (this.outerRouting?.observers?.length) {
            data.item = item;
            this.outerRouting.emit(data);
        }
        else {
            let link = data.link;
            if (data.link.includes('multipleform')) {
                url = url.split('mergepage')[0];
                const formId = data.link.split('_multipleform')[0];
                link = 'dynamicpage/page/modify/' + formId;
            }
            else if (data.link.includes('sourceform')) {
                // for interest transaction add
                url = url.split('mergepage')[0];
                const formId = data.link.split('_sourceform')[0];
                link = 'page/modify/' + formId;
                navigateState = this.setRouteData(data, link, navigateState);
                if (data.link.split('_sourceform')[1] && data.link.split('_sourceform')[1].includes('_subtab_')) {
                    // External Portal - Staff with subtabs
                    const subtabData = data.link.split('_sourceform')[1];
                    /* Get subtab name for url */
                    const subtab = subtabData.split('_subtab_')[1];
                    link = subtab + '/' + link;
                    /* Disable back button */
                    navigateState.externalLink = false;
                    /* set default page title */
                    navigateState.title = '';
                    this.dynamicSearchService.changePage(true);
                }
            }
            this.router.navigate([url + '/' + link], { relativeTo: this.route, state: navigateState });
        }
    }
    setRouteData(data, _link, navigateState) {
        if (data.link.split('_sourceform')[1] && data.link.split('_sourceform')[1].includes('_subtab_')) {
            // External Portal - Staff with subtabs
            // Get subtab name for url
            /* Disable back button */
            navigateState.externalLink = false;
            /* set default page title */
            navigateState.title = '';
            this.dynamicSearchService.changePage(true);
        }
        return navigateState;
    }
    navigateToGridPage(data, navigateState) {
        if (data.link.includes('pages/')) {
            if (data.link.includes('{organizationid}')) {
                const sourceid = this.user?.userWorkInfo?.organization?.id;
                const link = data.link.replace('{organizationid}', sourceid);
                const url = '/' + link;
                this.router.navigate([url], { relativeTo: this.route, state: navigateState });
            }
            else {
                this.router.navigateByUrl('/' + data.link);
            }
        }
        else {
            if (window.location.href.indexOf('tab') > 0) {
                const url = '../../page/' + data.link;
                this.router.navigate([url], { relativeTo: this.route, state: navigateState });
            }
            else {
                const url = PAGE_MODIFY_ROUTE + data.link;
                this.router.navigate([url], { relativeTo: this.route, state: navigateState });
            }
        }
    }
    setDialogConfig(item) {
        const dialogConfig = new MatDialogConfig();
        dialogConfig.disableClose = false;
        dialogConfig.height = '90%';
        dialogConfig.width = '100%';
        dialogConfig.data = { pageId: item.link, isPopup: true };
        const ref = this.dialog.open(DynamicSearchCleanupComponent, dialogConfig);
        ref.afterClosed().subscribe(() => {
            // refresh grid
            this.getGrid();
        });
    }
    convertToISOFormat(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        const milliseconds = String(date.getMilliseconds()).padStart(3, '0');
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;
    }
    addMinutes(dateString, minutes) {
        const date = new Date(dateString);
        date.setMinutes(date.getMinutes() + minutes);
        return date.toISOString();
    }
    getPrimaryColumnId(primaryColumn, data) {
        const firstKey = Object.keys(data.data)[0];
        return data.data[firstKey][primaryColumn];
    }
    getAsJSON(json) {
        return typeof json === 'string' ? JSON.parse(json) : json;
    }
    deleteConfirmation(data, item) {
        this.isDisabled = true;
        this.pagename = this.searchparams?.pagename;
        const gridConigForDeleteRequire = this.getAsJSON(this.searchparams?.gridconfig);
        const tableschemaconfig = this.getAsJSON(this.searchparams?.tableschemaconfig);
        let viewPrimaryTable = '';
        if (tableschemaconfig.objectType == 'view') {
            const firstKey = Object.keys(data.data)[0];
            viewPrimaryTable = data.data[firstKey]['primary_object'];
        }
        this.deletePopupText = gridConigForDeleteRequire?.isDeletePopupText;
        if (this.isDeleteRequire || gridConigForDeleteRequire?.isDeleteRequire) {
            this.isDeleteRequire = true;
        }
        if (this.isConditionalEditDelete !== 'true' || !this.isDeleteRequire) {
            const primary_id = this.getPrimaryColumnId(data.data.primaryColumn, data);
            this.DeleteConfigURL = `${DynamicSearchURL.EndPoints.formResponse.delete.replace('{id}', primary_id)}/${this.pageId}?name=${viewPrimaryTable}`;
            this.popupDialogRef = this.dialog.open(this.DeleteGridListWithoutReason, {
                panelClass: 'delete-grid-without-reason'
            });
        }
        else {
            this.adminAccessForDelete = false;
            const primary_id = this.getPrimaryColumnId(data.data.primaryColumn, data);
            this.DeleteConfigURL = `${DynamicSearchURL.EndPoints.formResponse.delete.replace('{id}', primary_id)}/${this.pageId}?name=${viewPrimaryTable}`;
            this.updateByIdAndPageIdWithReasonURL = `${DynamicSearchURL.EndPoints.formResponse.updateByIdAndPageIdWithReason.replace('{id}', primary_id)}/${this.pageId}?primarytable=${viewPrimaryTable}`;
            const tbName = this.gridConfig.highlightRow.tableName;
            this.deleteConfigData = {};
            this.deleteConfigData = { 'data': data.data[tbName] };
            this.dynamicSearchService.checkDeleteStatus(this.pageId, primary_id, viewPrimaryTable).subscribe(result => {
                if (result['data'] && result['data'].length > 0) {
                    if (result['data'][0]['status'] === 'DEL_PEND') {
                        // const infoDetails = data['data'].rbacConditions.filter(item => item.action == 'info');
                        // this.deletedReason = infoDetails[0]?.message;
                        this.deletedReason = result['data'][0]['popupText'];
                        this.popupDialogRef = this.dialog.open(this.ApproveDeleteGridList, {
                            panelClass: 'approve-delete-grid-list'
                        });
                    }
                    else if (result['data'][0]['status'] === 'DEL_ALLOW') {
                        this.popupDialogRef = this.dialog.open(this.DeleteGridListWithoutReason, {
                            panelClass: 'delete-grid-without-reason'
                        });
                    }
                    else if (result['data'][0]['status'] === 'DEL_REQ') {
                        this.popupDialogRef = this.dialog.open(this.DeleteGridList, {
                            panelClass: 'delete-drid-with-reason'
                        });
                    }
                    else {
                        this.alertService.error('Something went wrong');
                    }
                }
                else {
                    this.alertService.error('Something went wrong');
                }
            }, _error => {
                this.alertService.error(AppConstants.errorMessage);
            });
        }
        // const dialogConfig = new MatDialogConfig();
        // dialogConfig.disableClose = true;
        // dialogConfig.data = {
        //   action: 'delete',
        //   deleteId: this.pageId,
        //   message: 'Are you sure you want to delete?',
        //   url: DynamicSearchURL.EndPoints.formResponse.delete.replace('{id}', data.data[Object.keys(data.data)[0]]?.[data.data.primaryColumn]),
        //   portConfig: item.portConfig,
        //   successMsg: 'Record deleted Successfully'
        // };
        // const ref = this.dialog.open(DeleteComponent, dialogConfig);
        // ref.afterClosed().subscribe(() => {
        //   // refresh grid
        //   this.getGrid();
        // });
    }
    actionInfoCheck(data, item) {
        // const primary_id = this.getPrimaryColumnId(data.data.primaryColumn, data);
        // this.DeleteConfigURL = DynamicSearchURL.EndPoints.formResponse.delete.replace('{id}', primary_id);
        // this.deletedReason = item.message;
        // $('#ApproveDeleteGridList').modal('show');
    }
    deleteRecord() {
        this.httpService.delete(`${this.DeleteConfigURL}`).subscribe(_result => {
            this.alertService.success('Deleted Successfully');
            this.reloadPopup();
        }, _error => {
            this.cancelPopup();
            this.alertService.error(AppConstants.errorMessage);
        });
    }
    deleteRecordWithReason() {
        this.rowData = { ...this.deleteConfigData, 'reason': this.enteredReason, 'pageURL': this.router.url };
        this.httpService.post(`${this.updateByIdAndPageIdWithReasonURL}`, this.rowData).subscribe(_result1 => {
            this.reloadPopup();
            this.alertService.success('Delete Requested Successfully');
        }, _error => {
            this.cancelPopup();
            this.alertService.error(AppConstants.errorMessage);
        });
    }
    deleteRecordWithoutReason() {
        this.httpService.delete(`${this.DeleteConfigURL}`).subscribe(_result => {
            if (_result && _result['data'] === 'DEL_REQ') {
                this.alertService.error('Deletion Failed: The threshold time for deleting this record has expired.');
            }
            else if (_result && _result['data']) {
                if (window.location.href.includes('composite-page') || window.location.href.includes('master-view'))
                    if (this.selectedComponent) {
                        if ((this.selectedComponent?.loadedFromMasterView || this.selectedComponent?.loadedFromCompositePage) && this.selectedComponent.settings)
                            this.store.dispatch(publishEvent({ eventName: 'submit', payload: this.selectedComponent }));
                    }
                this.alertService.success('Deleted Successfully');
            }
            else {
                this.alertService.error('Something Went Wrong');
            }
            this.reloadPopup();
        }, _error => {
            this.cancelPopup();
            this.alertService.error(AppConstants.errorMessage);
        });
    }
    cancelPopup() {
        this.closeDialogPopup();
        this.enteredReason = '';
    }
    reloadPopup() {
        this.closeDialogPopup();
        this.getGrid();
        this.enteredReason = '';
    }
    checkIsDisabled(text) {
        if (text && text.trim() != '') {
            this.isDisabled = false;
            this.enteredReason = text;
        }
        else {
            this.isDisabled = true;
            this.enteredReason = text;
        }
    }
    completeConfirmation(data, _item) {
        const dialogConfig = new MatDialogConfig();
        dialogConfig.disableClose = true;
        dialogConfig.data = {
            action: 'complete',
            deleteId: data.data[Object.keys(data.data)[0]].id,
            message: 'Are you sure you want to complete?',
            url: DynamicSearchURL.EndPoints.formResponse.delete.replace('{id}', data.data[Object.keys(data.data)[0]].id),
            portConfig: null,
            successMsg: 'Data completed Successfully',
            data: data.data
        };
        const ref = this.dialog.open(DeleteComponent, dialogConfig);
        ref.afterClosed().subscribe(() => {
            this.getGrid();
        });
    }
    closePopup() {
        this.editPopUpDialogRef.close();
    }
    popup(data, action) {
        const table_name = this.searchparams.tableschemaconfig.tablelist[0];
        const tabdata = data;
        const value = tabdata ? tabdata[table_name] : '';
        this.targetPage(value, action);
        // } else {
        //   this.popupDialogRef = this.dialog.open(this.callDialogPopup);
        //   // tslint:disable-next-line: prefer-for-of
        //   this.popupData = data;
        // }
    }
    closeDialogPopup() {
        this.popupDialogRef.close();
    }
    showIcon(data) {
        if (data.data.timeleft) {
            if (data.data.timeleft.includes(' ')) {
                let timeleft = data.data.timeleft.split(' ');
                timeleft = timeleft[0];
                if (timeleft < 0) {
                    return true;
                }
            }
            else if (data.data.timeleft.includes(':')) {
                let timeleft = data.data.timeleft.split(':');
                timeleft = timeleft[0];
                if (timeleft < 0 || (timeleft == '-00' && timeleft.indexOf('-') != -1)) {
                    return true;
                }
            }
            else {
                return false;
            }
        }
        return false;
    }
    splitingData(data, splitter = ',') {
        if (data.data.narrative) {
            const detail = data.data.narrative;
            const div = document.createElement('div');
            div.innerHTML = detail;
            ///.join("<br/>")
            const finalString = div.innerText.split(splitter);
            for (let i = 0; i < finalString.length; i++) {
                finalString[i] = finalString[i].toLowerCase();
                finalString[i] = finalString[i][0].toUpperCase() + finalString[i].substring(1, 2);
            }
            return finalString.join('<br/>');
        }
        return '';
    }
    getTitleClass(title) {
        if (title) {
            return title.split(' ').join('').toLowerCase();
        }
        return '';
    }
    changeStatusColor(value) {
        if (value === 'Completed') {
            return 'completed';
        }
        else if (value === 'Draft') {
            return 'draft';
        }
        else if (value === 'Open') {
            return 'open';
        }
        else if (value === 'Closed') {
            return 'closed';
        }
        else if (value === 'Pending') {
            return 'pending';
        }
        else if (value === 'Pending Approval' || value === 'In-Progress') {
            return 'pending-approval';
        }
        else if (value === 'Approved' || value === 'Accepted - Screen In') {
            return 'approved';
        }
        else if (value === 'Return to Worker' || value === 'Returned') {
            return 'returned';
        }
        return '';
    }
    titleCaseToolTip(value) {
        return value[0].toUpperCase() + value.slice(1);
    }
    closeForm() {
        this.item = null;
    }
    downloadFileInternally(s3BucketUrlName, filename) {
        const a = document.createElement('a');
        a.href = s3BucketUrlName.trim();
        a.download = filename || 'download';
        a.click();
        a.remove();
    }
    /* for Grid Selection enable/disable */
    getGridSelection(item) {
        if (item === true) {
            return 'multiple';
        }
        return 'none';
    }
    startScheduling(id, url = null) {
        if (url) {
            this.dynamicSearchService.startScheduling({}, url.replace('{id}', id)).subscribe(() => {
                this.alertService.success('Report Triggered Successfully');
            }, _error => {
                this.alertService.success('Report Trigger failed. Try Again!');
            });
        }
        else {
            this.dynamicSearchService.startSchedulingNoUrl({}, id).subscribe(() => {
                this.alertService.success('Report Triggered Successfully');
            }, _error => {
                this.alertService.success('Report Trigger failed. Try Again!');
            });
        }
    }
    customSave = (state) => {
        for (const item in state) {
            if (item !== 'columns')
                delete state[item];
        }
        this.gridConfig.pageSize = this.dataGrid.instance.pageSize();
        const prevWidth = this.columnWidth;
        this.columnWidth = state;
        const validatePageId = this.sequenceId === Number(this.route.snapshot.paramMap.get('pageId'));
        const validate = JSON.stringify(prevWidth) === JSON.stringify(this.columnWidth);
        if (validatePageId) {
            if (state?.columns != undefined) {
                state.columns.forEach((stateColumn) => {
                    const configItem = this.gridConfig.gridConfigFormArray.find(c => c.columnDef === stateColumn.dataField && !c.hide);
                    if (configItem) {
                        configItem.width = stateColumn.width;
                        configItem.filterValues = stateColumn.filterValues;
                        configItem.sortOrder = stateColumn.sortOrder;
                        configItem.sortIndex = stateColumn.sortIndex;
                        configItem.visible = stateColumn.visible ?? true;
                        configItem.visibleIndex = stateColumn.visibleIndex;
                        configItem.filterValue = stateColumn.filterValue;
                        configItem.filterType = stateColumn.filterType;
                        configItem.selectedFilterOperation = stateColumn.selectedFilterOperation;
                    }
                });
                if (this.screenWidth > 1025) {
                    this.columns = this.gridConfig.gridConfigFormArray;
                }
                const body = {
                    type: 'PAGE',
                    mappedid: this.currentPageId,
                    config: JSON.stringify(this.gridConfig)
                };
                this.dynamicSearchService.saveGridUserPreference(body).subscribe(() => {
                    // This is intentional
                });
            }
            // const body = {
            //   type: 'PAGE',
            //   mappedid: this.currentPageId,
            //   config: JSON.stringify(this.gridConfig)
            // };
            // this.dynamicSearchService.saveGridUserPreference(body).subscribe(() => {
            //   // This is intentional
            // });
        }
    };
    columnChooserClick() {
        this.dataGrid.instance.showColumnChooser();
    }
    contentReady = e => {
        const componentInstance = e.component.instance();
        const currentColumns = componentInstance.option('columns');
        if (this.gridConfig && this.gridConfig.userPreferenceGridConfig) {
            if (this.gridConfig.pageSize) {
                this.currentPageSize = this.gridConfig.pageSize;
            }
            let changesMade = false;
            currentColumns.forEach((column, index) => {
                const configItem = this.gridConfig.userPreferenceGridConfig.find(c => c.columnDef === column.dataField);
                if (configItem) {
                    const targetVisibility = configItem.hide ? false : (configItem.visible === "" ? true : configItem.visible);
                    if (column.visible !== targetVisibility) {
                        changesMade = true;
                        currentColumns[index].visible = targetVisibility;
                    }
                    // Check and update the visibleIndex if different
                    if (column.visibleIndex !== configItem.visibleIndex) {
                        changesMade = true;
                        currentColumns[index].visibleIndex = configItem.visibleIndex;
                    }
                }
            });
            if (changesMade) {
                componentInstance.option('columns', currentColumns);
            }
            this.isInitialLoad = false;
            this.isResize = false;
            this.isUserPreferenceChange = false;
        }
    };
    getVisabilityByChoosableProp(chooser, visible) {
        if (chooser) {
            return visible;
        }
        else {
            return true;
        }
    }
    getSortOrder(defaultSortColumn, defaultSortType, columnDef) {
        if (defaultSortColumn && defaultSortType) {
            return defaultSortColumn === columnDef ? defaultSortType : '';
        }
        return '';
    }
    goBack() {
        this.location.back();
    }
    showGridActions(updateGrid, showActionColumn, gridType) {
        const gridActions = updateGrid?.gridActionFormArray
            ? updateGrid?.gridActionFormArray.filter(x => x.action?.toLowerCase() !== 'add')
            : [];
        const hiddenColumns = gridActions?.filter(a => a?.hide);
        return (gridActions.length > 0 &&
            showActionColumn &&
            gridType != 'view' &&
            hiddenColumns.length !== gridActions.length);
    }
    changeFilterOptions(e) {
        this.filterOptionsDropdown.close(e.originalEvent);
        this.isUserPreferenceChange = true;
        this.setPermissions(e.itemValue);
    }
    setPermissions(modal) {
        const [code, value] = modal.split('-');
        const isExist = this.gridConfig.gridConfigFormArray.filter(c => c.columnDef === code && !!c[value]);
        if (isExist.length === 0) {
            this.gridConfig.gridConfigFormArray.map((c) => {
                c[value] = c.columnDef === code ? true : c[value];
                if (c.columnDef === code) {
                    c?.selected?.push(value);
                }
                return c;
            });
        }
        else {
            this.setSelectedGridForm(code, value);
        }
        this.columns = this.gridConfig.gridConfigFormArray;
        this.updateUserGridConfig();
    }
    onResize() {
        const prevWidth = this.screenWidth;
        this.screenWidth = window.innerWidth;
        this.columns = this.gridConfig.gridConfigFormArray;
        if (this.screenWidth < 767) {
            const mobileColumns = this.gridConfig.gridConfigFormArray.filter(c => c.mobileView);
            this.checkOnresize(mobileColumns);
            // this.columns = this.gridConfig.gridConfigFormArray;
        }
        else if (this.screenWidth >= 768 && this.screenWidth < 990) {
            const tabColumns = this.gridConfig.gridConfigFormArray.filter(c => c.tabView);
            if (tabColumns.length) {
                this.columns = this.gridConfig.gridConfigFormArray.filter(x => x.tabView);
            }
            else {
                // const maxVisibleCount = 5;
                // const visibleCount = 0;
                this.columns = this.gridConfig.gridConfigFormArray.filter((t, i) => i < 3);
            }
            // this.columns = this.gridConfig.gridConfigFormArray;
        }
        else if (prevWidth && prevWidth !== this.screenWidth) {
            //to fix loading issue when changing from mobile to web/tab view
            this.columns = this.gridConfig.gridConfigFormArray;
            // this.columns = this.checkGridConfig;
            this.getUserGridConfig();
            // window.location.reload();
        }
    }
    checkOnresize(mobileColumns) {
        if (mobileColumns.length) {
            this.columns = this.gridConfig.gridConfigFormArray.filter(x => x.mobileView);
        }
        else {
            // const maxVisibleCount = 3;
            // const visibleCount = 0;
            this.columns = this.gridConfig.gridConfigFormArray.filter((m, i) => i < 3);
        }
    }
    setSelectedGridForm(code, value) {
        this.gridConfig.gridConfigFormArray.map(c => {
            c[value] = c.columnDef === code ? '' : c[value];
            if (c.columnDef === code && c.selected) {
                c.selected = c.selected.filter(s => s !== value);
                // c?.selected?.map((m, i) => {
                //   m === value && c.selected.splice(i, 1);
                // });
            }
            return c;
        });
    }
    updateUserGridConfig() {
        const body = {
            type: 'PAGE',
            mappedid: this.currentPageId,
            config: JSON.stringify(this.gridConfig)
        };
        if (this.screenWidth > 990) {
            this.dynamicSearchService.saveGridUserPreference(body).subscribe(_res => {
                this.getUserGridConfig();
            });
        }
    }
    getUserGridConfig() {
        this.dataGrid.instance.clearFilter();
        this.dynamicSearchService.getGridUserPreference(this.currentPageId).subscribe((res) => {
            if (res.data && res.data?.config) {
                const configArray = typeof res.data.config === "string" ? JSON.parse(res.data.config) : res.data.config;
                if (configArray && configArray.gridConfigFormArray) {
                    const userPreferenceGridConfig = this.applyUserPreference(this.tempaConfig.gridConfigFormArray, configArray.gridConfigFormArray);
                    configArray.userPreferenceGridConfig = userPreferenceGridConfig;
                    configArray.gridConfigFormArray = userPreferenceGridConfig;
                    this.gridConfig = configArray;
                    this.columnHeader = configArray.gridConfigFormArray.map(column => column?.header);
                    this.columns = configArray.gridConfigFormArray;
                    // this.checkGridConfig = configArray.gridConfigFormArray;
                    this.isDeleteRequire = configArray?.isDeleteRequire;
                    this.isEditThresholdRequire = configArray?.isEditThresholdRequire;
                    this.isDeleteTime = configArray?.isDeleteTime;
                    // const storedTabData = JSON.parse(JSON.parse(this.storage.getItem('dynamic-tab-pages')));
                    const storedTabData = JSON.parse(JSON.parse(this.storage.getItem(STORAGE_KEY_DYNAMIC_TAB_PAGES)));
                    storedTabData?.map(item => {
                        this.columns.map(item1 => {
                            if (item.pfield == item1.columnDef) {
                                item1.link = item.pfield;
                            }
                        });
                    });
                    this.columns.map(c => {
                        c?.selected?.map(s => Object.assign({ col_ref: `${c.columnDef}-${s}` }, c));
                    });
                    const options = [];
                    const arr = [];
                    configArray.gridConfigFormArray.map(a => {
                        options.push({
                            columnName: a.header,
                            items: this.gridOptions.map(p => ({
                                id: `${a.columnDef}-${p.value}`,
                                label: p.label,
                                value: p.value,
                                code: a.columnDef,
                                active: a[p.value] !== '' ? true : ''
                            }))
                        });
                        a?.selected?.map(r => arr.push(`${a.columnDef}-${r}`));
                    });
                    this.columnsFilteration();
                    this.onResize();
                    this.filterOptions = options;
                    this.filterForm?.patchValue({ selectedFilter: arr });
                }
                else {
                    this.patchMultipleOptions();
                }
            }
            else {
                this.patchMultipleOptions();
            }
        });
    }
    applyUserPreference(gridConfig, userPreferenceConfig) {
        const options = ['width', 'filterValues', 'sortOrder', 'sortIndex', 'visible', 'visibleIndex', 'filterValue', 'filterType', 'selectedFilterOperation'];
        for (const column of gridConfig) {
            const columnPreferences = userPreferenceConfig.find(preferenceColumn => preferenceColumn.columnDef === column.columnDef);
            if (columnPreferences) {
                for (const option of options) {
                    if (option === 'visibleIndex' && columnPreferences.hide) {
                        delete column[option];
                    }
                    else if (columnPreferences.hasOwnProperty(option)) {
                        column[option] = columnPreferences[option];
                    }
                }
            }
        }
        return this.assignVisibleIndexes(gridConfig);
    }
    assignVisibleIndexes(gridConfig) {
        const visibleColumns = gridConfig?.length && gridConfig?.filter(col => !col.hide)?.sort((a, b) => a.visibleIndex - b.visibleIndex) || [];
        const nonVisibleColumns = gridConfig?.length && gridConfig?.filter(col => col.hide || col?.visibleIndex < 0)?.sort((a, b) => a.visibleIndex - b.visibleIndex) || [];
        if (visibleColumns && visibleColumns.length) {
            for (const [index, column] of visibleColumns.entries()) {
                column.visibleIndex = index;
            }
        }
        if (nonVisibleColumns && nonVisibleColumns.length) {
            for (const [index, column] of nonVisibleColumns.entries()) {
                column.visibleIndex = visibleColumns?.length + (index + 1);
            }
        }
        return [...visibleColumns, ...nonVisibleColumns];
    }
    patchMultipleOptions() {
        if (this.tempaConfig && this.tempaConfig.gridConfigFormArray) {
            this.columnHeader = this.tempaConfig.gridConfigFormArray.map(column => column.header);
            this.gridConfig = this.tempaConfig;
            this.columns = this.tempaConfig.gridConfigFormArray;
            this.columns.map(c => {
                c?.selected?.map(s => Object.assign({ col_ref: `${c.columnDef}-${s}` }, c));
            });
            const options = [];
            const arr = [];
            this.tempaConfig.gridConfigFormArray.map(grid => {
                options.push({
                    columnName: grid.header,
                    items: this.gridOptions.map(p => ({
                        id: `${grid.columnDef}-${p.value}`,
                        label: p.label,
                        value: p.value,
                        code: grid.columnDef,
                        active: grid[p.value] !== '' ? true : ''
                    }))
                });
                grid?.selected?.map(r => arr.push(`${grid.columnDef}-${r}`));
            });
            this.columnsFilteration();
            this.onResize();
            this.filterOptions = options;
            this.filterForm.patchValue({ selectedFilter: arr });
        }
    }
    columnsFilteration() {
        this.columns = this.columns.map(x => {
            if (x['concatenate']) {
                const columnName = x.header.toLowerCase();
                const cName = columnName.replace(/ /g, '_');
                x.columnDef = `alias.${cName}`;
                return x;
            }
            else {
                return x;
            }
        });
    }
    customEvent(event) {
        this._formIO.customEvent(event, this.formIO);
    }
    onExporting(e) {
        const pageName = this.storage.getObj(FILE_EXPORT_NAME_KEY);
        const currentDate = moment().format('YYYY-MM-DD');
        let fileName;
        if (pageName) {
            fileName = `${pageName} ${currentDate}`;
        }
        else {
            fileName = `Data-Grid ${currentDate}`;
        }
        e.component.columnOption('Action', 'visible', false);
        if (e.format === 'pdf') {
            const doc = new jsPDF.jsPDF();
            exportDataGridToPdf({
                jsPDFDocument: doc,
                component: e.component,
                customizeCell: grid => {
                    grid.pdfCell.wordWrapEnabled = true;
                }
            }).then(() => {
                doc.save(`${fileName}.pdf`);
                e.component.columnOption('Action', 'visible', true);
            });
        }
        else if (e.format === 'xlsx') {
            e.fileName = fileName;
            setTimeout(() => {
                e.component.columnOption('Action', 'visible', true);
            }, 500);
        }
    }
    ngOnDestroy() {
        this.storage.removeItem(FILE_EXPORT_NAME_KEY);
        if (this.eventSubscription) {
            this.eventSubscription.unsubscribe();
        }
    }
    getTitle(c) {
        return c ? c : false;
    }
    onCellPrepared(e) {
        if (e.rowType == 'data' &&
            e.data.businessRules.length > 0 &&
            e.column.dataField === e.data.businessRules[0].name) {
            const element = e.cellElement;
            const rules = '<em class="RULES" aria-hidden="true"></em>'.replace('RULES', e.data.businessRules[0].style ? e.data.businessRules[0].style : '');
            const livetext = document.createElement('div');
            element.classList.add('business-group');
            livetext.classList.add('business-alert');
            livetext.classList.add('ml-2');
            livetext.innerHTML = rules;
            element.appendChild(livetext);
        }
    }
    toggleShowMore(value, columnDef) {
        const key = this.getToggleKey(value, columnDef);
        // Check if the length of the value exceeds 60
        if (value.length > this.truncateTextValue) {
            // If "Show More" is active, return the full value; otherwise, return the truncated value
            if (this.showMoreText[key]) {
                return value; // Show full value
            }
            else {
                return value.substring(0, this.truncateTextValue).trim() + '...'; // Truncate and add ellipsis
            }
        }
        return value;
    }
    toggleShowMoreState(value, columnDef) {
        const key = this.getToggleKey(value, columnDef);
        this.showMoreText[key] = !this.showMoreText[key];
    }
    getToggleKey(value, columnDef) {
        return `${value}_${columnDef}`;
    }
    onRowPrepared(e) {
        if (e.rowType == 'data' &&
            this.updateGrid?.highlightRow?.columnName &&
            this.updateGrid?.highlightRow?.columnName?.split('.').length &&
            e.data[this.updateGrid?.highlightRow?.columnName.split('.')[0]][this.updateGrid?.highlightRow?.columnName.split('.')[1]] == this.updateGrid?.highlightRow?.columnValue) {
            e.rowElement.style.backgroundColor = this.updateGrid?.highlightRow?.color;
            e.rowElement.className = e.rowElement.className.replace('dx-row-alt', '');
        }
    }
    onCellClick(e) {
        e?.data?.routedata.map(n => {
            if (n?.pfield == e?.column?.dataField) {
                this.paramvalue = e?.value;
                const [tableName] = n?.pfield.split('.');
                this.paramfield = n?.field;
                this.tablefield = tableName;
                this.toTabId = n?.id;
            }
        });
        if (this.toTabId) {
            this.dynamicTabPageService.getDynamicPage(this.toTabId).subscribe((res) => {
                if (res?.data.length > 0) {
                    const pageid = res?.data[0]?.activeVersion.id;
                    const currentURL = this.router.url;
                    const newurl = currentURL.replace(/[^/]*$/, '/' + pageid);
                    if (this.selectedCaption == 'action' || this.selectedCaption == 'Action') {
                        this.router.navigate([newurl]);
                    }
                    else {
                        const horizantalTabFilter = this.localstore.getItem(FILTER_ID_KEY);
                        if (horizantalTabFilter) {
                            this.localstore.removeItem(FILTER_ID_KEY);
                        }
                        this.localstore.setObj('HorizantalPageId', pageid);
                        this.localstore.setObj(FILTER_ID_KEY, {
                            id: this.paramvalue,
                            table: this.tablefield,
                            field: this.paramfield
                        });
                        this.openTab = true;
                    }
                    setTimeout(() => {
                        this.paramvalue = undefined;
                    }, 5000);
                }
            });
        }
    }
    // }
    async targetPage(value, targetValue) {
        const targetURLValue = targetValue?.link;
        if (this.localstore.getObj(LOCAL_STORAGE_KEY)) {
            this.localstore.removeItem(LOCAL_STORAGE_KEY);
        }
        await this.getVersionList(targetURLValue, value, targetValue);
    }
    async getVersionList(value, numericValue, action) {
        this.pageBuilderService.getVersionList(value).subscribe(res => {
            if (res.data && res.data.length) {
                this.localstore.setObj(FILE_EXPORT_NAME_KEY, res.data[0]?.pagename);
                this.pageList = res.data;
                this.totalcount = this.pageList.length ? this.pageList.length : 0;
                const filterTags = action;
                const filterValue = filterTags?.filterBy?.split('.');
                if (filterValue != '' && filterValue) {
                    const rowValue = numericValue[filterValue[1]];
                    this.localstore.setObj(LOCAL_STORAGE_KEY, { id: rowValue, table: filterValue[0], field: filterValue[1] });
                }
                if (this.pageList[0].tabconfig)
                    this.localstore.setObj(STORAGE_KEY_DYNAMIC_TAB_PAGES, this.pageList[0].tabconfig);
                this.localstore.setObj('titletab', numericValue);
                if (filterTags?.action == 'edit') {
                    this.localstore.setObj('editValue', numericValue);
                }
                else {
                    this.localstore.removeItem('editValue');
                }
                if (value) {
                    if (this.pageList[0]?.pageDetails?.pagetype == 'ATPBDM' || this.pageList[0]?.pageDetails?.pagetype == 'FFP') {
                        this.authService.setSharedMessage({ pageId: this.pageList[0].pageid });
                        if (this.selectedComponent && (this.selectedComponent.loadedFromMasterView || this.selectedComponent.loadedFromCompositePage) && this.selectedComponent.settings &&
                            this.selectedComponent.settings.mappingFormId)
                            this.store.dispatch(publishEvent({ eventName: action.action,
                                payload: { mappingFormId: this.selectedComponent.settings.mappingFormId } }));
                        else if (window.location.href.indexOf('master-view') > -1 || window.location.href.indexOf('composite-page') > -1) {
                            if (this.selectedComponent) {
                                this.localstore.setItem('compositeTitle', this.selectedComponent.settings.title);
                            }
                            this.localstore.setItem('setTabAction', action.action);
                            this.sharedService.sendMessage();
                            this.router.navigate(['form/', this.pageList[0].pageid], {
                                relativeTo: this.route
                            });
                        }
                        else {
                            this.localstore.setItem('setTabAction', action.action);
                            this.sharedService.sendMessage();
                            // this.router.navigate(['/pages/dynamicpage/page/modify/', this.pageList[0].pageid], {
                            this.router.navigate(['../../../dynamicpage/page/modify/', this.pageList[0].pageid], {
                                relativeTo: this.route
                            });
                        }
                    }
                    else {
                        this.router.navigate(['../../../dynamicpage/tab/', this.pageList[0].id], { relativeTo: this.route });
                    }
                }
            }
        });
    }
    toggleIconClass() {
        this.iconClass = 'fa fa-eye-slash';
        // }
    }
    uploadDocument(item, files) {
        this.uploadedFile = files.target.files[0];
        const pageID = this.formId ? this.formId : this.pageId;
        this.imageData = {
            contentType: this.uploadedFile.type,
            fileName: `ocr/${pageID}/${this.uploadedFile.name}`
        };
        this.attachmentService.uploadKey(this.imageData).subscribe((res) => {
            if (res.data) {
                const uploadAttachment = document.getElementById('file');
                const uploadAttachmentDetails = uploadAttachment.files[0];
                this.httpService.putupload2(res.data, uploadAttachmentDetails, uploadAttachmentDetails.type).subscribe((resp) => {
                    if (resp && resp.status == 200) {
                        const object = {
                            path: `ocr/${pageID}/${this.uploadedFile.name}`,
                            attachmenttype: this.uploadedFile.type
                        };
                        this.storage.setObj('OCRObj', JSON.stringify(object));
                        this.dataStoreService.setData('uploadFromGrid', true);
                        const navigateState = {
                            externalLink: true,
                            title: item.action[0].toUpperCase() + item.action.slice(1) + ' ' + this.fromTitle,
                            personId: null
                        };
                        const url = PAGE_MODIFY_ROUTE + item.link;
                        this.router.navigate([url], { relativeTo: this.route, state: navigateState });
                    }
                    else {
                        this.alertService.error('Something Went Wrong!');
                    }
                }, error => {
                    if (error.status == 0)
                        this.alertService.error('Something Went Wrong!');
                });
            }
        });
    }
    getDateFormat(value) {
        if (this.registrationInfo) {
            if (value === 'date' && this.registrationInfo?.datetimeformat) {
                return this.registrationInfo['datetimeformat'].split(' ')[0];
            }
            return this.registrationInfo['datetimeformat'];
        }
        return 'MM/dd/yyyy';
    }
    buildCriteria(result) {
        if (!result)
            return;
        const tableschemaconfig = typeof result.tableschemaconfig === 'string' ? JSON.parse(result.tableschemaconfig) : result.tableschemaconfig;
        if (!tableschemaconfig)
            return;
        const fieldMapping = tableschemaconfig.fieldmapping;
        if (!fieldMapping)
            return;
        this.dynamicSearch = fieldMapping.filter(e => e.criteria);
        if (!this.dynamicSearch && !this.dynamicSearch.length)
            return;
        this.tableDropDown = [
            ...new Set(this.dynamicSearch.map(e => ({
                name: e.tablename,
                value: e.tablename
            })))
        ];
        this.tableDropDown = this.removeDupliacteArrayJson(this.tableDropDown);
        this.columnDropDown = this.dynamicSearch.map(e => {
            const value = `${e.tablename}.${e.field}`;
            return {
                name: e.label,
                value,
                dataType: e.datatype,
                tableName: e.tablename
            };
        });
    }
    removeDupliacteArrayJson(values) {
        const concatArray = values.map(eachValue => Object.values(eachValue).join(''));
        return values.filter((value, index) => concatArray.indexOf(concatArray[index]) === index);
    }
    initDynamicSearch() {
        return this.gridDynamicSearchForm.get('dynamicSearchArray');
    }
    addGridDynamicSearch() {
        this.initDynamicSearch().push(this.createDynamicSearch());
        const dynamicSearch = this.gridDynamicSearchForm.controls['dynamicSearchArray'].value;
        if (dynamicSearch.length > 0) {
            this.saveButtonDisable = false;
        }
        else {
            this.saveButtonDisable = true;
        }
    }
    createDynamicSearch() {
        return this.formBuilder.group({
            tableName: ['', Validators.required],
            columnName: ['', Validators.required],
            condition: ['', Validators.required],
            datatype: [''],
            value: ['', Validators.required],
            tableDropDown: [this.tableDropDown],
            columnDropDown: [this.columnDropDown],
            conditionDropdown: []
        });
    }
    buildDynamicSearch(res) {
        return this.formBuilder.group({
            tableName: res.tableName,
            columnName: res.columnName,
            condition: res.condition,
            datatype: res.datatype,
            value: res.value,
            tableDropDown: [res.tableDropDown],
            columnDropDown: [res.columnDropDown],
            conditionDropdown: [res.conditionDropdown]
        });
    }
    removeDynamicSearch(index) {
        this.initDynamicSearch().removeAt(index);
        const dynamicSearch = this.gridDynamicSearchForm.controls['dynamicSearchArray'].value;
        if (dynamicSearch.length > 0) {
            this.saveButtonDisable = false;
        }
        else {
            this.saveButtonDisable = true;
        }
        // dynamicSearch = dynamicSearch.filter(e => e.value && e.value.trim());
        // const saveDynamicSearch = {
        //   pageId: +this.formId,
        //   criteriaId: +this.criteriaId,
        //   dynamicSearchArray: dynamicSearch
        // };
        // this.dynamicSearchService.saveCriteriaByPageId(saveDynamicSearch).subscribe(result => {
        //   const response = result['data'];
        //   this.criteriaId = response.criteriaId;
        //   this.alertService.success('Criteria deleted successfully');
        // });
    }
    resetDynamicSearch() {
        this.initDynamicSearch().clear();
        this.dynamicSearchResult = [];
        this.saveButtonDisable = true;
        this.dataSource = {
            data: [],
            totalCount: 0
        };
        this.showGridPage = false;
        this.youthSearchJson = [];
        // this.searchGrid(this.http, this.storage);
    }
    getColumnList(index, tableValue) {
        const getCurrentRow = this.initDynamicSearch().at(index);
        getCurrentRow.get('columnDropDown').patchValue([]);
        const columnArray = this.dynamicSearch
            .filter(e => e.tablename === tableValue)
            .map(e => {
            const value = `${e.tablename}.${e.field}`;
            return {
                name: e.label,
                value,
                dataType: e.datatype
            };
        });
        getCurrentRow.get('columnDropDown').patchValue(columnArray);
    }
    getConditionList(index, columnValue) {
        const getCurrentRow = this.initDynamicSearch().at(index);
        const columnDropDown = getCurrentRow.get('columnDropDown').value;
        const columnDropDownJson = columnDropDown.find(e => e.value === columnValue);
        const columnDataType = columnDropDownJson.dataType;
        const columnTableName = columnDropDownJson.tableName;
        getCurrentRow.get('conditionDropdown').patchValue([]);
        getCurrentRow.get('datatype').patchValue(columnDataType);
        getCurrentRow.get('tableName').patchValue(columnTableName);
        // getCurrentRow.get('conditionDropdown').patchValue([
        //   {
        //     name: 'Equal To',
        //     value: 'Equal_To'
        //   },
        //   {
        //     name: 'Like',
        //     value: 'Like'
        //   }
        // ]);
        if (columnDataType === 'textfield' || columnDataType === 'textarea') {
            getCurrentRow.get('conditionDropdown').patchValue([
                {
                    name: 'Equal To',
                    value: 'Equal_To'
                },
                {
                    name: 'Like',
                    value: 'Like'
                }
            ]);
        }
        else {
            getCurrentRow.get('conditionDropdown').patchValue([
                {
                    name: 'Equal To',
                    value: 'Equal_To'
                }
            ]);
        }
    }
    resetDynamicSearchValue(index) {
        const getCurrentRow = this.initDynamicSearch().at(index);
        getCurrentRow.get('value').patchValue('');
    }
    trimSpaces(element) {
        const getElement = element.controls['value'];
        const getValue = getElement.value.trim();
        getElement.setValue(getValue);
        if (!getValue.length) {
            getElement.touched = true;
            getElement.errors = true;
            /* Remove this redundant jump */
            // return;
        }
    }
    submitDynamicSearch() {
        if (!this.gridDynamicSearchForm.valid) {
            this.gridDynamicSearchForm.markAllAsTouched();
            return;
        }
        const dynamicSearch = this.gridDynamicSearchForm.controls['dynamicSearchArray'].value;
        for (let index = 0; index < dynamicSearch.length; index++) {
            const dynamicSearchElement = dynamicSearch[index];
            if (!dynamicSearchElement || !dynamicSearchElement.value.trim()) {
                this.gridDynamicSearchForm.markAllAsTouched();
                return;
            }
        }
        this.showGridPage = true;
        this.dynamicSearchResult = dynamicSearch;
        this.searchGrid(this.http, this.storage);
    }
    saveDynamicSearch() {
        if (!this.gridDynamicSearchForm.valid) {
            this.gridDynamicSearchForm.markAllAsTouched();
            return;
        }
        const dynamicSearch = this.gridDynamicSearchForm.controls['dynamicSearchArray'].value;
        if (!dynamicSearch.length) {
            this.alertService.error('Cannot save empty criteria');
            return;
        }
        for (let index = 0; index < dynamicSearch.length; index++) {
            const dynamicSearchElement = dynamicSearch[index];
            if (!dynamicSearchElement || !dynamicSearchElement.value.trim()) {
                this.gridDynamicSearchForm.markAllAsTouched();
                return;
            }
        }
        const saveDynamicSearch = {
            pageId: +this.formId,
            criteriaId: +this.criteriaId,
            dynamicSearchArray: dynamicSearch
        };
        this.dynamicSearchService.saveCriteriaByPageId(saveDynamicSearch).subscribe(result => {
            const response = result['data'];
            this.criteriaId = response.criteriaId;
            this.alertService.success('Criteria save successfully');
        });
    }
    getCriteriaByPageId() {
        return new Promise((resolve, _rejects) => {
            const pageId = this.formId;
            this.dynamicSearchService.getCriteriaByPageId(pageId).subscribe(result => {
                const response = result['data'];
                if (response && response.length > 0) {
                    const lastIndex = response.length - 1;
                    const lastResponse = response[lastIndex];
                    this.criteriaId = lastResponse.id;
                    let lastDynamicSearchArray = [];
                    if (lastResponse.dynamicSearchArray?.length) {
                        this.saveButtonDisable = false;
                        lastDynamicSearchArray = lastResponse.dynamicSearchArray;
                        lastDynamicSearchArray.forEach(element => {
                            this.initDynamicSearch().push(this.buildDynamicSearch(element));
                        });
                    }
                    this.dynamicSearchResult = lastDynamicSearchArray;
                }
                return resolve({});
            });
        });
    }
    removeAllDynamicSearchCondtion() {
        this.criteriaId = 0;
        this.initDynamicSearch().clear();
        this.saveButtonDisable = true;
        this.dynamicSearchResult = [];
        this.dynamicSearch = [];
        this.youthSearchJson = [];
        this.youthSearchBoolean = false;
    }
    checkRulesBeforeActions(data, item) {
        const pageData = {
            pageid: this.pageId,
            action: item.action,
            pageData: data?.pageData,
            currentUser: this.user,
            primary: data?.data?.primaryColumn,
            rowData: data?.data,
            gridaction: item
        };
        return this.dynamicSearchService.checkRulesInWorkflow(pageData).pipe(map((result) => {
            if (result.data) {
                if (result.data.type === 'VALIDATION') {
                    if (result.data.permission === 'ALLOWED') {
                        return true;
                    }
                    else if (result.data.permission === 'CONFIRMATION') {
                        this.businessRuleMessage = result.data?.message;
                        this.gridActionParams = { data, item };
                        $('#confirmGridAction').modal('show');
                        return false;
                    }
                    else if (result.data.permission === 'DENIED') {
                        this.alertService.error(result.data.message);
                        return false;
                    }
                }
                else if (result.data.type === 'REDIRECTION') {
                    if (result.data.route) {
                        this.router.navigateByUrl(result.data.route);
                        return false;
                    }
                }
            }
            return true;
        }));
    }
    confirmGridAction() {
        this.getActionRoutes(this.gridActionParams.data, this.gridActionParams.item);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSearchCleanupComponent, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i1.ActivatedRoute }, { token: i0.ChangeDetectorRef }, { token: i2.UntypedFormBuilder }, { token: i3.FormioService }, { token: i4.LocalStorageService }, { token: i2.UntypedFormBuilder }, { token: i5.Store }, { token: i6.PlatformDataStoreService }, { token: i7.SharedService }, { token: i8.ConfigService }, { token: MAT_DIALOG_DATA, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicSearchCleanupComponent, selector: "app-dynamic-searchcleanup", inputs: { formId: "formId", pageId: "pageId", componentId: "componentId" }, outputs: { outerRouting: "outerRouting" }, host: { listeners: { "window:resize": "onResize($event)" } }, viewQueries: [{ propertyName: "searchcriteriamenutrigger", first: true, predicate: ["searchcriteriamenutrigger"], descendants: true }, { propertyName: "dataGrid", first: true, predicate: DxDataGridComponent, descendants: true }, { propertyName: "callDialogPopup", first: true, predicate: ["callDialogPopup"], descendants: true }, { propertyName: "formIO", first: true, predicate: ["formIO"], descendants: true }, { propertyName: "filterOptionsDropdown", first: true, predicate: MultiSelect, descendants: true }, { propertyName: "DeleteGridList", first: true, predicate: ["DeleteGridList"], descendants: true }, { propertyName: "DeleteGridListWithoutReason", first: true, predicate: ["DeleteGridListWithoutReason"], descendants: true }, { propertyName: "ApproveDeleteGridList", first: true, predicate: ["ApproveDeleteGridList"], descendants: true }], ngImport: i0, template: "<app-alert></app-alert>\r\n<div [class]=\"userAction === 'view' ? 'readOnlyCard' : ''\">\r\n  <div *ngIf=\"header\">\r\n    <table class=\"table table-bordered\" aria-describedby=\"border\">\r\n      <thead>\r\n        <tr>\r\n          <th *ngFor=\"let item of titletab | keyvalue\">{{ item.key }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td *ngFor=\"let item of titletab | keyvalue\">{{ item.value }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n\r\n  <p-accordion class=\"w-full dynamic-search\" [activeIndex]=\"1\" iconPos=\"endVal\"\r\n    *ngIf=\"dynamicSearch && dynamicSearch.length > 0\">\r\n    <p-accordionTab>\r\n      <ng-template pTemplate=\"header\">\r\n        <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n          <span class=\"font-bold\">Quick Search</span>\r\n        </span>\r\n      </ng-template>\r\n      <div class=\"d-flex my-2 row\">\r\n        <div class=\"col-12 text-md-right\">\r\n          <button type=\"button\" title=\"Add New\" pripple class=\"p-ripple p-element btn btn-primary btn-icon\"\r\n            (click)=\"addGridDynamicSearch()\">\r\n            <em class=\"pi pi-plus font-weight-bold\"></em>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <form [formGroup]=\"gridDynamicSearchForm\">\r\n        <ng-container formArrayName=\"dynamicSearchArray\">\r\n          <div *ngFor=\"let dynamicSearchItem of initDynamicSearch().controls; let dynamicSearchIndex = index\"\r\n            [formGroupName]=\"dynamicSearchIndex\">\r\n            <div class=\"row rbac-card\">\r\n              <div class=\"col-md-11 col-12 pr-0\">\r\n                <div class=\"row\">\r\n                  <!-- <div class=\"col-lg-3 col-md-6 col-12 mb-3\"> -->\r\n                  <!--   <label class=\"referral-form-labels\" for=\"tableList\">Table</label> -->\r\n                  <!--   <p-dropdown -->\r\n                  <!--     [options]=\"dynamicSearchItem.get('tableDropDown')?.value\" -->\r\n                  <!--     optionLabel=\"name\" -->\r\n                  <!--     optionValue=\"value\" -->\r\n                  <!--     id=\"tableList_{{ dynamicSearchIndex }}\" -->\r\n                  <!--     placeholder=\"Select Table\" -->\r\n                  <!--     formControlName=\"tableName\" -->\r\n                  <!--     tabindex=\"0\" -->\r\n                  <!--     styleClass=\"w-100\" -->\r\n                  <!--     (onChange)=\"getColumnList(dynamicSearchIndex, dynamicSearchItem.get('tableName')?.value)\"> -->\r\n                  <!--   </p-dropdown> -->\r\n                  <!--   <span -->\r\n                  <!--     class=\"text-danger error-text\" -->\r\n                  <!--     *ngIf=\" -->\r\n                  <!--       dynamicSearchItem.get('tableName')?.hasError('required') && -->\r\n                  <!--       dynamicSearchItem.get('tableName')?.touched -->\r\n                  <!--     \" -->\r\n                  <!--     >Please Select Table Name</span -->\r\n                  <!--   > -->\r\n                  <!-- </div> -->\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels\" for=\"columnList\">Column <span\r\n                        class=\"requiredfield text-danger\">*</span></label>\r\n                    <p-dropdown [options]=\"dynamicSearchItem.get('columnDropDown')?.value\"\r\n                      id=\"columnList_{{ dynamicSearchIndex }}\" optionLabel=\"name\" optionValue=\"value\"\r\n                      placeholder=\"Select Column\" formControlName=\"columnName\" tabindex=\"0\" styleClass=\"w-100\"\r\n                      (onChange)=\"getConditionList(dynamicSearchIndex, dynamicSearchItem.get('columnName')?.value)\">\r\n                    </p-dropdown>\r\n                    <span class=\"text-danger error-text\" *ngIf=\"\r\n                        dynamicSearchItem.get('columnName')?.hasError('required') &&\r\n                        dynamicSearchItem.get('columnName')?.touched\r\n                      \">Please Select Column Name</span>\r\n                  </div>\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels\" for=\"conditionList\">Condition <span\r\n                        class=\"requiredfield text-danger\">*</span></label>\r\n                    <p-dropdown [options]=\"dynamicSearchItem.get('conditionDropdown')?.value\"\r\n                      id=\"conditionList_{{ dynamicSearchIndex }}\" optionLabel=\"name\" optionValue=\"value\"\r\n                      placeholder=\"Select Condition\" formControlName=\"condition\" tabindex=\"0\" styleClass=\"w-100\"\r\n                      (onChange)=\"resetDynamicSearchValue(dynamicSearchIndex)\">\r\n                    </p-dropdown>\r\n                    <span class=\"text-danger error-text\" *ngIf=\"\r\n                        dynamicSearchItem.get('condition')?.hasError('required') &&\r\n                        dynamicSearchItem.get('condition')?.touched\r\n                      \">Please Select Condition</span>\r\n                  </div>\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels\" for=\"valueList\">Value <span\r\n                        class=\"requiredfield text-danger\">*</span></label>\r\n                    <input type=\"text\" class=\"p-inputtext w-100\" id=\"valueList\" formControlName=\"value\"\r\n                      placeholder=\"\" />\r\n                    <span class=\"text-danger error-text\" *ngIf=\"\r\n                        dynamicSearchItem.get('value')?.hasError('required') && dynamicSearchItem.get('value')?.touched\r\n                      \">Please Fill Value</span>\r\n                  </div>\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels d-md-block d-none\" for=\"deleteDynamicSearch\">&#160;</label>\r\n                    <span class=\"material-symbols-outlined text-danger delete-icon\" role=\"button\"\r\n                      id=\"deleteDynamicSearch\" (click)=\"removeDynamicSearch(dynamicSearchIndex)\"\r\n                      title=\"Delete\">delete</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- <div\r\n                class=\"col-md-1 col-12 mb-3 text-md-center d-md-flex align-items-md-center justify-content-md-center flex-column\">\r\n                <label class=\"referral-form-labels d-md-block d-none\" for=\"deleteDynamicSearch\">&#160;</label>\r\n                <span class=\"material-symbols-outlined text-danger\" role=\"button\" id=\"deleteDynamicSearch\"\r\n                  (click)=\"removeDynamicSearch(dynamicSearchIndex)\" title=\"Delete\">delete</span>\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeDynamicSearch()\">Delete</button>\r\n              </div> -->\r\n            </div>\r\n          </div>\r\n          <div class=\"row d-flex flex-column align-self-end\">\r\n            <div class=\"col-md-12 text-md-right mt-2\">\r\n              <!-- <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"saveDynamicSearch()\"\r\n                [disabled]=\"saveButtonDisable\">\r\n                Save\r\n              </button> -->\r\n              <button type=\"button\" class=\"btn btn-cancel\" (click)=\"resetDynamicSearch()\">Clear</button>\r\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitDynamicSearch()\"\r\n                [disabled]=\"saveButtonDisable\">Search</button>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </form>\r\n    </p-accordionTab>\r\n  </p-accordion>\r\n  <div class=\"page-wrp mt-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <!-- <div *ngIf=\"true\">\r\n          <div class=\"d-flex\" [formGroup]=\"filterForm\" *ngIf=\"gridType !== 'view'\">\r\n            <div class=\"col-md-12\">\r\n              <p-multiSelect [options]=\"filterOptions\" styleClass=\"filterOptions\" [group]=\"true\"\r\n                selectedItemsLabel=\"{0} items selected\" defaultLabel=\"Select\" optionLabel=\"label\" optionValue=\"id\"\r\n                id=\"filteroptions\" ariaFilterLabel=\"searchbox\" formControlName=\"selectedFilter\"\r\n                (onChange)=\"changeFilterOptions($event)\">\r\n                <ng-template let-group pTemplate=\"group\">\r\n                  <div class=\"flex align-items-center\">\r\n                    <span>{{ group.columnName }}</span>\r\n                  </div>\r\n                </ng-template>\r\n              </p-multiSelect>\r\n            </div>\r\n          </div>\r\n        </div> -->\r\n        <button *ngIf=\"gridType === 'view'\" type=\"button\" class=\"btn btn-cancel mb-3\" (click)=\"goBack()\">Back</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 text-right\">\r\n        <div class=\"d-flex justify-content-between align-items-center col-12\" *ngIf=\"getTitle(updateGrid?.gridTitle)\">\r\n          <h6 class=\"font-weight-bold mb-0\"></h6>\r\n\r\n          <div class=\"d-flex inmate-btn-align\">\r\n            <button class=\"btn-print my-2\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\"\r\n              *ngIf=\"showExport\">\r\n              <img class=\"export\" src=\"../../../assets/images/svg/Export_Icon.svg\" alt=\"export\" />\r\n            </button>\r\n            <mat-menu class=\"d-inline-block my-2\" #menu=\"matMenu\" *ngIf=\"showExport\">\r\n              <button mat-menu-item (click)=\"onClose()\" *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\">\r\n                <mat-icon>{{ icon }}</mat-icon>{{ openclose }} Slidebar\r\n              </button>\r\n              <button mat-menu-item (click)=\"reset('excel')\"><mat-icon>grid_on</mat-icon> Export to Excel</button>\r\n              <button mat-menu-item (click)=\"reset('pdf')\"><mat-icon>picture_as_pdf</mat-icon> Export to PDF</button>\r\n              <button mat-menu-item (click)=\"reset('print')\"><mat-icon>print</mat-icon> Print</button>\r\n              <button mat-menu-item (click)=\"reset(pageType)\" *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\">\r\n                <mat-icon>reset_tv</mat-icon> Reset Search Criteria\r\n              </button>\r\n              <button *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\" mat-menu-item\r\n                [matMenuTriggerFor]=\"searchCriteriaList\" #searchcriteriamenutrigger=\"matMenuTrigger\">\r\n                <mat-icon>add_circle_outline</mat-icon> Save Search Criteria\r\n              </button>\r\n            </mat-menu>\r\n            <div [ngClass]=\"updateGrid && updateGrid?.chooser ? 'd-inline-block add-btn-right' : 'd-inline-block'\">\r\n              <!--Add Button, Column chooser button are replacing eachother when its selected-->\r\n              <button class=\"btn-icon-bg d-inline-block pull-right text-right ml-1 my-2\"\r\n                *ngIf=\"showGridPage && item && updateGrid?.isInitialFormLoad\" (click)=\"closeForm()\">\r\n                <em class=\"fa fa-times\"></em>\r\n              </button>\r\n              <div *ngIf=\"\r\n                  updateGrid?.gridActionFormArray !== null &&\r\n                  updateGrid?.gridActionFormArray !== undefined &&\r\n                  updateGrid?.gridActionFormArray &&\r\n                  updateGrid?.gridActionFormArray?.length\r\n                \" class=\"update-grid-action-button-container\">\r\n                <ng-container *ngFor=\"let item of updateGrid?.gridActionFormArray; let i = index\">\r\n                  <ng-container *ngIf=\"!(updateGrid?.isShowOnTop && item?.action?.toLowerCase() === 'add')\">\r\n                    <button *ngIf=\"item?.icon && item.isOutsideGrid && !item.hide\" class=\"btn btn-primary mt-2\"\r\n                      (click)=\"getOutsideGridAction(item)\">\r\n                      <em [class]=\"item.icon\"></em><span class=\"ml-2\" *ngIf=\"!!item.name\">{{ item.name }}</span>\r\n                    </button>\r\n                    <ng-container *ngIf=\"item?.icon && item.isOutsideGrid && item.type === 'Ocr Scan'\">\r\n                      <label for=\"file\" class=\"btn btn-primary mt-2\">\r\n                        <em [class]=\"item.icon\"></em><span class=\"ml-2\" *ngIf=\"!!item.name\">{{ item.name }}</span>\r\n                      </label>\r\n                      <input type=\"file\" (change)=\"uploadDocument(item, $event)\" id=\"file\" aria-hidden=\"true\"\r\n                        style=\"visibility: hidden; display: none\" />\r\n                    </ng-container>\r\n                  </ng-container>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"updateGrid && updateGrid?.chooser\" class=\"col-custom my-2\">\r\n              <button class=\"btn btn-primary btn-icon ml-1\" (click)=\"columnChooserClick()\">\r\n                <em class=\"fa fa-columns\" aria-hidden=\"true\"></em>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <button *ngIf=\"isAddButton\" type=\"button\" class=\"btn btn-primary my-2\" (click)=\"redirect()\">Add</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-menu #searchCriteriaList=\"matMenu\" class=\"searchlist\">\r\n      <div class=\"row col-sm-12 mt-4\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"col-sm-6\">\r\n          <mat-form-field>\r\n            <input matInput [(ngModel)]=\"searchCriteria\" placeholder=\"Search Criteria\" />\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"col-sm-2 mt-2\">\r\n          <button class=\"btn btn-pri\" [disabled]=\"!searchCriteria\" (click)=\"saveSearchCriteria()\">Save</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"row col-sm-12\">\r\n        <table aria-describedby=\"Search_Criteria\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Search Criteria</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody *ngIf=\"totalcount\">\r\n            <tr *ngFor=\"let sc of searchCriteriaArr\">\r\n              <td>\r\n                <mat-icon>search</mat-icon>\r\n                <a href=\"javascript:void(0)\" (click)=\"setSearch(sc.data)\">{{ sc.data.searchCriteria }}</a>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </mat-menu>\r\n    <div class=\"split-page\">\r\n      <as-split unit=\"percent\" useTransition=\"true\" direction=\"{{ layouttype }}\">\r\n        <as-split-area size=\"{{ spliterSize }}\">\r\n          <div *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\">\r\n            <div class=\"row\">\r\n              <div class=\"col-12\">\r\n                <formio #formIO [form]=\"jsonForm\" [submission]=\"submittedData\" (submit)=\"onSubmit($event)\"\r\n                  (customEvent)=\"customEvent($event)\"></formio>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </as-split-area>\r\n        <as-split-area size=\"{{ gridspliterSize }}\">\r\n          <div class=\"row\" *ngIf=\"\r\n              ((updateGrid?.isInitialFormLoad !== undefined &&\r\n                updateGrid?.isInitialFormLoad !== null &&\r\n                updateGrid?.isInitialFormLoad) ||\r\n                (updateGrid?.isShowOnTop !== undefined &&\r\n                  updateGrid?.isShowOnTop !== null &&\r\n                  updateGrid?.isShowOnTop)) &&\r\n              item\r\n            \">\r\n            <div class=\"col-12\">\r\n              <ndc-dynamic class=\"no-drag\" [ndcDynamicComponent]=\"item.component\" [ndcDynamicInputs]=\"item\"\r\n                [ndcDynamicOutputs]=\"item?.outputs\"></ndc-dynamic>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div class=\"row\" *ngIf=\"showGridPage\">\r\n              <div class=\"col-lg-12 gridview\">\r\n                <div class=\"card mb-2\">\r\n                  <div class=\"card-body {{ getTitleClass(fromTitle) }}\">\r\n\r\n                    <!-- [remoteOperations]=\"{ filtering: true, sorting: true, paging: true }\"  Removed server filtering-->\r\n                    <dx-data-grid [dataSource]=\"dataSource\" [columnMinWidth]=\"100\" [width]=\"'100%'\" [filterSyncEnabled]=\"true\" #dataGrid\r\n                      [columnResizingMode]=\"'widget'\" [allowColumnReordering]=\"true\" [allowColumnResizing]=\"true\"\r\n                      [columnAutoWidth]=\"true\" (onContentReady)=\"contentReady($event)\"\r\n                      (onCellPrepared)=\"onCellPrepared($event)\" (onRowPrepared)=\"onRowPrepared($event)\"\r\n                      (onCellClick)=\"onCellClick($event)\" (onExporting)=\"onExporting($event)\" [showBorders]=\"true\"\r\n                      [rowAlternationEnabled]=\"true\" [showColumnLines]=\"true\" [showRowLines]=\"true\">\r\n                      <dxo-selection [selectAllMode]=\"allMode\" [showCheckBoxesMode]=\"checkBoxesMode\"\r\n                        [mode]=\"getGridSelection(updateGrid?.gridSelection)\"></dxo-selection>\r\n                      <dxo-load-panel [enabled]=\"false\"></dxo-load-panel>\r\n                      <dxo-export [enabled]=\"true\" [formats]=\"['pdf', 'xlsx']\"></dxo-export>\r\n                      <dxo-filter-row [visible]=\"showFilterRowPanel\"></dxo-filter-row>\r\n                      <dxo-state-storing [enabled]=\"true\" type=\"custom\" [customSave]=\"customSave\"\r\n                        [customLoad]=\"customLoad\"></dxo-state-storing>\r\n\r\n                      <dxo-column-chooser [enabled]=\"true\" mode=\"select\">\r\n                        <dxo-position my=\"right top\" at=\"right top\" of=\".dx-datagrid-column-chooser-button\">\r\n                        </dxo-position>\r\n                      </dxo-column-chooser>\r\n\r\n                      <!--Grid - Footer filter removed -->\r\n                      <dxo-paging [pageSize]=currentPageSize></dxo-paging>\r\n                      <dxo-pager [visible]=\"true\" [showPageSizeSelector]=\"true\" [allowedPageSizes]=\"[5, 10, 15, 20]\"\r\n                        [displayMode]=\"displayMode\" [showInfo]=\"true\" [showNavigationButtons]=\"true\"></dxo-pager>\r\n                      <dxo-filter-builder-popup [position]=\"popupPosition\"> </dxo-filter-builder-popup>\r\n                      <dxo-header-filter [visible]=\"true\"></dxo-header-filter>\r\n                      <ng-container *ngFor=\"let column of columns; let i = index\">\r\n                        <ng-container *ngIf=\"column?.hide !== true\">\r\n                          <ng-container *ngIf=\"column?.link; else noLink\">\r\n                            <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                              [allowHiding]=\"!column?.Choosable\" [fixed]=\"column?.fixed\" [dataField]=\"column?.columnDef\"\r\n                              [caption]=\"column?.header\" [allowFiltering]=\"column?.filter\" cellTemplate=\"cellTemplate\"\r\n                              [allowSorting]=\"column?.sort\" [width]=\"column?.width\"\r\n                              [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\" [sortOrder]=\"column?.sortOrder\"\r\n                              [sortIndex]=\"column?.sortIndex\">\r\n                            </dxi-column>\r\n                          </ng-container>\r\n                          <ng-template #noLink>\r\n                            <ng-container *ngIf=\"column?.icon; else noShowmore\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" cellTemplate=\"iconTemplate\"\r\n                                [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                                [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noShowmore>\r\n                            <ng-container *ngIf=\"column?.showmore; else noIcon\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" cellTemplate=\"showmoreTemplate\"\r\n                                [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                                [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noIcon>\r\n                            <ng-container *ngIf=\"column?.dateFormat; else noDate\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                *ngIf=\"column?.dateFormat === 'date' || column?.dateFormat === 'datetime'\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" dataType=\"date\"\r\n                                [format]=\"getDateFormat(column?.dateFormat)\" [allowSorting]=\"column?.sort\"\r\n                                [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\" [sortOrder]=\"column?.sortOrder\"\r\n                                [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noDate>\r\n                            <ng-container *ngIf=\"column?.header.toLowerCase().trim() === 'status'; else noStatus\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" cellTemplate=\"statusTemplate\"\r\n                                [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                                [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noStatus>\r\n                            <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                              [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                              [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                              [allowFiltering]=\"column?.filter\" cellTemplate=\"dataTemplate\"\r\n                              [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                              [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                            </dxi-column>\r\n                          </ng-template>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                      <ng-container *ngIf=\"showGridActions(updateGrid, showActionColumn, gridType)\">\r\n                        <dxi-column [width]=\"120\" [allowFiltering]=\"false\" [showInColumnChooser]=\"false\"\r\n                          [allowSorting]=\"false\" caption=\"Action\" cellTemplate=\"editCellTemplate\">\r\n                        </dxi-column>\r\n                      </ng-container>\r\n                      <div *dxTemplate=\"let d of 'cellTemplate'\" class=\"dashboard-hover\">\r\n                        <a *ngIf=\"d.value && d.value !== 'null'\" (click)=\"getRouter(d, item)\">{{ d.value !== 'null' ?\r\n                          d.value : '' }}\r\n                          <span *ngIf=\"showIcon(d)\"></span>\r\n                        </a>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'iconTemplate'\">\r\n                        <span *ngFor=\"let item of d.data.rbacConditions; let i = index\">\r\n                          <em *ngIf=\"item.action !== 'add'\" [class]=\"item.icon\" (click)=\"popup(d?.key, item)\"></em>\r\n                        </span>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'showmoreTemplate'\" class=\"description-container\">\r\n                          <span>{{ toggleShowMore(d.value, d.column?.dataField) }}</span>\r\n                          <a class=\"toggle-link\" *ngIf=\"d.value.length > truncateTextValue\" (click)=\"toggleShowMoreState(d.value, d.column?.dataField)\">\r\n                            {{ showMoreText[getToggleKey(d.value, d.column?.dataField)] ? 'Show Less' : 'Show More' }}\r\n                          </a>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'editCellTemplate'\">\r\n                        <span *ngFor=\"let item of d.data.rbacConditions; let i = index\">\r\n                          <!-- Tooltip for deleted row -->\r\n                          <a *ngIf=\"\r\n                          item?.action === 'info'\"\r\n                            class=\"no-bg\"\r\n                            [matTooltip]=\"'Delete Status: Pending\\n' + item?.message\"\r\n                            [matTooltipPosition]=\"'left'\"\r\n                            [matTooltipShowDelay]=\"100\"\r\n                            [matTooltipHideDelay]=\"100\"\r\n                            [matTooltipClass]=\"'custom-tooltip-class'\">\r\n                            <em [class]=\"item.icon\"></em>\r\n                          </a>\r\n                          <a *ngIf=\"\r\n                                item?.icon &&\r\n                                item?.action !== 'info' &&\r\n                                !item.isOutsideGrid &&\r\n                                d?.data?.status !== 'Closed' &&\r\n                                item.action !== 'changepathway' &&\r\n                                !item?.hide;\r\n                              else changepathway\r\n                            \" class=\"no-bg\" matTooltip=\"{{ titleCaseToolTip(item?.action) }}\"\r\n                            (click)=\"getInsideGridAction(d, item)\">\r\n                            <em [class]=\"item.icon\" style=\"padding-right: 10px\"></em>\r\n                          </a>\r\n\r\n                          <ng-template #changepathway>\r\n                            <a *ngIf=\"item.action === 'changepathway' && d?.rowIndex === 0\" class=\"no-bg\"\r\n                              matTooltip=\"{{ item?.action }}\" (click)=\"getInsideGridAction(d, item)\">\r\n                              <em [class]=\"item.icon\" style=\"padding-right: 10px\"></em>\r\n                            </a>\r\n                          </ng-template>\r\n                        </span>\r\n                        <a *ngIf=\"updateGrid?.gridActionFormArray?.icon\" class=\"no-bg\" matTooltip=\"Open\"\r\n                          (click)=\"openLink(d)\">\r\n                          <em class=\"fa fa-external-link\"></em>\r\n                        </a>\r\n                        <a *ngIf=\"updateGrid?.edit\" class=\"no-bg\" matTooltip=\"Edit\" (click)=\"editData(d)\">\r\n                          <em class=\"fa fa-pencil\" title=\"Edit\"></em>\r\n                        </a>\r\n                        <a *ngIf=\"updateGrid?.view\" class=\"no-bg\" matTooltip=\"View\" (click)=\"viewData(d)\">\r\n                          <em class=\"fa fa-eye\" title=\"View\"></em>\r\n                        </a>\r\n                        <a *ngIf=\"updateGrid?.delete\" class=\"no-bg text-danger\" matTooltip=\"Delete\"\r\n                          (click)=\"deleteData(d)\">\r\n                          <em class=\"fa fa-trash\"></em>\r\n                        </a>\r\n                        <button *ngIf=\"updateGrid?.activeordeactive\" class=\"no-bg\" (click)=\"deleteData(d)\">\r\n                          <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 1\"\r\n                            class=\"fa fa-toggle-on\"></em>\r\n                          <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 0\"\r\n                            class=\"fa fa-toggle-off\"></em>\r\n                        </button>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'statusTemplate'\" [class]=\"changeStatusColor(d.value)\">\r\n                        <span>{{ d.value }}</span>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'dataTemplate'\"\r\n                        [ngClass]=\"{ 'dashboard-hover-contact': d.column?.dataField === 'servicename' }\">\r\n                        <div class=\"d-inline-block\" *ngIf=\"\r\n                            d.column?.dataField === 'clientaccountno' &&\r\n                            d.data.accountstatus &&\r\n                            d.data.accountstatus === 'INA'\r\n                          \">\r\n                          <em class=\"fa fa-warning red-color\"></em>\r\n                        </div>\r\n                        <div *ngIf=\"d.column?.dataField === 'servicename'\">\r\n                          <div class=\"arrow-right\" *ngIf=\"d.data.narrative\">\r\n                            <div class=\"person-details\">\r\n                              <p><span>Narrative</span><span [innerHtml]=\"splitingData(d, '.')\"></span></p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"d.column?.dataField === 'narrative'; else dataValue\">\r\n                          {{ d.value }}\r\n                        </div>\r\n                        <ng-template #dataValue>{{ d.value }}</ng-template>\r\n                      </div>\r\n                    </dx-data-grid>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </as-split-area>\r\n      </as-split>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #callDialogPopup>\r\n  <h2 matDialogTitle>Narrative</h2>\r\n  <div [innerHTML]=\"popupData\"></div>\r\n  <div class=\"text-right\">\r\n    <button mat-button (click)=\"closeDialogPopup()\" class=\"btn btn-cancel mr-2\">Close</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<app-dynamic-details *ngIf=\"openTab\" [key]=\"selectedRowData\"></app-dynamic-details>\r\n\r\n<ng-template #DeleteGridList>\r\n  <div class=\"p-3\">\r\n    <div class=\"clearfix mb-2\">{{ DefaultDeletePopupTextAftThresholdTime }}</div>\r\n    <div class=\"mb-2\">\r\n      <label for=\"reasonfordelete\" class=\"intake-form-labels clearfix mb-2\">Reason for record deletion <span\r\n          class=\"text-danger\">*</span></label>\r\n      <textarea rows=\"3\" id=\"reasonfordelete\" cols=\"30\" pInputTextarea\r\n        placeholder=\"Reason for deletion (4000 character limit)\" maxlength=\"4000\" class=\"form-control no-resize\"\r\n        [(ngModel)]=\"enteredReason\" (input)=\"checkIsDisabled($event.target.value)\"></textarea>\r\n    </div>\r\n  </div>\r\n  <div class=\"text-right pr-3\">\r\n    <button class=\"pull-right btn btn-primary delete mb-3\" (click)=\"deleteRecordWithReason()\"\r\n      [disabled]=\"isDisabled\">Yes</button>\r\n    <button class=\"pull-right mr-2 mb-3 btn bg-white text-primary btncancel\" (click)=\"cancelPopup()\">No</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #DeleteGridListWithoutReason>\r\n  <div class=\"p-3\">\r\n    <div class=\"clearfix mb-2\">{{ deletePopupText }}</div>\r\n  </div>\r\n  <div class=\"text-right pr-3\">\r\n    <button class=\"pull-right btn btn-primary delete mb-3\" (click)=\"deleteRecordWithoutReason()\">Yes</button>\r\n    <button class=\"pull-right mr-2 mb-3 btn bg-white text-primary btncancel\" (click)=\"cancelPopup()\">No</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #ApproveDeleteGridList>\r\n  <div class=\"p-3\">\r\n    <div class=\"clearfix mb-4\">{{this.deletedReason}}</div>\r\n    <!-- <div class=\"clearfix mb-4\">Do you approve this deletion?</div> -->\r\n  </div>\r\n  <div class=\"text-right pr-3\">\r\n    <button class=\"pull-right mb-2 btn btn-primary delete\" data-dismiss=\"modal\"\r\n      (click)=\"deleteRecordWithoutReason()\">Yes</button>\r\n    <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\"\r\n      (click)=\"cancelPopup()\">No</button>\r\n  </div>\r\n</ng-template>\r\n\r\n\r\n<div class=\"modal\" id=\"confirmGridAction\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <p>{{ businessRuleMessage }}</p>\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"confirmGridAction()\">\r\n            Yes\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">No</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".split-page{outline:3px}.searchlist{min-width:620px!important;height:280px!important}.searchlist table,.searchlist table tr th,.searchlist table tr td{padding:0}.card-title{position:absolute;left:15px;font-size:bold}.red-color{color:#ff6252}.dx-datagrid .dx-row>tr>td{padding:0!important}.dx-datagrid .dx-row>td{padding-bottom:2px!important;text-align:center!important;font-family:Roboto,sans-serif!important}.dx-datagrid-rowsview .dx-row{height:40px!important;font-size:var(--base-font-size)}.dx-datagrid-rowsview .dx-row.dx-row-lines>td{vertical-align:middle!important;overflow:unset;padding-left:6px!important;padding-right:6px!important}.card{box-shadow:none!important;border:none!important}.card-header{padding-left:0;background:#eff8ff;height:auto}.dx-datagrid-rowsview .dx-row.dx-row-lines:first-child,.dx-datagrid-rowsview .dx-row.dx-row-lines:first-child>td,.dx-datagrid-rowsview .dx-row.dx-row-lines:first-child>tr>td{overflow:unset!important}.dashboard-hover{position:relative}.dashboard-hover:hover .arrow-right{display:block;z-index:1}.dashboard-hover .person-details{display:inline-block;width:100%}.dashboard-hover .person-details p{margin:0}.dashboard-hover .person-details p span:first-child{width:95px;display:inline-block;vertical-align:top}.dashboard-hover .person-details p span:last-child{width:160px;word-break:break-word;display:inline-flex;overflow:hidden;white-space:normal}.dashboard-hover .person-details p span:last-child:before{content:\":\";padding-right:5px}.dashboard-hover .arrow-right{width:280px;min-height:95px;background-color:var(--bg-light);color:var(--text-dark);padding:10px;position:absolute;float:left;display:none;top:-13px;left:88px;border:1px solid var(--table-border);border-radius:6px}.dashboard-hover .arrow-right:after{content:\" \";position:absolute;margin:auto;top:13px;left:-101%;right:0;background:#fff;width:20px;height:20px;transform:rotate(45deg);-webkit-transform:rotate(135deg);-moz-transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);border-right:1px solid var(--table-border);border-bottom:1px solid var(--table-border)}.dashboard-hover-contact{position:relative}.dashboard-hover-contact:hover .arrow-right{display:block;z-index:1}.dashboard-hover-contact .person-details{display:inline-block;width:100%}.dashboard-hover-contact .person-details p{margin:0}.dashboard-hover-contact .person-details p span:first-child{width:95px;display:inline-block;vertical-align:top;word-break:break-word;white-space:normal}.dashboard-hover-contact .person-details p span:last-child{width:135px;word-break:break-word;display:inline-flex;overflow:hidden;white-space:normal;text-align:left}.dashboard-hover-contact .person-details p span:last-child:before{content:\":\";padding-right:5px}.dashboard-hover-contact .arrow-right{width:280px;min-height:50px;background-color:var(--bg-light);color:var(--text-dark);padding:10px;position:absolute;float:left;display:none;top:-13px;left:88px;border:1px solid var(--table-border);border-radius:6px}.dashboard-hover-contact .arrow-right:after{content:\" \";position:absolute;margin:auto;top:13px;left:-101%;right:0;background:#fff;width:20px;height:20px;transform:rotate(45deg);-webkit-transform:rotate(135deg);-moz-transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);border-right:1px solid var(--table-border);border-bottom:1px solid var(--table-border)}.open{color:#ff6252;border-radius:6px;font-weight:500;padding:5px!important;vertical-align:middle;min-width:85px;max-width:100%}.draft,.returned{color:red;border-radius:6px;font-weight:500;padding:5px!important;vertical-align:middle;min-width:85px;max-width:100%}.closed,.completed,.approved{color:#2ecd53;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.orange{color:orange;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.blue{color:#2c2863;border-radius:6px;font-weight:700;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.pending{color:#e29866;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.pending-approval{color:orange;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.readOnlyCard{pointer-events:none!important;opacity:.7!important}.page-wrp{background:var(--bg-light)}.page-wrp h6{color:var(--text-dark)}:host ::ng-deep .as-split-gutter{background:var(--table-header)!important}.title{font-weight:700;font-size:17px;text-transform:capitalize;color:#2c2863}.col-custom .btn-icon-bg{padding:5px 8px!important}:host ::ng-deep .split-page .card-body{padding:0 15px!important}:host ::ng-deep .filterOptions{width:250px}:host ::ng-deep .p-multiselect-items{font-size:12px}:host ::ng-deep .p-multiselect-panel .p-multiselect-header .p-multiselect-filter-container .p-inputtext{padding:.2rem .5rem}:host ::ng-deep .dashboard-hover a{color:var(--interactive-color)!important;cursor:pointer}:host ::ng-deep .dx-datagrid .dx-column-indicators{position:relative;right:1px}:host ::ng-deep .dx-datagrid .dx-toolbar-after{margin-right:5px;margin-top:5px}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content{padding:5px 6px;border-radius:3px;background-color:var(--btn)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-export{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-spindown{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-column-chooser{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-checkbox-icon{border:1px solid var(--bg-light)!important}:host ::ng-deep .dx-datagrid .business-group .dx-template-wrapper,:host ::ng-deep .dx-datagrid .business-group .business-alert{display:inline-flex}:host ::ng-deep .dynamic-search .p-component .p-accordion-toggle-icon{margin-top:-8px;position:absolute;right:.5em;top:50%;font-size:var(--font-13);color:var(--primary)}:host ::ng-deep .dynamic-search .p-component .head-text span{color:var(--primary)}:host ::ng-deep .dynamic-search .error-text{font-size:var(--font-12)}:host ::ng-deep .as-vertical .as-split-gutter{display:none!important}.no-resize{resize:none}:host ::ng-deep .custom-mat-tooltip{width:150px;font-size:var(--font-14)}:host ::ng-deep .mdc-tooltip__surface-animation{will-change:auto!important}\n"], dependencies: [{ kind: "directive", type: i9.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i10.FormioComponent, selector: "formio" }, { kind: "component", type: i11.AlertComponent, selector: "app-alert" }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "component", type: i12.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i13.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i14.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i15.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "component", type: i16.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i16.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i16.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "directive", type: i17.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i18.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "component", type: i19.DxDataGridComponent, selector: "dx-data-grid", inputs: ["accessKey", "activeStateEnabled", "allowColumnReordering", "allowColumnResizing", "autoNavigateToFocusedRow", "cacheEnabled", "cellHintEnabled", "columnAutoWidth", "columnChooser", "columnFixing", "columnHidingEnabled", "columnMinWidth", "columnResizingMode", "columns", "columnWidth", "customizeColumns", "dataRowTemplate", "dataSource", "dateSerializationFormat", "disabled", "editing", "elementAttr", "errorRowEnabled", "export", "filterBuilder", "filterBuilderPopup", "filterPanel", "filterRow", "filterSyncEnabled", "filterValue", "focusedColumnIndex", "focusedRowEnabled", "focusedRowIndex", "focusedRowKey", "grouping", "groupPanel", "headerFilter", "height", "highlightChanges", "hint", "hoverStateEnabled", "keyboardNavigation", "keyExpr", "loadPanel", "masterDetail", "noDataText", "pager", "paging", "remoteOperations", "renderAsync", "repaintChangesOnly", "rowAlternationEnabled", "rowDragging", "rowTemplate", "rtlEnabled", "scrolling", "searchPanel", "selectedRowKeys", "selection", "selectionFilter", "showBorders", "showColumnHeaders", "showColumnLines", "showRowLines", "sortByGroupSummaryInfo", "sorting", "stateStoring", "summary", "syncLookupFilterValues", "tabIndex", "toolbar", "twoWayBindingEnabled", "visible", "width", "wordWrapEnabled"], outputs: ["onAdaptiveDetailRowPreparing", "onCellClick", "onCellDblClick", "onCellHoverChanged", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDataErrorOccurred", "onDisposing", "onEditCanceled", "onEditCanceling", "onEditingStart", "onEditorPrepared", "onEditorPreparing", "onExporting", "onFocusedCellChanged", "onFocusedCellChanging", "onFocusedRowChanged", "onFocusedRowChanging", "onInitialized", "onInitNewRow", "onKeyDown", "onOptionChanged", "onRowClick", "onRowCollapsed", "onRowCollapsing", "onRowDblClick", "onRowExpanded", "onRowExpanding", "onRowInserted", "onRowInserting", "onRowPrepared", "onRowRemoved", "onRowRemoving", "onRowUpdated", "onRowUpdating", "onRowValidating", "onSaved", "onSaving", "onSelectionChanged", "onToolbarPreparing", "accessKeyChange", "activeStateEnabledChange", "allowColumnReorderingChange", "allowColumnResizingChange", "autoNavigateToFocusedRowChange", "cacheEnabledChange", "cellHintEnabledChange", "columnAutoWidthChange", "columnChooserChange", "columnFixingChange", "columnHidingEnabledChange", "columnMinWidthChange", "columnResizingModeChange", "columnsChange", "columnWidthChange", "customizeColumnsChange", "dataRowTemplateChange", "dataSourceChange", "dateSerializationFormatChange", "disabledChange", "editingChange", "elementAttrChange", "errorRowEnabledChange", "exportChange", "filterBuilderChange", "filterBuilderPopupChange", "filterPanelChange", "filterRowChange", "filterSyncEnabledChange", "filterValueChange", "focusedColumnIndexChange", "focusedRowEnabledChange", "focusedRowIndexChange", "focusedRowKeyChange", "groupingChange", "groupPanelChange", "headerFilterChange", "heightChange", "highlightChangesChange", "hintChange", "hoverStateEnabledChange", "keyboardNavigationChange", "keyExprChange", "loadPanelChange", "masterDetailChange", "noDataTextChange", "pagerChange", "pagingChange", "remoteOperationsChange", "renderAsyncChange", "repaintChangesOnlyChange", "rowAlternationEnabledChange", "rowDraggingChange", "rowTemplateChange", "rtlEnabledChange", "scrollingChange", "searchPanelChange", "selectedRowKeysChange", "selectionChange", "selectionFilterChange", "showBordersChange", "showColumnHeadersChange", "showColumnLinesChange", "showRowLinesChange", "sortByGroupSummaryInfoChange", "sortingChange", "stateStoringChange", "summaryChange", "syncLookupFilterValuesChange", "tabIndexChange", "toolbarChange", "twoWayBindingEnabledChange", "visibleChange", "widthChange", "wordWrapEnabledChange"] }, { kind: "component", type: i20.DxoColumnChooserComponent, selector: "dxo-column-chooser", inputs: ["allowSearch", "container", "emptyPanelText", "enabled", "height", "mode", "position", "search", "searchTimeout", "selection", "sortOrder", "title", "width"] }, { kind: "component", type: i20.DxoPositionComponent, selector: "dxo-position", inputs: ["at", "boundary", "boundaryOffset", "collision", "my", "of", "offset"] }, { kind: "component", type: i20.DxoSelectionComponent, selector: "dxo-selection", inputs: ["allowSelectAll", "recursive", "selectByClick", "deferred", "mode", "selectAllMode", "showCheckBoxesMode"] }, { kind: "component", type: i20.DxiColumnComponent, selector: "dxi-column", inputs: ["alignment", "allowEditing", "allowExporting", "allowFiltering", "allowFixing", "allowGrouping", "allowHeaderFiltering", "allowHiding", "allowReordering", "allowResizing", "allowSearch", "allowSorting", "autoExpandGroup", "buttons", "calculateCellValue", "calculateDisplayValue", "calculateFilterExpression", "calculateGroupValue", "calculateSortValue", "caption", "cellTemplate", "columns", "cssClass", "customizeText", "dataField", "dataType", "editCellTemplate", "editorOptions", "encodeHtml", "falseText", "filterOperations", "filterType", "filterValue", "filterValues", "fixed", "fixedPosition", "format", "formItem", "groupCellTemplate", "groupIndex", "headerCellTemplate", "headerFilter", "hidingPriority", "isBand", "lookup", "minWidth", "name", "ownerBand", "renderAsync", "selectedFilterOperation", "setCellValue", "showEditorAlways", "showInColumnChooser", "showWhenGrouped", "sortIndex", "sortingMethod", "sortOrder", "trueText", "type", "validationRules", "visible", "visibleIndex", "width"], outputs: ["filterValueChange", "filterValuesChange", "groupIndexChange", "selectedFilterOperationChange", "sortIndexChange", "sortOrderChange", "visibleChange", "visibleIndexChange"] }, { kind: "component", type: i20.DxoHeaderFilterComponent, selector: "dxo-header-filter", inputs: ["allowSearch", "allowSelectAll", "dataSource", "groupInterval", "height", "search", "searchMode", "width", "searchTimeout", "texts", "visible", "showRelevantValues"] }, { kind: "component", type: i20.DxoExportComponent, selector: "dxo-export", inputs: ["backgroundColor", "enabled", "fileName", "formats", "margin", "printingEnabled", "svgToCanvas", "allowExportSelectedData", "texts"] }, { kind: "component", type: i20.DxoFilterBuilderPopupComponent, selector: "dxo-filter-builder-popup", inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "copyRootClassesToWrapper", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "elementAttr", "enableBodyScroll", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr"], outputs: ["heightChange", "positionChange", "visibleChange", "widthChange"] }, { kind: "component", type: i20.DxoFilterRowComponent, selector: "dxo-filter-row", inputs: ["applyFilter", "applyFilterText", "betweenEndText", "betweenStartText", "operationDescriptions", "resetOperationText", "showAllText", "showOperationChooser", "visible"] }, { kind: "component", type: i20.DxoLoadPanelComponent, selector: "dxo-load-panel", inputs: ["enabled", "height", "indicatorSrc", "shading", "shadingColor", "showIndicator", "showPane", "text", "width"] }, { kind: "component", type: i20.DxoPagerComponent, selector: "dxo-pager", inputs: ["allowedPageSizes", "displayMode", "infoText", "label", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"] }, { kind: "component", type: i20.DxoPagingComponent, selector: "dxo-paging", inputs: ["enabled", "pageIndex", "pageSize"], outputs: ["pageIndexChange", "pageSizeChange"] }, { kind: "component", type: i20.DxoStateStoringComponent, selector: "dxo-state-storing", inputs: ["customLoad", "customSave", "enabled", "savingTimeout", "storageKey", "type"] }, { kind: "directive", type: i21.DxTemplateDirective, selector: "[dxTemplate]", inputs: ["dxTemplateOf"] }, { kind: "directive", type: i22.DynamicIoDirective, selector: "[ndcDynamicInputs],[ndcDynamicOutputs]", inputs: ["ndcDynamicInputs", "ndcDynamicOutputs"], exportAs: ["ndcDynamicIo"] }, { kind: "component", type: i22.DynamicComponent, selector: "ndc-dynamic", inputs: ["ndcDynamicComponent", "ndcDynamicInjector", "ndcDynamicProviders", "ndcDynamicContent", "ndcDynamicNgModuleRef", "ndcDynamicEnvironmentInjector"], outputs: ["ndcDynamicCreated"] }, { kind: "component", type: i23.Accordion, selector: "p-accordion", inputs: ["multiple", "style", "styleClass", "expandIcon", "collapseIcon", "activeIndex", "selectOnFocus", "headerAriaLevel"], outputs: ["onClose", "onOpen", "activeIndexChange"] }, { kind: "component", type: i23.AccordionTab, selector: "p-accordionTab", inputs: ["id", "header", "headerStyle", "tabStyle", "contentStyle", "tabStyleClass", "headerStyleClass", "contentStyleClass", "disabled", "cache", "transitionOptions", "iconPos", "selected", "headerAriaLevel"], outputs: ["selectedChange"] }, { kind: "directive", type: i24.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i25.Dropdown, selector: "p-dropdown", inputs: ["id", "scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "dataKey", "filterBy", "filterFields", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "focusOnHover", "selectOnFocus", "autoOptionFocus", "autofocusFilter", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "directive", type: i26.InputTextarea, selector: "[pInputTextarea]", inputs: ["autoResize"], outputs: ["onResize"] }, { kind: "pipe", type: i9.KeyValuePipe, name: "keyvalue" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSearchCleanupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-dynamic-searchcleanup', template: "<app-alert></app-alert>\r\n<div [class]=\"userAction === 'view' ? 'readOnlyCard' : ''\">\r\n  <div *ngIf=\"header\">\r\n    <table class=\"table table-bordered\" aria-describedby=\"border\">\r\n      <thead>\r\n        <tr>\r\n          <th *ngFor=\"let item of titletab | keyvalue\">{{ item.key }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td *ngFor=\"let item of titletab | keyvalue\">{{ item.value }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n\r\n  <p-accordion class=\"w-full dynamic-search\" [activeIndex]=\"1\" iconPos=\"endVal\"\r\n    *ngIf=\"dynamicSearch && dynamicSearch.length > 0\">\r\n    <p-accordionTab>\r\n      <ng-template pTemplate=\"header\">\r\n        <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n          <span class=\"font-bold\">Quick Search</span>\r\n        </span>\r\n      </ng-template>\r\n      <div class=\"d-flex my-2 row\">\r\n        <div class=\"col-12 text-md-right\">\r\n          <button type=\"button\" title=\"Add New\" pripple class=\"p-ripple p-element btn btn-primary btn-icon\"\r\n            (click)=\"addGridDynamicSearch()\">\r\n            <em class=\"pi pi-plus font-weight-bold\"></em>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <form [formGroup]=\"gridDynamicSearchForm\">\r\n        <ng-container formArrayName=\"dynamicSearchArray\">\r\n          <div *ngFor=\"let dynamicSearchItem of initDynamicSearch().controls; let dynamicSearchIndex = index\"\r\n            [formGroupName]=\"dynamicSearchIndex\">\r\n            <div class=\"row rbac-card\">\r\n              <div class=\"col-md-11 col-12 pr-0\">\r\n                <div class=\"row\">\r\n                  <!-- <div class=\"col-lg-3 col-md-6 col-12 mb-3\"> -->\r\n                  <!--   <label class=\"referral-form-labels\" for=\"tableList\">Table</label> -->\r\n                  <!--   <p-dropdown -->\r\n                  <!--     [options]=\"dynamicSearchItem.get('tableDropDown')?.value\" -->\r\n                  <!--     optionLabel=\"name\" -->\r\n                  <!--     optionValue=\"value\" -->\r\n                  <!--     id=\"tableList_{{ dynamicSearchIndex }}\" -->\r\n                  <!--     placeholder=\"Select Table\" -->\r\n                  <!--     formControlName=\"tableName\" -->\r\n                  <!--     tabindex=\"0\" -->\r\n                  <!--     styleClass=\"w-100\" -->\r\n                  <!--     (onChange)=\"getColumnList(dynamicSearchIndex, dynamicSearchItem.get('tableName')?.value)\"> -->\r\n                  <!--   </p-dropdown> -->\r\n                  <!--   <span -->\r\n                  <!--     class=\"text-danger error-text\" -->\r\n                  <!--     *ngIf=\" -->\r\n                  <!--       dynamicSearchItem.get('tableName')?.hasError('required') && -->\r\n                  <!--       dynamicSearchItem.get('tableName')?.touched -->\r\n                  <!--     \" -->\r\n                  <!--     >Please Select Table Name</span -->\r\n                  <!--   > -->\r\n                  <!-- </div> -->\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels\" for=\"columnList\">Column <span\r\n                        class=\"requiredfield text-danger\">*</span></label>\r\n                    <p-dropdown [options]=\"dynamicSearchItem.get('columnDropDown')?.value\"\r\n                      id=\"columnList_{{ dynamicSearchIndex }}\" optionLabel=\"name\" optionValue=\"value\"\r\n                      placeholder=\"Select Column\" formControlName=\"columnName\" tabindex=\"0\" styleClass=\"w-100\"\r\n                      (onChange)=\"getConditionList(dynamicSearchIndex, dynamicSearchItem.get('columnName')?.value)\">\r\n                    </p-dropdown>\r\n                    <span class=\"text-danger error-text\" *ngIf=\"\r\n                        dynamicSearchItem.get('columnName')?.hasError('required') &&\r\n                        dynamicSearchItem.get('columnName')?.touched\r\n                      \">Please Select Column Name</span>\r\n                  </div>\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels\" for=\"conditionList\">Condition <span\r\n                        class=\"requiredfield text-danger\">*</span></label>\r\n                    <p-dropdown [options]=\"dynamicSearchItem.get('conditionDropdown')?.value\"\r\n                      id=\"conditionList_{{ dynamicSearchIndex }}\" optionLabel=\"name\" optionValue=\"value\"\r\n                      placeholder=\"Select Condition\" formControlName=\"condition\" tabindex=\"0\" styleClass=\"w-100\"\r\n                      (onChange)=\"resetDynamicSearchValue(dynamicSearchIndex)\">\r\n                    </p-dropdown>\r\n                    <span class=\"text-danger error-text\" *ngIf=\"\r\n                        dynamicSearchItem.get('condition')?.hasError('required') &&\r\n                        dynamicSearchItem.get('condition')?.touched\r\n                      \">Please Select Condition</span>\r\n                  </div>\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels\" for=\"valueList\">Value <span\r\n                        class=\"requiredfield text-danger\">*</span></label>\r\n                    <input type=\"text\" class=\"p-inputtext w-100\" id=\"valueList\" formControlName=\"value\"\r\n                      placeholder=\"\" />\r\n                    <span class=\"text-danger error-text\" *ngIf=\"\r\n                        dynamicSearchItem.get('value')?.hasError('required') && dynamicSearchItem.get('value')?.touched\r\n                      \">Please Fill Value</span>\r\n                  </div>\r\n                  <div class=\"col-lg-3 col-md-6 col-12 mb-1\">\r\n                    <label class=\"referral-form-labels d-md-block d-none\" for=\"deleteDynamicSearch\">&#160;</label>\r\n                    <span class=\"material-symbols-outlined text-danger delete-icon\" role=\"button\"\r\n                      id=\"deleteDynamicSearch\" (click)=\"removeDynamicSearch(dynamicSearchIndex)\"\r\n                      title=\"Delete\">delete</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- <div\r\n                class=\"col-md-1 col-12 mb-3 text-md-center d-md-flex align-items-md-center justify-content-md-center flex-column\">\r\n                <label class=\"referral-form-labels d-md-block d-none\" for=\"deleteDynamicSearch\">&#160;</label>\r\n                <span class=\"material-symbols-outlined text-danger\" role=\"button\" id=\"deleteDynamicSearch\"\r\n                  (click)=\"removeDynamicSearch(dynamicSearchIndex)\" title=\"Delete\">delete</span>\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeDynamicSearch()\">Delete</button>\r\n              </div> -->\r\n            </div>\r\n          </div>\r\n          <div class=\"row d-flex flex-column align-self-end\">\r\n            <div class=\"col-md-12 text-md-right mt-2\">\r\n              <!-- <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"saveDynamicSearch()\"\r\n                [disabled]=\"saveButtonDisable\">\r\n                Save\r\n              </button> -->\r\n              <button type=\"button\" class=\"btn btn-cancel\" (click)=\"resetDynamicSearch()\">Clear</button>\r\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitDynamicSearch()\"\r\n                [disabled]=\"saveButtonDisable\">Search</button>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </form>\r\n    </p-accordionTab>\r\n  </p-accordion>\r\n  <div class=\"page-wrp mt-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <!-- <div *ngIf=\"true\">\r\n          <div class=\"d-flex\" [formGroup]=\"filterForm\" *ngIf=\"gridType !== 'view'\">\r\n            <div class=\"col-md-12\">\r\n              <p-multiSelect [options]=\"filterOptions\" styleClass=\"filterOptions\" [group]=\"true\"\r\n                selectedItemsLabel=\"{0} items selected\" defaultLabel=\"Select\" optionLabel=\"label\" optionValue=\"id\"\r\n                id=\"filteroptions\" ariaFilterLabel=\"searchbox\" formControlName=\"selectedFilter\"\r\n                (onChange)=\"changeFilterOptions($event)\">\r\n                <ng-template let-group pTemplate=\"group\">\r\n                  <div class=\"flex align-items-center\">\r\n                    <span>{{ group.columnName }}</span>\r\n                  </div>\r\n                </ng-template>\r\n              </p-multiSelect>\r\n            </div>\r\n          </div>\r\n        </div> -->\r\n        <button *ngIf=\"gridType === 'view'\" type=\"button\" class=\"btn btn-cancel mb-3\" (click)=\"goBack()\">Back</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 text-right\">\r\n        <div class=\"d-flex justify-content-between align-items-center col-12\" *ngIf=\"getTitle(updateGrid?.gridTitle)\">\r\n          <h6 class=\"font-weight-bold mb-0\"></h6>\r\n\r\n          <div class=\"d-flex inmate-btn-align\">\r\n            <button class=\"btn-print my-2\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\"\r\n              *ngIf=\"showExport\">\r\n              <img class=\"export\" src=\"../../../assets/images/svg/Export_Icon.svg\" alt=\"export\" />\r\n            </button>\r\n            <mat-menu class=\"d-inline-block my-2\" #menu=\"matMenu\" *ngIf=\"showExport\">\r\n              <button mat-menu-item (click)=\"onClose()\" *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\">\r\n                <mat-icon>{{ icon }}</mat-icon>{{ openclose }} Slidebar\r\n              </button>\r\n              <button mat-menu-item (click)=\"reset('excel')\"><mat-icon>grid_on</mat-icon> Export to Excel</button>\r\n              <button mat-menu-item (click)=\"reset('pdf')\"><mat-icon>picture_as_pdf</mat-icon> Export to PDF</button>\r\n              <button mat-menu-item (click)=\"reset('print')\"><mat-icon>print</mat-icon> Print</button>\r\n              <button mat-menu-item (click)=\"reset(pageType)\" *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\">\r\n                <mat-icon>reset_tv</mat-icon> Reset Search Criteria\r\n              </button>\r\n              <button *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\" mat-menu-item\r\n                [matMenuTriggerFor]=\"searchCriteriaList\" #searchcriteriamenutrigger=\"matMenuTrigger\">\r\n                <mat-icon>add_circle_outline</mat-icon> Save Search Criteria\r\n              </button>\r\n            </mat-menu>\r\n            <div [ngClass]=\"updateGrid && updateGrid?.chooser ? 'd-inline-block add-btn-right' : 'd-inline-block'\">\r\n              <!--Add Button, Column chooser button are replacing eachother when its selected-->\r\n              <button class=\"btn-icon-bg d-inline-block pull-right text-right ml-1 my-2\"\r\n                *ngIf=\"showGridPage && item && updateGrid?.isInitialFormLoad\" (click)=\"closeForm()\">\r\n                <em class=\"fa fa-times\"></em>\r\n              </button>\r\n              <div *ngIf=\"\r\n                  updateGrid?.gridActionFormArray !== null &&\r\n                  updateGrid?.gridActionFormArray !== undefined &&\r\n                  updateGrid?.gridActionFormArray &&\r\n                  updateGrid?.gridActionFormArray?.length\r\n                \" class=\"update-grid-action-button-container\">\r\n                <ng-container *ngFor=\"let item of updateGrid?.gridActionFormArray; let i = index\">\r\n                  <ng-container *ngIf=\"!(updateGrid?.isShowOnTop && item?.action?.toLowerCase() === 'add')\">\r\n                    <button *ngIf=\"item?.icon && item.isOutsideGrid && !item.hide\" class=\"btn btn-primary mt-2\"\r\n                      (click)=\"getOutsideGridAction(item)\">\r\n                      <em [class]=\"item.icon\"></em><span class=\"ml-2\" *ngIf=\"!!item.name\">{{ item.name }}</span>\r\n                    </button>\r\n                    <ng-container *ngIf=\"item?.icon && item.isOutsideGrid && item.type === 'Ocr Scan'\">\r\n                      <label for=\"file\" class=\"btn btn-primary mt-2\">\r\n                        <em [class]=\"item.icon\"></em><span class=\"ml-2\" *ngIf=\"!!item.name\">{{ item.name }}</span>\r\n                      </label>\r\n                      <input type=\"file\" (change)=\"uploadDocument(item, $event)\" id=\"file\" aria-hidden=\"true\"\r\n                        style=\"visibility: hidden; display: none\" />\r\n                    </ng-container>\r\n                  </ng-container>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"updateGrid && updateGrid?.chooser\" class=\"col-custom my-2\">\r\n              <button class=\"btn btn-primary btn-icon ml-1\" (click)=\"columnChooserClick()\">\r\n                <em class=\"fa fa-columns\" aria-hidden=\"true\"></em>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <button *ngIf=\"isAddButton\" type=\"button\" class=\"btn btn-primary my-2\" (click)=\"redirect()\">Add</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-menu #searchCriteriaList=\"matMenu\" class=\"searchlist\">\r\n      <div class=\"row col-sm-12 mt-4\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"col-sm-6\">\r\n          <mat-form-field>\r\n            <input matInput [(ngModel)]=\"searchCriteria\" placeholder=\"Search Criteria\" />\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"col-sm-2 mt-2\">\r\n          <button class=\"btn btn-pri\" [disabled]=\"!searchCriteria\" (click)=\"saveSearchCriteria()\">Save</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"row col-sm-12\">\r\n        <table aria-describedby=\"Search_Criteria\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Search Criteria</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody *ngIf=\"totalcount\">\r\n            <tr *ngFor=\"let sc of searchCriteriaArr\">\r\n              <td>\r\n                <mat-icon>search</mat-icon>\r\n                <a href=\"javascript:void(0)\" (click)=\"setSearch(sc.data)\">{{ sc.data.searchCriteria }}</a>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </mat-menu>\r\n    <div class=\"split-page\">\r\n      <as-split unit=\"percent\" useTransition=\"true\" direction=\"{{ layouttype }}\">\r\n        <as-split-area size=\"{{ spliterSize }}\">\r\n          <div *ngIf=\"pageType === 'DSP' || pageType === 'BUSP'\">\r\n            <div class=\"row\">\r\n              <div class=\"col-12\">\r\n                <formio #formIO [form]=\"jsonForm\" [submission]=\"submittedData\" (submit)=\"onSubmit($event)\"\r\n                  (customEvent)=\"customEvent($event)\"></formio>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </as-split-area>\r\n        <as-split-area size=\"{{ gridspliterSize }}\">\r\n          <div class=\"row\" *ngIf=\"\r\n              ((updateGrid?.isInitialFormLoad !== undefined &&\r\n                updateGrid?.isInitialFormLoad !== null &&\r\n                updateGrid?.isInitialFormLoad) ||\r\n                (updateGrid?.isShowOnTop !== undefined &&\r\n                  updateGrid?.isShowOnTop !== null &&\r\n                  updateGrid?.isShowOnTop)) &&\r\n              item\r\n            \">\r\n            <div class=\"col-12\">\r\n              <ndc-dynamic class=\"no-drag\" [ndcDynamicComponent]=\"item.component\" [ndcDynamicInputs]=\"item\"\r\n                [ndcDynamicOutputs]=\"item?.outputs\"></ndc-dynamic>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div class=\"row\" *ngIf=\"showGridPage\">\r\n              <div class=\"col-lg-12 gridview\">\r\n                <div class=\"card mb-2\">\r\n                  <div class=\"card-body {{ getTitleClass(fromTitle) }}\">\r\n\r\n                    <!-- [remoteOperations]=\"{ filtering: true, sorting: true, paging: true }\"  Removed server filtering-->\r\n                    <dx-data-grid [dataSource]=\"dataSource\" [columnMinWidth]=\"100\" [width]=\"'100%'\" [filterSyncEnabled]=\"true\" #dataGrid\r\n                      [columnResizingMode]=\"'widget'\" [allowColumnReordering]=\"true\" [allowColumnResizing]=\"true\"\r\n                      [columnAutoWidth]=\"true\" (onContentReady)=\"contentReady($event)\"\r\n                      (onCellPrepared)=\"onCellPrepared($event)\" (onRowPrepared)=\"onRowPrepared($event)\"\r\n                      (onCellClick)=\"onCellClick($event)\" (onExporting)=\"onExporting($event)\" [showBorders]=\"true\"\r\n                      [rowAlternationEnabled]=\"true\" [showColumnLines]=\"true\" [showRowLines]=\"true\">\r\n                      <dxo-selection [selectAllMode]=\"allMode\" [showCheckBoxesMode]=\"checkBoxesMode\"\r\n                        [mode]=\"getGridSelection(updateGrid?.gridSelection)\"></dxo-selection>\r\n                      <dxo-load-panel [enabled]=\"false\"></dxo-load-panel>\r\n                      <dxo-export [enabled]=\"true\" [formats]=\"['pdf', 'xlsx']\"></dxo-export>\r\n                      <dxo-filter-row [visible]=\"showFilterRowPanel\"></dxo-filter-row>\r\n                      <dxo-state-storing [enabled]=\"true\" type=\"custom\" [customSave]=\"customSave\"\r\n                        [customLoad]=\"customLoad\"></dxo-state-storing>\r\n\r\n                      <dxo-column-chooser [enabled]=\"true\" mode=\"select\">\r\n                        <dxo-position my=\"right top\" at=\"right top\" of=\".dx-datagrid-column-chooser-button\">\r\n                        </dxo-position>\r\n                      </dxo-column-chooser>\r\n\r\n                      <!--Grid - Footer filter removed -->\r\n                      <dxo-paging [pageSize]=currentPageSize></dxo-paging>\r\n                      <dxo-pager [visible]=\"true\" [showPageSizeSelector]=\"true\" [allowedPageSizes]=\"[5, 10, 15, 20]\"\r\n                        [displayMode]=\"displayMode\" [showInfo]=\"true\" [showNavigationButtons]=\"true\"></dxo-pager>\r\n                      <dxo-filter-builder-popup [position]=\"popupPosition\"> </dxo-filter-builder-popup>\r\n                      <dxo-header-filter [visible]=\"true\"></dxo-header-filter>\r\n                      <ng-container *ngFor=\"let column of columns; let i = index\">\r\n                        <ng-container *ngIf=\"column?.hide !== true\">\r\n                          <ng-container *ngIf=\"column?.link; else noLink\">\r\n                            <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                              [allowHiding]=\"!column?.Choosable\" [fixed]=\"column?.fixed\" [dataField]=\"column?.columnDef\"\r\n                              [caption]=\"column?.header\" [allowFiltering]=\"column?.filter\" cellTemplate=\"cellTemplate\"\r\n                              [allowSorting]=\"column?.sort\" [width]=\"column?.width\"\r\n                              [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\" [sortOrder]=\"column?.sortOrder\"\r\n                              [sortIndex]=\"column?.sortIndex\">\r\n                            </dxi-column>\r\n                          </ng-container>\r\n                          <ng-template #noLink>\r\n                            <ng-container *ngIf=\"column?.icon; else noShowmore\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" cellTemplate=\"iconTemplate\"\r\n                                [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                                [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noShowmore>\r\n                            <ng-container *ngIf=\"column?.showmore; else noIcon\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" cellTemplate=\"showmoreTemplate\"\r\n                                [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                                [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noIcon>\r\n                            <ng-container *ngIf=\"column?.dateFormat; else noDate\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                *ngIf=\"column?.dateFormat === 'date' || column?.dateFormat === 'datetime'\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" dataType=\"date\"\r\n                                [format]=\"getDateFormat(column?.dateFormat)\" [allowSorting]=\"column?.sort\"\r\n                                [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\" [sortOrder]=\"column?.sortOrder\"\r\n                                [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noDate>\r\n                            <ng-container *ngIf=\"column?.header.toLowerCase().trim() === 'status'; else noStatus\">\r\n                              <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                                [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                                [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                                [allowFiltering]=\"column?.filter\" cellTemplate=\"statusTemplate\"\r\n                                [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                                [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                              </dxi-column>\r\n                            </ng-container>\r\n                          </ng-template>\r\n                          <ng-template #noStatus>\r\n                            <dxi-column [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n                              [allowHiding]=\"!column?.Choosable\" [width]=\"column?.width\" [fixed]=\"column?.fixed\"\r\n                              [dataField]=\"column?.columnDef\" [caption]=\"column?.header\"\r\n                              [allowFiltering]=\"column?.filter\" cellTemplate=\"dataTemplate\"\r\n                              [allowSorting]=\"column?.sort\" [filterValues]=\"column?.filterValues\" [filterValue]=\"column?.filterValue\"\r\n                              [sortOrder]=\"column?.sortOrder\" [sortIndex]=\"column?.sortIndex\">\r\n                            </dxi-column>\r\n                          </ng-template>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                      <ng-container *ngIf=\"showGridActions(updateGrid, showActionColumn, gridType)\">\r\n                        <dxi-column [width]=\"120\" [allowFiltering]=\"false\" [showInColumnChooser]=\"false\"\r\n                          [allowSorting]=\"false\" caption=\"Action\" cellTemplate=\"editCellTemplate\">\r\n                        </dxi-column>\r\n                      </ng-container>\r\n                      <div *dxTemplate=\"let d of 'cellTemplate'\" class=\"dashboard-hover\">\r\n                        <a *ngIf=\"d.value && d.value !== 'null'\" (click)=\"getRouter(d, item)\">{{ d.value !== 'null' ?\r\n                          d.value : '' }}\r\n                          <span *ngIf=\"showIcon(d)\"></span>\r\n                        </a>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'iconTemplate'\">\r\n                        <span *ngFor=\"let item of d.data.rbacConditions; let i = index\">\r\n                          <em *ngIf=\"item.action !== 'add'\" [class]=\"item.icon\" (click)=\"popup(d?.key, item)\"></em>\r\n                        </span>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'showmoreTemplate'\" class=\"description-container\">\r\n                          <span>{{ toggleShowMore(d.value, d.column?.dataField) }}</span>\r\n                          <a class=\"toggle-link\" *ngIf=\"d.value.length > truncateTextValue\" (click)=\"toggleShowMoreState(d.value, d.column?.dataField)\">\r\n                            {{ showMoreText[getToggleKey(d.value, d.column?.dataField)] ? 'Show Less' : 'Show More' }}\r\n                          </a>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'editCellTemplate'\">\r\n                        <span *ngFor=\"let item of d.data.rbacConditions; let i = index\">\r\n                          <!-- Tooltip for deleted row -->\r\n                          <a *ngIf=\"\r\n                          item?.action === 'info'\"\r\n                            class=\"no-bg\"\r\n                            [matTooltip]=\"'Delete Status: Pending\\n' + item?.message\"\r\n                            [matTooltipPosition]=\"'left'\"\r\n                            [matTooltipShowDelay]=\"100\"\r\n                            [matTooltipHideDelay]=\"100\"\r\n                            [matTooltipClass]=\"'custom-tooltip-class'\">\r\n                            <em [class]=\"item.icon\"></em>\r\n                          </a>\r\n                          <a *ngIf=\"\r\n                                item?.icon &&\r\n                                item?.action !== 'info' &&\r\n                                !item.isOutsideGrid &&\r\n                                d?.data?.status !== 'Closed' &&\r\n                                item.action !== 'changepathway' &&\r\n                                !item?.hide;\r\n                              else changepathway\r\n                            \" class=\"no-bg\" matTooltip=\"{{ titleCaseToolTip(item?.action) }}\"\r\n                            (click)=\"getInsideGridAction(d, item)\">\r\n                            <em [class]=\"item.icon\" style=\"padding-right: 10px\"></em>\r\n                          </a>\r\n\r\n                          <ng-template #changepathway>\r\n                            <a *ngIf=\"item.action === 'changepathway' && d?.rowIndex === 0\" class=\"no-bg\"\r\n                              matTooltip=\"{{ item?.action }}\" (click)=\"getInsideGridAction(d, item)\">\r\n                              <em [class]=\"item.icon\" style=\"padding-right: 10px\"></em>\r\n                            </a>\r\n                          </ng-template>\r\n                        </span>\r\n                        <a *ngIf=\"updateGrid?.gridActionFormArray?.icon\" class=\"no-bg\" matTooltip=\"Open\"\r\n                          (click)=\"openLink(d)\">\r\n                          <em class=\"fa fa-external-link\"></em>\r\n                        </a>\r\n                        <a *ngIf=\"updateGrid?.edit\" class=\"no-bg\" matTooltip=\"Edit\" (click)=\"editData(d)\">\r\n                          <em class=\"fa fa-pencil\" title=\"Edit\"></em>\r\n                        </a>\r\n                        <a *ngIf=\"updateGrid?.view\" class=\"no-bg\" matTooltip=\"View\" (click)=\"viewData(d)\">\r\n                          <em class=\"fa fa-eye\" title=\"View\"></em>\r\n                        </a>\r\n                        <a *ngIf=\"updateGrid?.delete\" class=\"no-bg text-danger\" matTooltip=\"Delete\"\r\n                          (click)=\"deleteData(d)\">\r\n                          <em class=\"fa fa-trash\"></em>\r\n                        </a>\r\n                        <button *ngIf=\"updateGrid?.activeordeactive\" class=\"no-bg\" (click)=\"deleteData(d)\">\r\n                          <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 1\"\r\n                            class=\"fa fa-toggle-on\"></em>\r\n                          <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 0\"\r\n                            class=\"fa fa-toggle-off\"></em>\r\n                        </button>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'statusTemplate'\" [class]=\"changeStatusColor(d.value)\">\r\n                        <span>{{ d.value }}</span>\r\n                      </div>\r\n                      <div *dxTemplate=\"let d of 'dataTemplate'\"\r\n                        [ngClass]=\"{ 'dashboard-hover-contact': d.column?.dataField === 'servicename' }\">\r\n                        <div class=\"d-inline-block\" *ngIf=\"\r\n                            d.column?.dataField === 'clientaccountno' &&\r\n                            d.data.accountstatus &&\r\n                            d.data.accountstatus === 'INA'\r\n                          \">\r\n                          <em class=\"fa fa-warning red-color\"></em>\r\n                        </div>\r\n                        <div *ngIf=\"d.column?.dataField === 'servicename'\">\r\n                          <div class=\"arrow-right\" *ngIf=\"d.data.narrative\">\r\n                            <div class=\"person-details\">\r\n                              <p><span>Narrative</span><span [innerHtml]=\"splitingData(d, '.')\"></span></p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"d.column?.dataField === 'narrative'; else dataValue\">\r\n                          {{ d.value }}\r\n                        </div>\r\n                        <ng-template #dataValue>{{ d.value }}</ng-template>\r\n                      </div>\r\n                    </dx-data-grid>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </as-split-area>\r\n      </as-split>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #callDialogPopup>\r\n  <h2 matDialogTitle>Narrative</h2>\r\n  <div [innerHTML]=\"popupData\"></div>\r\n  <div class=\"text-right\">\r\n    <button mat-button (click)=\"closeDialogPopup()\" class=\"btn btn-cancel mr-2\">Close</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<app-dynamic-details *ngIf=\"openTab\" [key]=\"selectedRowData\"></app-dynamic-details>\r\n\r\n<ng-template #DeleteGridList>\r\n  <div class=\"p-3\">\r\n    <div class=\"clearfix mb-2\">{{ DefaultDeletePopupTextAftThresholdTime }}</div>\r\n    <div class=\"mb-2\">\r\n      <label for=\"reasonfordelete\" class=\"intake-form-labels clearfix mb-2\">Reason for record deletion <span\r\n          class=\"text-danger\">*</span></label>\r\n      <textarea rows=\"3\" id=\"reasonfordelete\" cols=\"30\" pInputTextarea\r\n        placeholder=\"Reason for deletion (4000 character limit)\" maxlength=\"4000\" class=\"form-control no-resize\"\r\n        [(ngModel)]=\"enteredReason\" (input)=\"checkIsDisabled($event.target.value)\"></textarea>\r\n    </div>\r\n  </div>\r\n  <div class=\"text-right pr-3\">\r\n    <button class=\"pull-right btn btn-primary delete mb-3\" (click)=\"deleteRecordWithReason()\"\r\n      [disabled]=\"isDisabled\">Yes</button>\r\n    <button class=\"pull-right mr-2 mb-3 btn bg-white text-primary btncancel\" (click)=\"cancelPopup()\">No</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #DeleteGridListWithoutReason>\r\n  <div class=\"p-3\">\r\n    <div class=\"clearfix mb-2\">{{ deletePopupText }}</div>\r\n  </div>\r\n  <div class=\"text-right pr-3\">\r\n    <button class=\"pull-right btn btn-primary delete mb-3\" (click)=\"deleteRecordWithoutReason()\">Yes</button>\r\n    <button class=\"pull-right mr-2 mb-3 btn bg-white text-primary btncancel\" (click)=\"cancelPopup()\">No</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #ApproveDeleteGridList>\r\n  <div class=\"p-3\">\r\n    <div class=\"clearfix mb-4\">{{this.deletedReason}}</div>\r\n    <!-- <div class=\"clearfix mb-4\">Do you approve this deletion?</div> -->\r\n  </div>\r\n  <div class=\"text-right pr-3\">\r\n    <button class=\"pull-right mb-2 btn btn-primary delete\" data-dismiss=\"modal\"\r\n      (click)=\"deleteRecordWithoutReason()\">Yes</button>\r\n    <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\"\r\n      (click)=\"cancelPopup()\">No</button>\r\n  </div>\r\n</ng-template>\r\n\r\n\r\n<div class=\"modal\" id=\"confirmGridAction\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <p>{{ businessRuleMessage }}</p>\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"confirmGridAction()\">\r\n            Yes\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">No</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".split-page{outline:3px}.searchlist{min-width:620px!important;height:280px!important}.searchlist table,.searchlist table tr th,.searchlist table tr td{padding:0}.card-title{position:absolute;left:15px;font-size:bold}.red-color{color:#ff6252}.dx-datagrid .dx-row>tr>td{padding:0!important}.dx-datagrid .dx-row>td{padding-bottom:2px!important;text-align:center!important;font-family:Roboto,sans-serif!important}.dx-datagrid-rowsview .dx-row{height:40px!important;font-size:var(--base-font-size)}.dx-datagrid-rowsview .dx-row.dx-row-lines>td{vertical-align:middle!important;overflow:unset;padding-left:6px!important;padding-right:6px!important}.card{box-shadow:none!important;border:none!important}.card-header{padding-left:0;background:#eff8ff;height:auto}.dx-datagrid-rowsview .dx-row.dx-row-lines:first-child,.dx-datagrid-rowsview .dx-row.dx-row-lines:first-child>td,.dx-datagrid-rowsview .dx-row.dx-row-lines:first-child>tr>td{overflow:unset!important}.dashboard-hover{position:relative}.dashboard-hover:hover .arrow-right{display:block;z-index:1}.dashboard-hover .person-details{display:inline-block;width:100%}.dashboard-hover .person-details p{margin:0}.dashboard-hover .person-details p span:first-child{width:95px;display:inline-block;vertical-align:top}.dashboard-hover .person-details p span:last-child{width:160px;word-break:break-word;display:inline-flex;overflow:hidden;white-space:normal}.dashboard-hover .person-details p span:last-child:before{content:\":\";padding-right:5px}.dashboard-hover .arrow-right{width:280px;min-height:95px;background-color:var(--bg-light);color:var(--text-dark);padding:10px;position:absolute;float:left;display:none;top:-13px;left:88px;border:1px solid var(--table-border);border-radius:6px}.dashboard-hover .arrow-right:after{content:\" \";position:absolute;margin:auto;top:13px;left:-101%;right:0;background:#fff;width:20px;height:20px;transform:rotate(45deg);-webkit-transform:rotate(135deg);-moz-transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);border-right:1px solid var(--table-border);border-bottom:1px solid var(--table-border)}.dashboard-hover-contact{position:relative}.dashboard-hover-contact:hover .arrow-right{display:block;z-index:1}.dashboard-hover-contact .person-details{display:inline-block;width:100%}.dashboard-hover-contact .person-details p{margin:0}.dashboard-hover-contact .person-details p span:first-child{width:95px;display:inline-block;vertical-align:top;word-break:break-word;white-space:normal}.dashboard-hover-contact .person-details p span:last-child{width:135px;word-break:break-word;display:inline-flex;overflow:hidden;white-space:normal;text-align:left}.dashboard-hover-contact .person-details p span:last-child:before{content:\":\";padding-right:5px}.dashboard-hover-contact .arrow-right{width:280px;min-height:50px;background-color:var(--bg-light);color:var(--text-dark);padding:10px;position:absolute;float:left;display:none;top:-13px;left:88px;border:1px solid var(--table-border);border-radius:6px}.dashboard-hover-contact .arrow-right:after{content:\" \";position:absolute;margin:auto;top:13px;left:-101%;right:0;background:#fff;width:20px;height:20px;transform:rotate(45deg);-webkit-transform:rotate(135deg);-moz-transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);border-right:1px solid var(--table-border);border-bottom:1px solid var(--table-border)}.open{color:#ff6252;border-radius:6px;font-weight:500;padding:5px!important;vertical-align:middle;min-width:85px;max-width:100%}.draft,.returned{color:red;border-radius:6px;font-weight:500;padding:5px!important;vertical-align:middle;min-width:85px;max-width:100%}.closed,.completed,.approved{color:#2ecd53;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.orange{color:orange;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.blue{color:#2c2863;border-radius:6px;font-weight:700;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.pending{color:#e29866;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.pending-approval{color:orange;border-radius:6px;font-weight:500;padding:5px;vertical-align:middle;min-width:85px;max-width:100%}.readOnlyCard{pointer-events:none!important;opacity:.7!important}.page-wrp{background:var(--bg-light)}.page-wrp h6{color:var(--text-dark)}:host ::ng-deep .as-split-gutter{background:var(--table-header)!important}.title{font-weight:700;font-size:17px;text-transform:capitalize;color:#2c2863}.col-custom .btn-icon-bg{padding:5px 8px!important}:host ::ng-deep .split-page .card-body{padding:0 15px!important}:host ::ng-deep .filterOptions{width:250px}:host ::ng-deep .p-multiselect-items{font-size:12px}:host ::ng-deep .p-multiselect-panel .p-multiselect-header .p-multiselect-filter-container .p-inputtext{padding:.2rem .5rem}:host ::ng-deep .dashboard-hover a{color:var(--interactive-color)!important;cursor:pointer}:host ::ng-deep .dx-datagrid .dx-column-indicators{position:relative;right:1px}:host ::ng-deep .dx-datagrid .dx-toolbar-after{margin-right:5px;margin-top:5px}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content{padding:5px 6px;border-radius:3px;background-color:var(--btn)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-export{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-spindown{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-toolbar-after .dx-button-content .dx-icon-column-chooser{color:var(--hover-text)}:host ::ng-deep .dx-datagrid .dx-checkbox-icon{border:1px solid var(--bg-light)!important}:host ::ng-deep .dx-datagrid .business-group .dx-template-wrapper,:host ::ng-deep .dx-datagrid .business-group .business-alert{display:inline-flex}:host ::ng-deep .dynamic-search .p-component .p-accordion-toggle-icon{margin-top:-8px;position:absolute;right:.5em;top:50%;font-size:var(--font-13);color:var(--primary)}:host ::ng-deep .dynamic-search .p-component .head-text span{color:var(--primary)}:host ::ng-deep .dynamic-search .error-text{font-size:var(--font-12)}:host ::ng-deep .as-vertical .as-split-gutter{display:none!important}.no-resize{resize:none}:host ::ng-deep .custom-mat-tooltip{width:150px;font-size:var(--font-14)}:host ::ng-deep .mdc-tooltip__surface-animation{will-change:auto!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i1.ActivatedRoute }, { type: i0.ChangeDetectorRef }, { type: i2.UntypedFormBuilder }, { type: i3.FormioService }, { type: i4.LocalStorageService }, { type: i2.UntypedFormBuilder }, { type: i5.Store }, { type: i6.PlatformDataStoreService }, { type: i7.SharedService }, { type: i8.ConfigService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; }, propDecorators: { searchcriteriamenutrigger: [{
                type: ViewChild,
                args: ['searchcriteriamenutrigger']
            }], dataGrid: [{
                type: ViewChild,
                args: [DxDataGridComponent, { static: false }]
            }], formId: [{
                type: Input
            }], pageId: [{
                type: Input
            }], callDialogPopup: [{
                type: ViewChild,
                args: ['callDialogPopup']
            }], outerRouting: [{
                type: Output
            }], formIO: [{
                type: ViewChild,
                args: ['formIO']
            }], filterOptionsDropdown: [{
                type: ViewChild,
                args: [MultiSelect]
            }], componentId: [{
                type: Input
            }], DeleteGridList: [{
                type: ViewChild,
                args: ['DeleteGridList']
            }], DeleteGridListWithoutReason: [{
                type: ViewChild,
                args: ['DeleteGridListWithoutReason']
            }], ApproveDeleteGridList: [{
                type: ViewChild,
                args: ['ApproveDeleteGridList']
            }], onResize: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,