import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, QueryList, Renderer2 } from '@angular/core';
import { Router } from '@angular/router';
import { DxDataGridComponent } from 'devextreme-angular';
import DataSource from 'devextreme/data/data_source';
import { LocalStorageService } from '../../@core/local-storage/local-storage.service';
import { AlertService } from '../../@core/service/alert.service';
import { AppService } from '../../@core/service/app.service';
import { AuthService } from '../../@core/service/auth.service';
import { DataStoreService } from '../../@core/service/data-store.service';
import { LocalService } from '../../@core/service/local.service';
import * as i0 from "@angular/core";
export declare class GridListComponent implements OnInit, OnChanges, AfterViewInit {
    private router;
    auth: AuthService;
    private localstorage;
    private storageService;
    private appService;
    private _storeservice;
    private renderer;
    private alertService;
    dataGrid: DxDataGridComponent;
    contentWrappers: QueryList<ElementRef>;
    dataList: any[];
    dataSource: DataSource;
    columns: any;
    updateGrid: any;
    totalCount: number;
    page: number;
    isShow: any;
    exportPageName: string;
    remoteOperations: boolean;
    currentPage: EventEmitter<number>;
    editTableRow: EventEmitter<any>;
    viewTableRow: EventEmitter<any>;
    deleteTableRow: EventEmitter<any>;
    openExternalLink: EventEmitter<any>;
    openpopupLink: EventEmitter<any>;
    routeTo: EventEmitter<any>;
    openPopup: EventEmitter<any>;
    sortOrder: EventEmitter<any>;
    filterSearchValue: EventEmitter<any>;
    filterBuilderPopup: EventEmitter<any>;
    filterPanel: EventEmitter<any>;
    multipleFilterValues: EventEmitter<any>;
    downloadTableRow: EventEmitter<any>;
    rowSelection: EventEmitter<any>;
    toggleRow: EventEmitter<any>;
    duplicateRow: EventEmitter<any>;
    viewVersions: EventEmitter<any>;
    activateVersion: EventEmitter<any>;
    activatePage: EventEmitter<any>;
    deactivatePage: EventEmitter<any>;
    duplicatePageVersion: EventEmitter<any>;
    selectedRowsData: EventEmitter<any>;
    orgList: any;
    dataField: string[];
    columnHeader: any[];
    popupPosition: any;
    filterValue: (string | string[])[];
    customOperations: Array<any>;
    fields: any;
    customStore: any;
    tempColumns: any[];
    Organization: any;
    dUrl: string;
    rdUrl: string;
    rUrl: any;
    user: any;
    userId: number;
    tempList: any[];
    showVersions: boolean;
    displayMode: any;
    registrationInfo: any;
    activepagename: any;
    url: any;
    oldUrl: any;
    httpService: any;
    mainNotificationService: any;
    sharedService: any;
    constructor(router: Router, auth: AuthService, localstorage: LocalService, storageService: LocalStorageService, appService: AppService, _storeservice: DataStoreService, renderer: Renderer2, alertService: AlertService);
    ngOnInit(): void;
    ngOnChanges(): void;
    loadGWithParam(): void;
    ngAfterViewInit(): void;
    private applyLinkStyles;
    loadGrid(orgID: any, load?: boolean): void;
    tempGridList(orgID: any): void;
    splitGridList(orgID: any): void;
    getRouter(data: any): void;
    navigateLink(event: MouseEvent, rowData: any): void;
    checkPageId(isNumberCheck: any, activeId: any, event: any): Promise<void>;
    routeFunction(isNumberCheck: any, activeId: any, event: any, menuType: any): void;
    setActive(menus: any, menuIndex: any, submenuIndex: any, isNumberCheck: any): void;
    extractID(url: string): string;
    extractUrl(html: string): string;
    popup(data: any): void;
    downloadData(evt: any): void;
    onSelectionChanged(evt: any): void;
    editData(evt: any): void;
    viewData(evt: any): void;
    viewVersion(evt: any): void;
    activatePageVersion(evt: any): void;
    activatePages(evt: any): void;
    deactivatePages(evt: any): void;
    deleteData(evt: any): void;
    openLink(evt: any): void;
    openPopupLink(evt: any): void;
    activeUser(evt: any): void;
    duplicateDate(evt: any): void;
    duplicateVersion(evt: any): void;
    getOrgList(): void;
    onRowPrepared(e: any): void;
    onCellPrepared(e: any): void;
    onExporting(e: any): void;
    islocked(grid: any, user: any): boolean;
    getDateFormat(value: any): any;
    isEnable(grid: any, record: any): boolean;
    updateNotificationView(rowData: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GridListComponent, "app-grid-list", never, { "dataList": { "alias": "dataList"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "updateGrid": { "alias": "updateGrid"; "required": false; }; "totalCount": { "alias": "totalCount"; "required": false; }; "page": { "alias": "page"; "required": false; }; "isShow": { "alias": "isShow"; "required": false; }; "exportPageName": { "alias": "exportPageName"; "required": false; }; "remoteOperations": { "alias": "remoteOperations"; "required": false; }; }, { "currentPage": "currentPage"; "editTableRow": "editTableRow"; "viewTableRow": "viewTableRow"; "deleteTableRow": "deleteTableRow"; "openExternalLink": "openExternalLink"; "openpopupLink": "openpopupLink"; "routeTo": "routeTo"; "openPopup": "openPopup"; "sortOrder": "sortOrder"; "filterSearchValue": "filterSearchValue"; "filterBuilderPopup": "filterBuilderPopup"; "filterPanel": "filterPanel"; "multipleFilterValues": "multipleFilterValues"; "downloadTableRow": "downloadTableRow"; "rowSelection": "rowSelection"; "toggleRow": "toggleRow"; "duplicateRow": "duplicateRow"; "viewVersions": "viewVersions"; "activateVersion": "activateVersion"; "activatePage": "activatePage"; "deactivatePage": "deactivatePage"; "duplicatePageVersion": "duplicatePageVersion"; "selectedRowsData": "selectedRowsData"; }, never, never, false, never>;
}
