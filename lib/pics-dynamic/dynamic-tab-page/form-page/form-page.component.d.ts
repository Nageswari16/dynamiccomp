import { Location } from '@angular/common';
import { AfterViewInit, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { FormioComponent } from '@formio/angular';
import { FileError, NgxfUploaderService } from 'ngxf-uploader';
import { SpeechRecognitionService } from '../../@core/service/speech-recognition.service';
import { OCRService } from '../../@core/service/ocr.service';
import { LocalService } from '../../@core/service/local.service';
import { PlatformDataStoreService } from '../../@core/service/platform-data-store.service';
import { DataStoreService } from '../../@core/service/data-store.service';
import { DynamicTabPageService } from '../../@core/service/dynamic-tab-page-service';
import { DynamicsearchService } from '../../@core/service/dynamicsearch.service';
import { AuthService } from '../../@core/service/auth.service';
import { AttachmentsService } from '../../@core/service/attachments.service';
import { OcrValidationService } from '../../@core/service/ocr-validation.service';
import { FormioService } from '../../@core/service/formio.service';
import { AlertService } from '../../@core/service/alert.service';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Store } from '@ngrx/store';
import { ComponentState } from '../../@shared/master-view-state/master-view.state';
import { Observable, Subscription } from 'rxjs';
import { AppState } from '../../@core/core.state';
import { FormSubmissionService } from './formsubmit.service';
import { ocrResponseService } from './ocr-response.service';
import { customEventService } from './custom-event.service';
import { routeParamService } from './routeparam.service';
import { VideoSpeechContentService } from './video-speech-content.service';
import { TemplateService } from './form-template.service';
import * as i0 from "@angular/core";
export declare class FormPageComponent implements OnInit, OnDestroy, AfterViewInit {
    router: Router;
    private route;
    private _formIO;
    private templateService;
    private ocrResponseService;
    private customEventService;
    private videoSpeechContentService;
    private routeparamService;
    private store;
    private _storeservice;
    private formSubmissionService;
    private submitFailed;
    formId: any;
    tabId: any;
    jsonForm: any;
    fromTitle: any;
    editId: any;
    id: any;
    submittedData: any;
    user: any;
    multiSelectDropDowns: Array<string>;
    pageId: any;
    sourceid: string;
    externalParameters: string;
    pageDataSubscription: any;
    isDialogPopup: boolean;
    private dialogRef;
    external_scanner: ElementRef;
    validationPopup: TemplateRef<any>;
    private validationPopupRef;
    isReadOnly: boolean;
    showBack: boolean;
    isTitle: any;
    afterSubmit: EventEmitter<any>;
    personId: any;
    fromWorkFlow: boolean;
    clickedServiceCase: boolean;
    serviceId: any;
    speechData: string;
    notification: string;
    organizationId: any;
    FormInputs: any[];
    scannerConfig: any;
    tabData: any;
    narrative: any;
    purpose: any;
    pagetype: string;
    localstorage: LocalService;
    sessionStorage: LocalService;
    location: Location;
    dataStore: DataStoreService;
    speechRecognitionService: SpeechRecognitionService;
    uploadService: NgxfUploaderService;
    ocr: OCRService;
    appointmentList: Promise<boolean> | undefined;
    isformIO: boolean;
    formIO: FormioComponent;
    currentYouthId: any;
    dynamicTabPageService: DynamicTabPageService;
    dynamicSearchService: DynamicsearchService;
    authService: AuthService;
    attachmentInfo: any;
    parentGridPage: string;
    parentGridPageId: any;
    alertService: AlertService;
    showOcrForm: boolean;
    attachmentService: AttachmentsService;
    formResponse: any;
    action: string;
    contentArray: any[];
    ocrValidationService: OcrValidationService;
    dataSub: any;
    btnVerify: boolean;
    editValue: any;
    loggedUser: any;
    providerData: any;
    check: any;
    showbackbtn: boolean;
    showTitle: boolean;
    componentId: any;
    selectedComponent: ComponentState;
    componentConfig$: Observable<ComponentState>;
    eventSubscription: Subscription;
    submissionDone: EventEmitter<Boolean>;
    confirmationmessage: string;
    showButton1: any;
    showButton2: any;
    button1Text: any;
    button2Text: any;
    button1Key: any;
    button2Key: any;
    button1Action: any;
    button2Action: any;
    modalService: NgbModal;
    button1Style: any;
    button2Style: any;
    dialog: MatDialog;
    httpService: any;
    appService: any;
    fallbackIdFromRoute: any;
    constructor(injector: Injector, router: Router, route: ActivatedRoute, _formIO: FormioService, templateService: TemplateService, ocrResponseService: ocrResponseService, customEventService: customEventService, videoSpeechContentService: VideoSpeechContentService, routeparamService: routeParamService, store: Store<AppState>, data: any, _storeservice: PlatformDataStoreService, formSubmissionService: FormSubmissionService);
    conditionCheckData(data: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    routerPageData(data: any): void;
    getPageTabs(): void;
    getSource(): void;
    onClickConfirmation(userAction: any, actionKey: any): void;
    closeValidationPopup(): void;
    validateForm(): void;
    masterCompositeViewRoute(data: any): void;
    onSubmit(submission: any): void;
    submiteWithoutId(requestData: any): void;
    addAttachment(info: any): void;
    submittedDate(result: any): void;
    submitToSurvey(): void;
    updateForm(requestData: any): void;
    closePopup(): void;
    customClickEvents(_data: any, event: any): void;
    getRouterConfig(isCompositePageRefresh?: boolean): void;
    getConfiguration(): Promise<any>;
    private getTemplate;
    checkParams(element: any): any;
    conditionCheckTemplate(result: any): void;
    prepareFormKeyLabel(json: any): void;
    getActionSelect(result: any, action: any): void;
    getMultipleFrom(result: any): void;
    private processMultiSelectDropdowns;
    loadIncidentData(): void;
    private callGetAPI;
    conditionCheckCallGetAPI(): void;
    formresponse(action: any): void;
    resultNullCheck(data: any): any;
    openBottomSheet(): void;
    redirect(): void;
    customEventsButton(event: any): void;
    uploadFile(file: File | FileError): void;
    ngOnDestroy(): void;
    customEvent(event: any): void;
    getEmittedData(data: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormPageComponent, [null, null, null, null, null, null, null, null, null, null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormPageComponent, "app-form-page", never, { "editId": { "alias": "editId"; "required": false; }; "pageId": { "alias": "pageId"; "required": false; }; "sourceid": { "alias": "sourceid"; "required": false; }; "externalParameters": { "alias": "externalParameters"; "required": false; }; "isReadOnly": { "alias": "isReadOnly"; "required": false; }; "componentId": { "alias": "componentId"; "required": false; }; }, { "afterSubmit": "afterSubmit"; "submissionDone": "submissionDone"; }, never, never, false, never>;
}
